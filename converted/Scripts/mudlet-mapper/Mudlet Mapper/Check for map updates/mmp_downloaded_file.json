{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "mmp_downloaded_file",
    "packageName": null,
    "script": "function mmp_downloaded_file(_, filename)\n  if not io.exists(filename) then return end\n\n  -- workaround for https://bugs.launchpad.net/mudlet/+bug/1092769\n--  if mmp[\"downloaded_file_block_\"..filename] then return end\n--  mmp[\"downloaded_file_block_\"..filename] = tempTimer(5, [[mmp[\"downloaded_file_block_]]..filename..[[\"] = nil]])\n\n  if filename == tostring(mmp.mapperfile) then   -- mapper script version\n\tmmp.checkingupdates = false\n\n    local f, s = io.open(filename)\n    if f then s = f:read(\"*l\"):trim(); io.close(f) end\n\n    if s ~= tostring(mmp.version) then\n      mmp.newmapperversion = s\n      mmp.retrievechangelog()\n    end\n\n  elseif filename == tostring(mmp.changelogfile) then   -- changelog for the mapper script\n\tmmp.checkingupdates = false\n\n    local f, s, changelog = io.open(filename)\n    if f then changelog = f:read(\"*a\"); io.close(f) end\n\n    mmp.echon(\"\")\n    echoLink(\"The mapper script was updated! Would you like to download the update? Click here if so.\", \"mmp.downloadmapperscript()\", \"Changelog for the latest (\"..tostring(mmp.version)..\" -> \"..tostring(mmp.newmapperversion)..\") update:\\n\"..changelog, true)\n\n  elseif filename == mmp.crowdchangelogfile then   -- changelog for the crowdmap\n    local f, s = io.open(filename)\n    if f then s = f:read(\"*a\"); io.close(f) end\n\n    -- make environment\n    local env = {} -- add functions you know are safe here\n\n    -- run code under environment [Lua 5.1]\n    local function run(untrusted_code)\n      if untrusted_code:byte(1) == 27 then return nil, \"binary bytecode prohibited\" end\n      local untrusted_function, message = loadstring(untrusted_code)\n      if not untrusted_function then return nil, message end\n      setfenv(untrusted_function, env)\n      return pcall(untrusted_function)\n    end\n\n    run(s)\n\n\tmmp.crowdchangelog = env.changelog\n\n    mmp.echon(\"The crowdmap map was \")\n    setUnderline(true)\n    echoLink(\"updated\", '', \"New version: \"..tostring(mmp.newversion)..\", previous version: \"..(mmp.oldversion or \"(none)\"), true)\n    setUnderline(false)\n    echo(\" (\")\n    setUnderline(true)\n    echoLink(\"see full changelog\", \"mmp.showcrowdchangelog()\", 'View the full changelog for mappers', true)\n    setUnderline(false)\n    echo(\"). Latest improvement is: \"..tostring(mmp.crowdchangelog and mmp.crowdchangelog[#mmp.crowdchangelog] or '?')..\".\\n\")\n\n    mmp.downloadcrowdmap(mmp.newversion)\n\n  elseif filename == mmp.crowdmapfile then    -- crowdmap map\n    mmp.echo(\"Map downloaded, loading it in...\")\n\n    local tmp = getRoomUserData(1, \"gotoMapping\")\n    local oldmaptable = {}\n\n    if tmp ~= \"\" then\n      oldmaptable = yajl.to_value(tmp)\n    end\n\n    local ok = loadMap(filename)\n\n    if ok then\n      if mmp.game ~= \"starmourn\" then\n        local wc = mmp.lockWormholes()\n  \tlocal ws = mmp.lockSewers()\n        mmp.lockPebble()\n        if mmp.game == \"achaea\" and wc == 0 and ws == 0 then -- in achaea, using crowdmap, if we didn't get any special exits - it means Mudlet needs to be updated\n          mmp.echo(\"Sorry, it seems your Mudlet isn't compatible with the new crowdmap format - and the map cannot be loaded fully. Please update your Mudlet:\\n  http://www.mudlet.org/download/\")\n          return\n        end\n      end\n\n      if mmp.settings.waterwalk then mmp.enableWaterWalk() else mmp.disableWaterWalk() end\n\n      mmp.echo(\"Map loaded fine - enjoy!\")\n\n      tmp = getRoomUserData(1, \"gotoMapping\")\n      local newmaptable = {}\n\n      if tmp ~= \"\" then\n        newmaptable = yajl.to_value(tmp)\n      end\n\n      for k,v in pairs(oldmaptable) do newmaptable[k] = v end\n      setRoomUserData(1, \"gotoMapping\", yajl.to_string(newmaptable))\n      mmp.echo(\"Marks from the old map migrated successfully.\")\n\n      raiseEvent(\"mmapper updated map\")\n    else\n      mmp.echon(\"Map failed to load - you need to have the mapper open. Please open it, and then \")\n      echoLink(\"click here\", [[\n        local tmp = getRoomUserData(1, \"gotoMapping\")\n        local oldmaptable = {}\n        if tmp ~= \"\" then\n          oldmaptable = yajl.to_value(tmp)\n        end\n\n        local ok = loadMap(']]..filename..[[')\n        if ok then\n        local wc = mmp.lockWormholes()\n\t    local ws = mmp.lockSewers()\n        mmp.lockPebble()\n        if mmp.game == \"achaea\" and wc == 0 and ws == 0 then -- in achaea, using crowdmap, if we didn't get any special exits - it means Mudlet needs to be updated\n          mmp.echo(\"Sorry, it seems your Mudlet isn't compatible with the new crowdmap format - and the map cannot be loaded fully. Please update your Mudlet:\\n  http://www.mudlet.org/download/\")\n          return\n        end\n\n        if mmp.settings.waterwalk then mmp.enableWaterWalk() else mmp.disableWaterWalk() end\n\n        mmp.echo(\"Map loaded successfully!\")\n\n          tmp = getRoomUserData(1, \"gotoMapping\")\n          local newmaptable = {}\n          if tmp ~= \"\" then\n            newmaptable = yajl.to_value(tmp)\n          end\n          for k,v in pairs(oldmaptable) do newmaptable[k] = v end\n          setRoomUserData(1, \"gotoMapping\", yajl.to_string(newmaptable))\n          mmp.echo(\"Marks from the old map migrated successfully.\")\n          raiseEvent(\"mmapper updated map\")\n        else mmp.echo(\"Nope, didn't work. Open the map and try again?\") end\n      ]],\n      \"Click here to try loading the map again\")\n      echo(\" to try loading it in again.\\n\")\n    end\n\n  elseif filename == tostring(mmp.downloadedscript) then   -- new mapper script xml downloaded\n\tmmp.checkingupdates = false\n\n    mmp.echo(\"Your mapper script was downloaded to '\"..filename..\"' - uninstall the current copy and install the new one now!\")\n\n  elseif filename == tostring(mmp.mapfile) then   -- map version #, either IRE's or crowd\n\tmmp.checkingupdates = false\n\n    local function needupdate(currentmd5, oldmd5)\n      if not mmp.settings.crowdmap then\n        mmp.echon(\"The games map was \")\n        echoLink(\"updated\", '', \"New MD5: \"..tostring(currentmd5)..\", previous MD5: \"..(oldmd5 or \"(none)\"), true)\n        echo(\" - you should update yours! Go to Settings -> Mapper tab and click on the button there. Once you've updated, \")\n        echoLink(\"click here\", \"mmp.updatedmap('\"..currentmd5..\"')\", \"Click here to quiet the update reminder\")\n        echo(\" to remove the reminder.\")\n      else\n        mmp.newversion, mmp.oldversion = currentmd5, oldmd5\n        mmp.retrievecrowdchangelog()\n      end\n    end\n\n    local f, s = io.open(filename)\n    if f then s = f:read(\"*a\"); io.close(f) end\n    local currentmd5 = string.match(s, \"([a-z0-9]+)  map%.xml\")\n\n    -- using crowdsourced map\n    if not currentmd5 then\n      currentmd5 = s:trim()\n    end\n\n\tos.remove(filename)\n\n    -- never checked yet?\n    if not io.exists(getMudletHomeDir()..\"/map downloads/current\") then needupdate(currentmd5) return end\n\n    -- otherwise read old file and check\n    local f, s = io.open(getMudletHomeDir()..\"/map downloads/current\")\n    if f then s = f:read(\"*a\"); io.close(f) end\n\n    if s ~= currentmd5 then needupdate(currentmd5, s) end\n  end\nend",
    "eventHandlerList": "\n\t\t\t\t\t\t\t"
}