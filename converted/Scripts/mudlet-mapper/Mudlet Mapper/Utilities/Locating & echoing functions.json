{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Locating & echoing functions",
    "packageName": null,
    "script": "function mmp.filterRooms(rooms, area)\n  local unassignedRooms = {}\n  local areaRooms = {}\n  for roomnum, roomname in pairs(rooms) do\n    local roomarea = getRoomUserData(roomnum, \"Game Area\")\n    if roomarea == \"\" then\n      unassignedRooms[roomnum] = roomname\n    elseif roomarea == area then\n      areaRooms[roomnum] = roomname\n    end\n  end\n  return next(areaRooms) and areaRooms or unassignedRooms\nend\n\n-- for a given room name, we'll echo all the vnums\n\nfunction mmp.echonums(roomname, area)\n  local t = mmp.searchRoomExact(roomname)\n  if area then\n    t = mmp.filterRooms(t, area)\n  end\n  if not next(t) then\n    echo(\"?\")\n    return nil\n  end\n  -- transform the kv table into a table of tables for cleaner code.\n  -- + perhaps Mudlet in future will give this us anyway, sorted by relevancy\n  local dt = {}\n  for roomid, room in pairs(t) do\n    dt[#dt + 1] = {name = room, id = roomid}\n  end\n  -- we can have nothing if we asked for exact match\n  if not dt[1] then\n    echo(\"?---\")\n    return\n  end\n  -- display first three ids. Can't really nicely table.concat them.\n  cechoLink(\n    \"<\" .. mmp.settings.echocolour .. \">\" .. dt[1].id,\n    'mmp.gotoRoom(' .. dt[1].id .. ')',\n    string.format(\"Go to %s (%s)\", dt[1].id, dt[1].name),\n    true\n  )\n  if not dt[2] then\n    return\n  end\n  echo(\", \")\n  cechoLink(\n    \"<\" .. mmp.settings.echocolour .. \">\" .. dt[2].id,\n    'mmp.gotoRoom(' .. dt[2].id .. ')',\n    string.format(\"Go to %s (%s)\", dt[2].id, dt[2].name),\n    true\n  )\n  if not dt[3] then\n    return\n  end\n  echo(\", \")\n  cechoLink(\n    \"<\" .. mmp.settings.echocolour .. \">\" .. dt[3].id,\n    'mmp.gotoRoom(' .. dt[3].id .. ')',\n    string.format(\"Go to %s (%s)\", dt[3].id, dt[3].name),\n    true\n  )\n  if not dt[4] then\n    return\n  end\n  echo(\", ...\")\nend\n\nfunction mmp.roomEcho(query)\n  local result = mmp.searchRoom(query)\n  if not tonumber(select(2, next(result))) then\n    for roomid, roomname in pairs(result) do\n      roomid = tonumber(roomid)\n      cecho(\"<DarkSlateGrey> (\")\n      cechoLink(\n        \"<\" .. mmp.settings.echocolour .. \">\" .. roomid,\n        'mmp.gotoRoom(' .. roomid .. ')',\n        string.format(\"Go to %s (%s)\", roomid, tostring(roomname)),\n        true\n      )\n      cecho(\"<DarkSlateGrey>)\")\n    end\n  else\n    for roomname, roomid in pairs(result) do\n      roomid = tonumber(roomid)\n      cecho(\"<DarkSlateGrey> (\")\n      cechoLink(\n        \"<\" .. mmp.settings.echocolour .. \">\" .. roomid,\n        'mmp.gotoRoom(' .. roomid .. ')',\n        string.format(\"Go to %s (%s)\", roomid, tostring(roomname)),\n        true\n      )\n      cecho(\"<DarkSlateGrey>)\")\n    end\n  end\nend\n\nfunction mmp.locateAndEcho(room, person, area)\n  local t = mmp.searchRoomExact(room)\n  if area then\n    t = mmp.filterRooms(t, area)\n  end\n  echo(\"  (\")\n  mmp.echonums(room, area)\n  echo(\")\")\n  -- lowercase results\n  for k, v in pairs(t) do\n    if tonumber(k) then\n      t[k] = v:lower()\n    else\n      t[k:lower()] = v\n    end\n  end\n  if not (t[room:lower()] or table.contains(t, room:lower())) then\n    return\n  end\n  echo(\"\\n\")\n  if table.size(t) == 1 then\n    local k, v = next(t)\n    cecho(\n      \"<red>From your knowledge, that room is in <orange_red>\" ..\n      mmp.cleanAreaName(mmp.areatabler[getRoomArea(type(k) == \"number\" and k or v)] or \"?\") ..\n      \"<red>.\"\n    )\n  else\n    local k, v = next(t)\n    local areas = {}\n    if type(k) == \"number\" then\n      for k, _ in pairs(t) do\n        areas[mmp.areatabler[getRoomArea(k)] or \"?\"] = true\n      end\n    else\n      for _, k in pairs(t) do\n        areas[mmp.areatabler[getRoomArea(k)] or \"?\"] = true\n      end\n    end\n    local flattened_areas = {}\n    for k, _ in pairs(areas) do\n      if k ~= \"\" then\n        flattened_areas[#flattened_areas + 1] = mmp.cleanAreaName(k)\n      end\n    end\n    cecho(\n      \"<red>From your knowledge, that room might be in <orange_red>\" ..\n      table.concat(flattened_areas, \", or \") ..\n      \"<red>.\"\n    )\n  end\n  if person then\n    mmp.pdb[person] = room\n    mmp.pdb_lastupdate[person] = true\n    raiseEvent(\"mmapper updated pdb\")\n  end\nend\n\nfunction mmp.locateAndEchoSide(room, person)\n  local t = mmp.searchRoomExact(room)\n  echo(\"  (\")\n  mmp.echonums(room)\n  echo(\")\")\n  -- lowercase results\n  for k, v in pairs(t) do\n    if tonumber(k) then\n      t[k] = v:lower()\n    else\n      t[k:lower()] = v\n    end\n  end\n  if not (t[room:lower()] or table.contains(t, room:lower())) then\n    return\n  end\n  --echo\"\\n\"\n  if table.size(t) == 1 then\n    local k, v = next(t)\n    cecho(\n      \"<red>  (\" ..\n      mmp.cleanAreaName(mmp.areatabler[getRoomArea(type(k) == \"number\" and k or v)] or \"?\") ..\n      \")\"\n    )\n  else\n    local k, v = next(t)\n    local areas = {}\n    if type(k) == \"number\" then\n      for k, _ in pairs(t) do\n        areas[mmp.areatabler[getRoomArea(k)] or \"?\"] = true\n      end\n    else\n      for _, k in pairs(t) do\n        areas[mmp.areatabler[getRoomArea(k)] or \"?\"] = true\n      end\n    end\n    local flattened_areas = {}\n    for k, _ in pairs(areas) do\n      if k ~= \"\" then\n        flattened_areas[#flattened_areas + 1] = mmp.cleanAreaName(k)\n      end\n    end\n    cecho(\"<red> (\" .. table.concat(flattened_areas, \", \") .. \")\")\n  end\n  if person then\n    mmp.pdb[person] = room\n    mmp.pdb_lastupdate[person] = true\n    raiseEvent(\"mmapper updated pdb\")\n  end\nend\n\nfunction mmp.locateAndEchoInternal(room, person)\n  local t = mmp.searchRoomExact(room)\n  -- lowercase results\n  for k, v in pairs(t) do\n    if tonumber(k) then\n      t[k] = v:lower()\n    else\n      t[k:lower()] = v\n    end\n  end\n  if not (t[room:lower()] or table.contains(t, room:lower())) then\n    return\n  end\n  --echo\"\\n\"\n  if table.size(t) == 1 then\n    local k, v = next(t)\n    cecho(\n      \"<red> in \" ..\n      mmp.cleanAreaName(mmp.areatabler[getRoomArea(type(k) == \"number\" and k or v)] or \"?\") ..\n      \".\"\n    )\n  else\n    local k, v = next(t)\n    local areas = {}\n    if type(k) == \"number\" then\n      for k, _ in pairs(t) do\n        areas[mmp.areatabler[getRoomArea(k)] or \"?\"] = true\n      end\n    else\n      for _, k in pairs(t) do\n        areas[mmp.areatabler[getRoomArea(k)] or \"?\"] = true\n      end\n    end\n    local flattened_areas = {}\n    for k, _ in pairs(areas) do\n      if k ~= \"\" then\n        flattened_areas[#flattened_areas + 1] = mmp.cleanAreaName(k)\n      end\n    end\n    cecho(\"<red> in \" .. table.concat(flattened_areas, \", \") .. \".\")\n  end\n  echo(\"  (\")\n  mmp.echonums(room, true)\n  echo(\")\")\n  if person then\n    mmp.pdb[person] = room\n    mmp.pdb_lastupdate[person] = true\n    raiseEvent(\"mmapper updated pdb\")\n  end\nend",
    "eventHandlerList": null
}