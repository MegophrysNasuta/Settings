{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "mmp.roomLook",
    "packageName": null,
    "script": "function mmp.roomLook(input)\n  -- we can do a report with a number\n\n  local function handle_number(num)\n    -- compile all available data\n    if not mmp.roomexists(num) then\n      mmp.echo(num .. \" doesn't seem to exist.\")\n      return\n    end\n    local s, areanum = pcall(getRoomArea, num)\n    if not s then\n      mmp.echo(areanum);\n      return ;\n    end\n    local exits = getRoomExits(num)\n    local name = getRoomName(num)\n    local islocked = roomLocked(num)\n    local weight = (getRoomWeight(num) and getRoomWeight(num) or \"?\")\n    -- getRoomWeight is buggy in one of the versions, is actually linked to setRoomWeight and thus returns nil\n    local exitweights = (getExitWeights and getExitWeights(num) or {})\n    local coords = {getRoomCoordinates(num)}\n    local specexits = getSpecialExits(num)\n    local env = getRoomEnv(num)\n    local envname = (mmp.envidsr and mmp.envidsr[env]) or \"?\"\n    -- generate a report\n    mmp.echo(\n      string.format(\n        \"Room: %s #: %d area: %s (%d)\", name, num, tostring(mmp.areatabler[areanum]), areanum\n      )\n    )\n    mmp.echo(\n      string.format(\n        \"Coordinates: x:%d, y:%d, z:%d, locked: %s, weight: %s\",\n        coords[1],\n        coords[2],\n        coords[3],\n        (islocked and \"yep\" or \"nope\"),\n        tostring(weight)\n      )\n    )\n    mmp.echo(\n      string.format(\n        \"Environment: %s (%d)%s\",\n        tostring(envname),\n        env,\n        (getRoomUserData(num, \"indoors\") ~= '' and \", indoors\" or '')\n      )\n    )\n    mmp.echo(string.format(\"Exits (%d):\", table.size(exits)))\n    for exit, leadsto in pairs(exits) do\n      echo(\n        string.format(\n          \"  %s -> %s (%d)%s%s\\n\",\n          exit,\n          getRoomName(leadsto),\n          leadsto,\n          (\n            (getRoomArea(leadsto) or \"?\") == areanum and\n            \"\" or\n            \" (in \" ..\n            (mmp.areatabler[getRoomArea(leadsto)] or \"?\") ..\n            \")\"\n          ),\n          (\n            (not exitweights[mmp.anytoshort(exit)] or exitweights[mmp.anytoshort(exit)] == 0) and\n            \"\" or\n            \" (weight: \" ..\n            exitweights[mmp.anytoshort(exit)] ..\n            \")\"\n          )\n        )\n      )\n    end\n    -- display special exits if we got any\n    if next(specexits) then\n      mmp.echo(string.format(\"Special exits (%d):\", table.size(specexits)))\n      for leadsto, command in pairs(specexits) do\n        if type(command) == \"string\" then\n          echo(string.format(\"  %s -> %s (%d)\\n\", command, getRoomName(leadsto), leadsto))\n        else\n          -- new format - exit name, command\n          for cmd, locked in pairs(command) do\n            if locked == '1' then\n              cecho(\n                string.format(\n                  \"<DarkSlateGrey>  %s -> %s (%d) (locked)\\n\", cmd, getRoomName(leadsto), leadsto\n                )\n              )\n            else\n              echo(string.format(\"  %s -> %s (%d)\\n\", cmd, getRoomName(leadsto), leadsto))\n            end\n          end\n        end\n      end\n    end\n    local message = \"This room has the feature '%s'.\"\n    for _, mapFeature in pairs(mmp.getRoomMapFeatures(num)) do\n      mmp.echo(string.format(message, mapFeature))\n    end\n    -- actions we can do. This will be a short menu of sorts for actions\n    mmp.echo(\"Stuff you can do:\")\n    echo(\"  \")\n    echo(\"Clear all labels \")\n    setUnderline(true)\n    echoLink(\"(in area)\", 'mmp.clearLabels(' .. areanum .. ')', '', true)\n    setUnderline(false)\n    echo(\" \")\n    setUnderline(true)\n    echoLink(\n      \"(whole map)\",\n      [[\n    if not mmp.clearinglabels then\n      mmp.echo(\"Are you sure you want to clear all of your labels on this map? If yes, click the link again.\")\n      mmp.clearinglabels = true\n    else\n      mmp.clearLabels(\"map\")\n      mmp.clearinglabels = nil\n    end\n    ]],\n      '',\n      true\n    )\n    setUnderline(false)\n    echo(\"\\n\")\n    echo(\"  \")\n    setUnderline(true)\n    echoLink(\n      \"Check for mapper & map updates\", 'mmp.echo(\"Checking...\") mmp.checkforupdate()', '', true\n    )\n    setUnderline(false)\n    echo(\" \")\n    setUnderline(true)\n    echoLink(\n      \"(force map)\",\n      [[\n      if io.exists(getMudletHomeDir()..\"/map downloads/current\") then\n        local s,m = os.remove(getMudletHomeDir()..\"/map downloads/current\")\n        if not s then mmp.echo(\"Couldn't delete '\"..getMudletHomeDir()..\"/map downloads/current' file: \"..tostring(m)..\".\") end\n      end\n      mmp.echo(\"Re-downloading the latest crowdmap...\")\n      mmp.checkforupdate()\n    ]],\n      \"Re-download the map regardless if you have latest\",\n      true\n    )\n    setUnderline(false)\n    echo(\"\\n\")\n  end\n\n  -- see if we can do anything with the name\n\n  local function handle_name(name)\n    local result = mmp.searchRoom(name)\n    if type(result) == \"string\" then\n      cecho(\"<grey>You have no recollection of any room with that name.\")\n      return\n    end\n    -- if we got one result, then act on it\n    if table.size(result) == 1 then\n      if type(next(result)) == \"number\" then\n        handle_number(next(result))\n      else\n        handle_number(select(2, next(result)))\n      end\n      return\n    end\n    -- if not, then ask the user to clarify which one would they want\n    mmp.echo(\"Which room specifically would you like to look up?\")\n    if not select(2, next(result)) or not tonumber(select(2, next(result))) then\n      for roomid, roomname in pairs(result) do\n        roomid = tonumber(roomid)\n        cecho(string.format(\"  <LightSlateGray>%s<DarkSlateGrey> (\", tostring(roomname)))\n        cechoLink(\n          \"<\" .. mmp.settings.echocolour .. \">\" .. roomid,\n          'mmp.roomLook(' .. roomid .. ')',\n          string.format(\"View room details for %s (%s)\", roomid, tostring(roomname)),\n          true\n        )\n        cecho(\n          string.format(\n            \"<DarkSlateGrey>) in the <LightSlateGray>%s<DarkSlateGrey>.\\n\",\n            tostring(mmp.areatabler[getRoomArea(roomid)])\n          )\n        )\n      end\n    else\n      for roomname, roomid in pairs(result) do\n        roomid = tonumber(roomid)\n        cecho(string.format(\"  <LightSlateGray>%s<DarkSlateGrey> (\", tostring(roomname)))\n        cechoLink(\n          \"<\" .. mmp.settings.echocolour .. \">\" .. roomid,\n          'mmp.roomLook(' .. roomid .. ')',\n          string.format(\"View room details for %s (%s)\", roomid, tostring(roomname)),\n          true\n        )\n        cecho(\n          string.format(\n            \"<DarkSlateGrey>) in the <LightSlateGray>%s<DarkSlateGrey>.\\n\",\n            tostring(mmp.areatabler[getRoomArea(roomid)])\n          )\n        )\n      end\n    end\n  end\n\n  if not input then\n    if not mmp.roomexists(mmp.currentroom) then\n      mmp.echo(mmp.currentroom .. \" doesn't seem to be mapped yet.\")\n      mmp.echo(\"Stuff you can do:\")\n      echo(\"  \")\n      echoLink(\"Check for all updates\", 'mmp.echo(\"Checking...\") mmp.checkforupdate()', '')\n      echo(\" \")\n      echoLink(\n        \"(force map)\",\n        [[\n      local s,m = os.remove(getMudletHomeDir()..\"/map downloads/current\")\n        if io.exists(getMudletHomeDir()..\"/map downloads/current\") then\n          local s,m = os.remove(getMudletHomeDir()..\"/map downloads/current\")\n          if not s then mmp.echo(\"Couldn't delete '\"..getMudletHomeDir()..\"/map downloads/current' file: \"..tostring(m)..\".\") end\n        end\n        mmp.echo(\"Re-downloading the latest map...\")\n        mmp.checkforupdate()\n      ]],\n        \"Re-download the map regardless if you have latest\"\n      )\n      echo(\"\\n\")\n      mmp.echo(string.format(\"version %s.\", tostring(mmp.version)))\n      return\n    else\n      input = mmp.currentroom\n    end\n  end\n  if tonumber(input) then\n    handle_number(tonumber(input))\n  else\n    handle_name(input)\n  end\n  mmp.echo(string.format(\"version %s.\", tostring(mmp.version)))\nend",
    "eventHandlerList": null
}