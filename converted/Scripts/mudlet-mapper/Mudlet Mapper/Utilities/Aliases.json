{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Aliases",
    "packageName": null,
    "script": "function mmp.roomWhoFind(query)\n  if query:ends('.') then\n    query = query:sub(1, -2)\n  end\n  local result = mmp.searchRoomExact(query)\n  if type(result) == \"string\" or not next(result) then\n    cecho(\"<CadetBlue>  You have no recollection of any room with that name.\")\n    return\n  end\n  if not tonumber(select(2, next(result))) then\n    -- old style\n    for roomid, roomname in pairs(result) do\n      roomid = tonumber(roomid)\n      cecho(string.format(\"  <LightSlateGray>%s<DarkSlateGrey> (\", tostring(roomname)))\n      cechoLink(\n        \"<\" .. mmp.settings.echocolour .. \">\" .. roomid,\n        'mmp.gotoRoom(' .. roomid .. ')',\n        string.format(\"Go to %s (%s)\", roomid, tostring(roomname)),\n        true\n      )\n      cecho(\n        string.format(\n          \"<DarkSlateGrey>) <white>%s<DarkSlateGrey>.\\n\",\n          tostring(mmp.areatabler[getRoomArea(roomid)])\n        )\n      )\n    end\n  else\n    -- new style\n    for roomname, roomid in pairs(result) do\n      roomid = tonumber(roomid)\n      cecho(string.format(\"  <LightSlateGray>%s<DarkSlateGrey> (\", tostring(roomname)))\n      cechoLink(\n        \"<\" .. mmp.settings.echocolour .. \">\" .. roomid,\n        'mmp.gotoRoom(' .. roomid .. ')',\n        string.format(\"Go to %s (%s)\", roomid, tostring(roomname)),\n        true\n      )\n      cecho(\n        string.format(\n          \"<DarkSlateGrey>) <white>%s<DarkSlateGrey>.\\n\",\n          tostring(mmp.areatabler[getRoomArea(roomid)])\n        )\n      )\n    end\n  end\nend\n\nfunction mmp.roomFind(query, lines)\n  if query:ends('.') then\n    query = query:sub(1, -2)\n  end\n  local defaultLine = 30 -- this could this to a setting instead of a static number\n  local result = mmp.searchRoom(query)\n  if lines == 'all' then\n    lines = table.size(result)\n  end\n  lines = (lines ~= '') and tonumber(lines) or defaultLine\n\n  --create a new table (roomsTable) with keys and add areas to the table\n  local roomsTable = {}\n  for k, v in pairs(result) do\n    --not all rooms have an area associated with it in mmp.areatabler so need to either remove those or add one\n    local a = mmp.areatabler[getRoomArea(k)] or \"unknown\"\n    roomsTable[#roomsTable + 1] = {num = k, area = a, name = v}\n  end\n  --sort roomsTable by area name\n  table.sort(\n    roomsTable,\n    function(a, b)\n      return a.area < b.area\n    end\n  )\n  --start displaying info\n  if type(result) == \"string\" or not next(result) then\n    cecho(\"<grey>You have no recollection of any room with that name.\")\n    return\n  end\n  cecho(\"<DarkSlateGrey>You know the following relevant rooms:\\n\")\n\n  local function showmeropis(roomid)\n    if mmp.game ~= \"achaea\" then\n      return ''\n    end\n    return mmp.oncontinent(getRoomArea(roomid), \"Main\") and '' or ' (Meropis)'\n  end\n\n  local i = 1\n  if not tonumber(select(2, next(result))) then\n    cecho(string.format(\"<white> %-10s%-40s%s\\n\", \"ROOM ID\", \"ROOM NAME\", \"ROOM AREA\"))\n    for _, v in ipairs(roomsTable) do\n      if i > lines then\n        break\n      end\n      roomid = tonumber(v.num)\n      roomname = v.name\n      roomarea = v.area\n      cechoLink(\n        string.format(\"<\" .. mmp.settings.echocolour .. \"> %-10s\", roomid),\n        'mmp.gotoRoom(' .. roomid .. ')',\n        string.format(\"Go to %s (%s)\", roomid, tostring(roomname)),\n        true\n      )\n      cecho(string.format(\"<LightSlateGray>%-40s\", string.sub(tostring(roomname), 1, 39)))\n      cechoLink(\n        string.format(\n          \"<DarkSlateGrey>%s%s<DarkSlateGrey>\\n\",\n          mmp.cleanAreaName(tostring(mmp.areatabler[getRoomArea(roomid)])),\n          showmeropis(roomid)\n        ),\n        [[mmp.echoPath(mmp.currentroom, ]] .. roomid .. [[)]],\n        \"Display directions from here to \" .. roomname,\n        true\n      )\n      resetFormat()\n      i = i + 1\n    end\n  else\n    -- new style\n    --- not sure what this new area code is but it doesn't seem to fire\n    for roomname, roomid in pairs(result) do\n      roomid = tonumber(roomid)\n      cecho(string.format(\"  <LightSlateGray>%s<DarkSlateGrey> (\", tostring(roomname)))\n      cechoLink(\n        \"<\" .. mmp.settings.echocolour .. \">\" .. roomid,\n        'mmp.gotoRoom(' .. roomid .. ')',\n        string.format(\"Go to %s (%s)\", roomid, tostring(roomname)),\n        true\n      )\n      cecho(\n        string.format(\n          \"<DarkSlateGrey>) in <LightSlateGray>%s%s<DarkSlateGrey>.\",\n          mmp.cleanAreaName(tostring(mmp.areatabler[getRoomArea(roomid)])),\n          showmeropis(roomid)\n        )\n      )\n      fg(\"DarkSlateGrey\")\n      echoLink(\n        \" > Show path\\n\",\n        [[mmp.echoPath(mmp.currentroom, ]] .. roomid .. [[)]],\n        \"Display directions from here to \" .. roomname,\n        true\n      )\n      resetFormat()\n    end\n  end\n  if table.size(result) <= lines then\n    cecho(string.format(\"<DarkSlateGrey>%d rooms found.\\n\", table.size(result)))\n  else\n    lastRoomQuery = query\n    cechoLink(\n      string.format(\n        \"<DarkSlateGrey>%d of %d rooms shown. Click to see all rooms.\\n\", lines, table.size(result)\n      ),\n      'mmp.roomFind(lastRoomQuery, \"all\")',\n      string.format(\"Show all %d rooms.\", table.size(result)),\n      true\n    )\n  end\nend\n\nfunction mmp.echoRoomList(areaname, exact)\n  local areaid, msg, multiples = mmp.findAreaID(areaname, exact)\n  if areaid then\n    local roomlist, endresult = getAreaRooms(areaid) or {}, {}\n    -- obtain a room list for each of the room IDs we got\n    local getRoomName = getRoomName\n    for _, id in pairs(roomlist) do\n      endresult[id] = getRoomName(id)\n    end\n    -- sort room IDs so we can display them in order\n    table.sort(roomlist)\n    -- now display something half-decent looking\n    cecho(\n      string.format(\n        \"<DarkSlateGrey>List of all rooms in <grey>%s<DarkSlateGrey> (areaid <grey>%s<DarkSlateGrey> - <grey>%d<DarkSlateGrey> rooms):\\n\",\n        msg,\n        areaid,\n        table.size(endresult)\n      )\n    )\n    local echoLink, sformat, fg, echo = echoLink, string.format, fg, cecho\n    -- use pairs, as we can have gaps between room IDs\n    for _, roomid in pairs(roomlist) do\n      local roomname = endresult[roomid]\n      fg(\"blue\")\n      cechoLink(\n        \"<\" .. mmp.settings.echocolour .. \">\" .. sformat(\"%6s\", roomid),\n        'mmp.gotoRoom(' .. roomid .. ')',\n        string.format(\"Go to %s (%s)\", roomid, tostring(roomname)),\n        true\n      )\n      cecho(string.format(\"<DarkSlateGrey>: <LightSlateGray>%s<DarkSlateGrey>.\\n\", roomname))\n    end\n  elseif not id and #multiples > 0 then\n    mmp.echo(\"For which area would you want to list rooms for?\")\n    fg(\"DimGrey\")\n    for _, areaname in ipairs(multiples) do\n      echo(\"  \");\n      setUnderline(true)\n      echoLink(\n        areaname,\n        'mmp.echoRoomList(\"' .. areaname .. '\", true)',\n        \"Click to view the room list for \" .. areaname,\n        true\n      )\n      setUnderline(false)\n      echo(\"\\n\")\n    end\n    resetFormat()\n  else\n    mmp.echo(string.format(\"Don't know of any area named '%s'.\", areaname))\n  end\nend\n\nfunction mmp.echoAreaList()\n  local list = getAreaTable()\n  local ids, rlist = {}, {}\n  local totalroomcount = 0\n  for area, id in pairs(list) do\n    if id ~= 0 then\n      ids[#ids + 1] = id;\n      rlist[id] = area\n    end\n  end\n  table.sort(ids)\n  -- count the amount of rooms in an area, taking care to count the room in the 0th\n  -- index as well if there is one\n  -- saves the total room count on the side as well\n\n  local function countrooms(areaid)\n    local allrooms = getAreaRooms(areaid) or {}\n    local areac = (#allrooms or 0) + (allrooms[0] and 1 or 0)\n    totalroomcount = totalroomcount + areac\n    return areac\n  end\n\n  cecho(string.format(\"<DarkSlateGrey>List of all areas we know of (click to view room list):\\n\"))\n  local getAreaRooms, cecho, fg, echoLink, format, rep =\n    getAreaRooms, cecho, fg, echoLink, string.format, string.rep\n  for _, id in pairs(ids) do\n    cecho(format(\"<\" .. mmp.settings.echocolour .. \">%s%d \", rep(\" \", (7 - #tostring(id))), id))\n    -- +1 because getAreaRooms starts counting at 0\n    fg(\"DarkSlateGrey\")\n    echoLink(\n      rlist[id] .. (\" \"):rep(40 - #rlist[id]) .. \"(\" .. mmp.comma_value(countrooms(id)) .. \" rooms)\",\n      'mmp.echoRoomList(\"' .. rlist[id] .. '\", true)',\n      \"View the room list for \" .. rlist[id],\n      true\n    )\n    echo(\"\\n\")\n  end\n  cecho(\n    string.format(\n      \"<DarkSlateGrey>Total amount of rooms in this map: %s\\n\", mmp.comma_value(totalroomcount)\n    )\n  )\nend\n\nfunction mmp.clearLabels(areaid)\n  local function clearlabels(areaid)\n    local t = getMapLabels(areaid)\n    if type(t) ~= \"table\" then\n      return\n    end\n    for labelid, _ in pairs(t) do\n      deleteMapLabel(areaid, labelid)\n    end\n  end\n\n  if areaid == \"map\" then\n    for areaid in pairs(mmp.areatabler) do\n      clearlabels(areaid)\n    end\n    mmp.echo(\"Cleared labels in all of the map.\")\n    return\n  end\n  clearlabels(areaid)\n  mmp.echo(string.format(\"Cleared all labels in '%s'.\", mmp.areatabler[areaid]))\nend\n\nfunction mmp.deleteArea(name, exact)\n  local id, fname, ma = mmp.findAreaID(name, exact)\n  if id then\n    mmp.doareadelete(id)\n  elseif next(ma) then\n    mmp.echo(\"Which one of these specifically would you like to delete?\")\n    fg(\"DimGrey\")\n    for _, name in ipairs(ma) do\n      echo(\"  \")\n      setUnderline(true)\n      echoLink(name, [[mmp.deleteArea(\"]] .. name .. [[\", true)]], \"Delete \" .. name, true)\n      setUnderline(false)\n      echo(\"\\n\")\n    end\n    resetFormat()\n  else\n    mmp.echo(\"Don't know of that area.\")\n  end\n  raiseEvent(\"mmp areas changed\")\nend\n\n-- the function actually doing area deletion\n\nfunction mmp.doareadelete(areaid)\n  mmp.deletingarea = {}\n  local t = mmp.deletingarea\n  local rooms = getAreaRooms(areaid)\n  t.roomcount = table.size(rooms)\n  t.roombatches = {}\n  t.currentbatch = 1\n  t.areaid = areaid\n  t.areaname = getAreaTableSwap()[areaid]\n  -- delete the area right away if there's nothing in it\n  if t.roomcount == 0 then\n    deleteArea(t.areaid)\n    mmp.echo(\"All done! The area was already gone/empty.\")\n  end\n  local rooms_per_batch = 100\n  -- split up rooms into tables of tables, to be deleted in batches so\n  -- that our print statements in between get a chance to be processed\n  for batch = 1, t.roomcount, 100 do\n    t.roombatches[#t.roombatches + 1] = {}\n    local onebatch = t.roombatches[#t.roombatches]\n    for inbatch = 1, 100 do\n      onebatch[#onebatch + 1] = rooms[batch + inbatch]\n    end\n  end\n\n  function mmp.deletenextbatch()\n    local t = mmp.deletingarea\n    if not t then\n      return\n    end\n    local currentbatch = t.roombatches[t.currentbatchi]\n    if currentbatch == nil then\n      deleteArea(t.areaid)\n      mmp.echo(\"All done! Deleted the '\" .. t.areaname .. \"' area.\")\n      mmp.deletingarea = nil\n      centerview(mmp.currentroom)\n      return\n    end\n    local deleteRoom = deleteRoom\n    for i = 1, #currentbatch do\n      deleteRoom(currentbatch[i])\n    end\n    mmp.echo(\n      string.format(\n        \"Deleted %d batch%s so far, %d left to go - %.2f%% done out of %d needed\",\n        t.currentbatchi,\n        (t.currentbatchi == 1 and '' or 'es'),\n        #t.roombatches - t.currentbatchi,\n        (100 / #t.roombatches) * t.currentbatchi,\n        #t.roombatches\n      )\n    )\n    t.currentbatchi = t.currentbatchi + 1\n    tempTimer(0.010, mmp.deletenextbatch)\n  end\n\n  t.currentbatchi = 1\n  mmp.echo(\"Prepped room batches, starting deletion...\")\n  tempTimer(0.010, mmp.deletenextbatch)\nend\n\nfunction mmp.renameArea(name, exact)\n  if not (mmp.currentroom or getRoomArea(mmp.currentroom)) then\n    mmp.echo(\"Don't know what area are we in at the moment, to rename it.\")\n  else\n    setAreaName(getRoomArea(mmp.currentroom), name)\n    mmp.echo(\n      string.format(\n        \"Renamed %s to %s (%d).\",\n        mmp.areatabler[getRoomArea(mmp.currentroom)],\n        name,\n        getRoomArea(mmp.currentroom)\n      )\n    )\n    centerview(mmp.currentroom)\n  end\n  raiseEvent(\"mmp areas changed\")\nend\n\nfunction mmp.roomArea(otherroom, name, exact)\n  local id, fname, ma\n  if tonumber(name) then\n    id = tonumber(name);\n    fname = mmp.areatabler[id]\n  else\n    id, fname, ma = mmp.findAreaID(name, exact)\n  end\n  if otherroom ~= \"\" and not mmp.roomexists(otherroom) then\n    mmp.echo(\"Room id \" .. otherroom .. \" doesn't seem to exist.\")\n    return\n  elseif otherroom == \"\" and not mmp.roomexists(mmp.currentroom) then\n    mmp.echo(\"Don't know where we are at the moment.\")\n    return\n  end\n  otherroom = otherroom ~= \"\" and otherroom or mmp.currentroom\n  if id then\n    setRoomArea(otherroom, id)\n    mmp.echo(\n      string.format(\n        \"Moved %s to %s (%d).\",\n        (getRoomName(otherroom) ~= \"\" and getRoomName(otherroom) or \"''\"),\n        fname,\n        id\n      )\n    )\n    centerview(otherroom)\n  elseif next(ma) then\n    mmp.echo(\"Into which area exactly would you like to move the room?\")\n    fg(\"DimGrey\")\n    for _, name in ipairs(ma) do\n      echo(\"  \")\n      setUnderline(true)\n      echoLink(\n        name, [[mmp.roomArea('', \"]] .. name .. [[\", true)]], \"Move the room to \" .. name, true\n      )\n      setUnderline(false)\n      echo(\"\\n\")\n    end\n    resetFormat()\n  else\n    mmp.echo(\"Don't know of that area.\")\n  end\nend\n\nfunction mmp.getAreaBorders(areaid)\n  if mmp.debug then\n    mmp.getAreaBordersTimer = mmp.getAreaBordersTimer or createStopWatch()\n    startStopWatch(mmp.getAreaBordersTimer)\n  end\n  -- make sure we have all exits into the area.\n  raiseEvent(\"mmp link externals\")\n  local roomlist, endresult = getAreaRooms(areaid), {}\n  -- sometimes getAreaRooms can give us no result :(\n  if not roomlist then\n    mmp.echo(\n      \"Sorry, seems we can't go there - getAreaRooms(\" ..\n      areaid ..\n      \") didn't give us any results (Mudlet problem - redownloading the map might help fix it)\"\n    )\n    return\n  end\n  if table.is_empty(roomlist) then\n    mmp.echo(\n      \"Sorry, seems we can't go there - \" .. getRoomAreaName(areaid) .. \" has no rooms in it.\"\n    )\n    return\n  end\n  -- make a key-value list of room IDs\n  local reverselist = {}\n  for i = 0, #roomlist do\n    reverselist[roomlist[i]] = true\n  end\n  local getRoomName, contains, pairs = getRoomName, table.contains, pairs\n  if getAllRoomEntrances then\n    for i = 0, #roomlist do\n      local id = roomlist[i]\n      local entrancesFrom = getAllRoomEntrances(id)\n      for remoteRoomIndex = 1, #entrancesFrom do\n        if not reverselist[entrancesFrom[remoteRoomIndex]] then\n          endresult[id] = getRoomName(id)\n        end\n      end\n    end\n  else\n    local getRoomExits, getSpecialExitsSwap = getRoomExits, getSpecialExitsSwap\n    -- obtain a room list for each of the room IDs we got\n    --for _, id in pairs(roomlist) do\n    for i = 0, #roomlist do\n      local id = roomlist[i]\n      local exits = getRoomExits(id)\n      for _, to in pairs(exits) do\n        if not reverselist[to] then\n          endresult[id] = getRoomName(id)\n        end\n      end\n      local specialexits = getSpecialExitsSwap(id)\n      for _, to in pairs(specialexits) do\n        if not reverselist[to] then\n          endresult[id] = getRoomName(id)\n        end\n      end\n    end\n  end\n  if mmp.debug then\n    mmp.echo(\n      \"mmp.getAreaBordersTimer() on areaid \" ..\n      areaid ..\n      \" took \" ..\n      stopStopWatch(mmp.getAreaBordersTimer) ..\n      \"s to run. Returned \" ..\n      table.size(endresult) ..\n      \" results.\"\n    )\n  end\n  -- clean up external exits\n  raiseEvent(\"mmp clear externals\")\n  return endresult\nend\n\nfunction mmp.viewArea(where, exact)\n  if not where or not type(where) == \"string\" then\n    mmp.echo(\"Which area would you like to view?\")\n    return\n  end\n  local areaid, msg, multiples = mmp.findAreaID(where, exact)\n  if areaid then\n    -- center on the first room ID, which typically is the start of an area\n    local rooms = getAreaRooms(areaid) or {}\n    if not rooms[1] then\n      mmp.echo(\"The area has no rooms in it.\")\n    else\n      centerview(rooms[1])\n    end\n  elseif not areaid and #multiples > 0 then\n    mmp.echo(\"Which area would you like to view exactly?\")\n    fg(\"DimGrey\")\n    for _, areaname in ipairs(multiples) do\n      echo(\"  \");\n      setUnderline(true)\n      echoLink(\n        areaname, 'mmp.viewArea(\"' .. areaname .. '\", true)', \"Click to view \" .. areaname, true\n      )\n      setUnderline(false)\n      echo(\"\\n\")\n    end\n    resetFormat()\n    return\n  else\n    mmp.echo(string.format(\"Don't know of any area named '%s'.\", where))\n    return\n  end\nend\n\n-- room label the room I'm in\n-- room label 342 this is a label in room 342\n-- room label green this is a green label where I'm at\n-- room label green black this is a green to black label where I'm at\n-- room label 34 green black this is a green to black label at room 34\n-- how it works: split input string into tokens by space, then determine\n-- what to do by checking first few tokens, and finally call the local\n-- function with the proper arguments\n\nfunction mmp.roomLabel(input)\n  if not createMapLabel then\n    mmp.echo(\n      \"Your Mudlet doesn't support createMapLabel() yet - please update to 2.0-test3 or better.\"\n    )\n    return\n  end\n  local tk = input:split(\" \")\n  local room, fg, bg, message = mmp.currentroom, \"yellow\", \"red\", \"Some room label\"\n  -- input always have to be something, so tk[1] at least always exists\n  if tonumber(tk[1]) then\n    room = tonumber(table.remove(tk, 1))\n    -- remove the number, so we're left with the colors or msg\n  end\n  -- next: is this a foreground color?\n  if tk[1] and color_table[tk[1]] then\n    fg = table.remove(tk, 1)\n  end\n  -- next: is this a background color?\n  if tk[1] and color_table[tk[1]] then\n    bg = table.remove(tk, 1)\n  end\n  -- the rest would be our message\n  if tk[1] then\n    message = table.concat(tk, \" \")\n  end\n  -- if we haven't provided a room ID and we don't know where we are yet, we can't make a label\n  if not room then\n    mmp.echo(\"We don't know where we are to make a label here.\")\n    return\n  end\n  local x, y = getRoomCoordinates(room)\n  local f1, f2, f3 = unpack(color_table[fg])\n  local b1, b2, b3 = unpack(color_table[bg])\n  -- finally: do it :)\n  local lid = createMapLabel(getRoomArea(room), message, x, y, f1, f2, f3, b1, b2, b3)\n  mmp.echo(\n    string.format(\n      \"Created new label #%d '%s' in %s.\", lid, message, getRoomAreaName(getRoomArea(room))\n    )\n  )\nend\n\nfunction mmp.areaLabels(where, exact)\n  if not getMapLabels then\n    mmp.echo(\n      \"Your Mudlet doesn't support getMapLabels() yet - please update to 2.0-test3 or better.\"\n    )\n    return\n  end\n  if (not where or not type(where) == \"string\") and not mmp.currentroom then\n    mmp.echo(\"For which area would you like to view labels?\")\n    return\n  end\n  if not where then\n    exact = true\n    where = getRoomAreaName(getRoomArea(mmp.currentroom))\n  end\n  local areaid, msg, multiples = mmp.findAreaID(where, exact)\n  if areaid then\n    local t = getMapLabels(areaid)\n    if type(t) ~= \"table\" or not next(t) then\n      mmp.echo(string.format(\"'%s' doesn't seem to have any labels.\", getRoomAreaName(areaid)))\n      return\n    end\n    mmp.echo(string.format(\"Area labels for '%s'\", getRoomAreaName(areaid)))\n    for labelid, labeltext in pairs(t) do\n      fg(\"DimGrey\")\n      echo(string.format(\"  %d) %s (\", labelid, labeltext))\n      fg(\"orange_red\")\n      setUnderline(true)\n      echoLink(\n        'delete',\n        string.format(\n          'deleteMapLabel(%d, %d); mmp.echo(\"Deleted label #' .. labelid .. '\")', areaid, labelid\n        ),\n        \"Delete label #\" .. labelid .. \" from \" .. getRoomAreaName(areaid)\n      )\n      setUnderline(false)\n      echo(\")\\n\")\n    end\n    resetFormat()\n  elseif not areaid and #multiples > 0 then\n    mmp.echo(\"Which area would you like to view exactly?\")\n    fg(\"DimGrey\")\n    for _, areaname in ipairs(multiples) do\n      echo(\"  \");\n      setUnderline(true)\n      echoLink(\n        areaname,\n        'mmp.areaLabels(\"' .. areaname .. '\", true)',\n        \"Click to view labels in \" .. areaname,\n        true\n      )\n      setUnderline(false)\n      echo(\"\\n\")\n    end\n    resetFormat()\n    return\n  else\n    mmp.echo(string.format(\"Don't know of any area named '%s'.\", where))\n    return\n  end\nend\n\nfunction mmp.echoPath(from, to)\n  assert(tonumber(from) and tonumber(to), \"mmp.getPath: both from and to have to be room IDs\")\n  if mmp.getPath(from, to) then\n    mmp.echo(\n      \"<white>Directions from <yellow>\" ..\n      string.upper(searchRoom(from)) ..\n      \" <white>to <yellow>\" ..\n      string.upper(searchRoom(to)) ..\n      \"<white>:\"\n    )\n    mmp.echo(table.concat(speedWalkDir, \", \"))\n    return mmp.speedWalkDir\n  else\n    mmp.echo(\n      \"<white>I can't find a way from <yellow>\" ..\n      string.upper(searchRoom(from)) ..\n      \" <white>to <yellow>\" ..\n      string.upper(searchRoom(to)) ..\n      \"<white>\"\n    )\n  end\nend\n\nfunction mmp.listSpecialExits(filter)\n  local c = 0\n  mmp.echo(\"Listing special exits...\")\n  for area, areaname in pairs(mmp.areatabler) do\n    local rooms = getAreaRooms(area) or {}\n    for i = 0, #rooms do\n      local exits = getSpecialExits(rooms[i] or 0)\n      if exits and next(exits) then\n        for exit, cmd in pairs(exits) do\n          if type(cmd) == \"table\" then\n            cmd = next(cmd)\n          end\n          if cmd:match(\"^%d\") then\n            cmd = cmd:sub(2)\n          end\n          if not filter or cmd:lower():find(filter, 1, true) then\n            if getRoomArea(exit) ~= area then\n              cecho(\n                string.format(\n                  \"<dark_slate_grey>%s <LightSlateGray>(%d, in %s)<dark_slate_grey> <MediumSlateBlue>-> <coral>%s -<MediumSlateBlue>><dark_slate_grey> %s <LightSlateGray>(%d, in %s)\\n\",\n                  getRoomName(rooms[i]),\n                  rooms[i],\n                  areaname,\n                  cmd,\n                  getRoomName(exit),\n                  exit,\n                  mmp.areatabler[getRoomArea(exit)] or '?'\n                )\n              )\n            else\n              cecho(\n                string.format(\n                  \"<dark_slate_grey>%s <LightSlateGray>(%d)<dark_slate_grey> <MediumSlateBlue>-> <coral>%s <MediumSlateBlue>-><dark_slate_grey> %s <LightSlateGray>(%d)<dark_slate_grey> in %s\\n\",\n                  getRoomName(rooms[i]),\n                  rooms[i],\n                  cmd,\n                  getRoomName(exit),\n                  exit,\n                  areaname\n                )\n              )\n            end\n            c = c + 1\n          end\n        end\n      end\n    end\n  end\n  mmp.echo(\n    string.format(\n      \"%d exits listed%s.\", c, (not filter and '' or \", with for the filter '\" .. filter .. \"'\")\n    )\n  )\nend\n\nfunction mmp.delSpecialExits(filter)\n  local c = 0\n  for area, areaname in pairs(mmp.areatabler) do\n    local rooms = getAreaRooms(area) or {}\n    for i = 0, #rooms do\n      local exits = getSpecialExits(rooms[i] or 0)\n      if exits and next(exits) then\n        for exit, cmd in pairs(exits) do\n          if type(cmd) == \"table\" then\n            cmd = next(cmd)\n          end\n          if cmd:match(\"^%d\") then\n            cmd = cmd:sub(2)\n          end\n          if not filter or cmd:lower():find(filter, 1, true) then\n            local rid, action\n            local originalExits = {}\n            local e = getSpecialExits(rooms[i])\n            for t, n in pairs(e) do\n              rid = tonumber(t)\n              for a, l in pairs(n) do\n                action = tostring(a)\n              end\n              if not action:find(filter, 1, true) then\n                originalExits[rid] = action\n              end\n            end\n            clearSpecialExits(rooms[i])\n            for rid, act in pairs(originalExits) do\n              addSpecialExit(rooms[i], tonumber(rid), tostring(act))\n            end\n            c = c + 1\n          end\n        end\n      end\n    end\n  end\n  mmp.echo(\n    string.format(\n      \"%d exits deleted%s.\", c, (not filter and '' or \", with for the filter '\" .. filter .. \"'\")\n    )\n  )\nend",
    "eventHandlerList": null
}