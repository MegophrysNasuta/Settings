{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "mconfig settings functions",
    "packageName": null,
    "script": "function mmp.doLock(what, lock, filter)\n  if what then mmp.echo(string.format(\"%s all %s...\", (lock and \"Locking\" or \"Unlocking\"), what)) end\n  local c = 0\n\n  local getAreaRooms, getSpecialExits, lockSpecialExit, next = getAreaRooms, getSpecialExits, lockSpecialExit, next\n  for _, area in pairs(getAreaTable()) do\n    local rooms = getAreaRooms(area) or {}\n    for i = 0, #rooms do\n      local exits = getSpecialExits(rooms[i] or 0)\n\n       if exits and next(exits) then\n         for exit, cmd in pairs(exits) do\n           if type(cmd) == \"table\" then cmd = next(cmd) end\n\n           if (not filter and not (cmd:lower():find(\"pathfind\", 1, true) or cmd:lower():find(\"worm warp\", 1, true) or cmd:lower():find(\"enter grate\", 1, true))) or (filter and cmd:lower():find(filter, 1, true)) then\n             lockSpecialExit(rooms[i], exit, cmd, lock)\n             c = c + 1\n           end\n         end\n       end\n    end\n  end\n\n  if what then mmp.echo(string.format(\"%s %s known %s.\", (lock and \"Locked\" or \"Unlocked\"), c, what)) end\n  return c\nend\n\nfunction mmp.changeEchoColour()\n    mmp.echo(\"Now displaying echos in <\"..mmp.settings.echocolour..\">\"..mmp.settings.echocolour )\nend\n\nfunction mmp.changeLaglevel()\n    local laglevel = mmp.settings.laglevel\n    local laginfo = mmp.lagtable[laglevel]\n    mmp.echo(string.format(\"Lag level set to [%d]: %s (%ss timer)\", laglevel, laginfo.description, tostring(laginfo.time)))\nend\n\nfunction mmp.verifyLaglevel(value)\n  if mmp.lagtable[value] then return true end\n  return false\nend\n\nfunction mmp.lockPathways()\n  local lock = mmp.settings.lockpathways and true or false\n  mmp.doLock(\"pathways\", lock, \"pathfind\")\nend\n\nfunction mmp.lockSewers()\n  local lock = mmp.settings.locksewers and true or false\n  return mmp.doLock(\"sewer grates\", lock, \"enter grate\")\nend\n\nfunction mmp.lockWormholes()\n  local lock = mmp.settings.lockwormholes and true or false\n  return mmp.doLock(\"wormholes\", lock, \"worm warp\")\nend\ntempTimer(0, function() if mmp.firstRun then mmp.lockWormholes() end end)\n\nfunction mmp.lockPebble()\n  local disabled = (not mmp.settings.pebble) and true or false\n  mmp.doLock(nil, disabled, \"touch 116998\")\n  mmp.doLock(nil, disabled, \"touch 277930\")\n\n  mmp.echo(string.format(\"Use of pebble %s.\", disabled and \"disabled\" or \"enabled\"))\nend\n\nfunction mmp.lockSpecials()\n  local lock = mmp.settings.lockspecials and true or false\n  mmp.doLock(\"special exits\", lock)\nend\n\n\nfunction mmp.changeMapSource()\n  local use = mmp.settings.crowdmap and true or false\n  if use and not (mmp.game == \"achaea\" or mmp.game == \"starmourn\" or mmp.game == \"lusternia\" or mmp.game == \"stickmud\" or mmp.game == \"asteria\" or mmp.game == \"imperian\") then\n    mmp.echo(\"Sorry - the crowdsourced map is only available for use in Achaea, Starmourn, Lusternia, StickMUD and Asteria. If you'd like to help start one for your game, please post at http://forums.mudlet.org/viewtopic.php?f=13&t=1696. If you are playing one of the games, then it is likely that you just downloaded the script - and it doesn't know what you are playing. Reconnect and it'll know.\")\n    mmp.settings.crowdmap = false\n  elseif use and not loadMap then\n   mmp.echo(\"Sorry - your Mudlet is too old and can't load maps. Please update: http://forums.mudlet.org/viewtopic.php?f=5&t=1874\")\n   mmp.settings.crowdmap = false\n  elseif use then\n    mmp.echo(\"Will use the crowdsourced map for updates instead!\")\n    mmp.checkforupdate()\n  else\n    mmp.echo(\"Will use the default game map for updates.\")\n  end\nend\n\nfunction mmp.setWingsLanguage()\n  mmp.echo(\"Alright, will say Duanathar and Duanathar in \"..mmp.settings.winglanguage:title()..\".\")\nend\n\nfunction mmp.setWingsRemoval()\n  mmp.echo(\"Okay - \"..(mmp.settings.removewings and \"will\" or \"won't\")..\" remove wings after using them.\")\nend\n\nfunction mmp.setSlowWalk()\n  if mmp.settings.slowwalk then\n    mmp.echo(\"Will walk 'slowly' - that is, only try to move in a direction once per room, and move again once we've arrived. This will make us better walkers when it's very laggy, as we won't spam directions unnecessarily and miss certain turns - but it does mean that if we fail to move for some reason, we won't retry again either at all.\")\n  else\n    mmp.echo(\"Will walk as quick as we can!\")\n  end\nend\n\nfunction mmp.disableWaterWalk()\n  local c = 0\n  local getRoomEnv, setRoomWeight = getRoomEnv, setRoomWeight\n  for roomid, roomname in pairs(getRooms()) do\n    if mmp.waterenvs[getRoomEnv(roomid)] then\n      setRoomWeight(roomid, 3)\n      c = c + 1\n    end\n  end\n\n  return c\nend\n\nfunction mmp.enableWaterWalk()\n  local c = 0\n  local getRoomEnv, setRoomWeight = getRoomEnv, setRoomWeight\n  for roomid, roomname in pairs(getRooms()) do\n    if mmp.waterenvs[getRoomEnv(roomid)] then\n      setRoomWeight(roomid, 1)\n      c = c + 1\n    end\n  end\n\n  return c\nend\n\nfunction mmp.setWaterWalk()\n  if mmp.settings.waterwalk then\n    mmp.echo(\"Enabled waterwalk for \"..mmp.enableWaterWalk()..\" rooms - so we'll be treating land and water rooms the same now in terms of traverse speed over them.\")\n  else\n    mmp.echo(\"Disabled waterwalk for \"..mmp.disableWaterWalk()..\" rooms - so we'll be preferring land rooms over water ones wherever it's quicker.\")\n  end\nend\n\nfunction mmp.setOrb(city)\n  if mmp.settings[\"orb\"..city:lower()] then\n    mmp.echo(\"<green>Okay, we won't use wings in <white>\" .. city:title()..\"<green>!\")\n  else\n    mmp.echo(\"<green>Okay, we will use wings in <white>\" .. city:title()..\"<green>!\")\n  end\nend\n",
    "eventHandlerList": null
}