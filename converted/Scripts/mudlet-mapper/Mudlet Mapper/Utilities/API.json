{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "API",
    "packageName": null,
    "script": "-------------------------------------------------\n-- This script lists some of the API functions available from the IRE mudlet-mapper\n-- not all functions that are available are included here, however.\n\nfunction mmp.echo(what)\n  what = what or \"\"\n  moveCursorEnd(\"main\") if getCurrentLine() ~= \"\" then echo\"\\n\" end\n  decho(\"<112,229,0>(<73,149,0>mapper<112,229,0>): <255,255,255>\")\n  cecho(tostring(what))\n  echo(\"\\n\")\nend\n\nfunction mmp.echon(what)\n  moveCursorEnd(\"main\") if getCurrentLine() ~= \"\" then echo\"\\n\" end\n  decho(\"<112,229,0>(<73,149,0>mapper<112,229,0>): <255,255,255>\")\n  cecho(tostring(what))\nend\n\nfunction mmp.deleteLineP()\n  deleteLine()\n  tempLineTrigger(1,1,[[\n    if isPrompt() then deleteLine() end\n  ]])\nend\n\nfunction mmp.pause(what)\n  assert(what == nil or what == \"on\" or what == \"off\", \"mmp.pause wants 'on', 'off' or nothing as an argument\")\n\n  if what == \"on\" or (what == nil and not mmp.paused) then\n    mmp.paused = true\n  elseif  what == \"off\" or (what == nil and mmp.paused) then\n    mmp.paused = false\n  end\n\n  mmp.echo(\"Speedwalking \" .. (mmp.paused and \"paused\" or \"unpaused\") .. \".\")\n  if not mmp.paused then mmp.move() end\nend\n\nfunction mmp.mapLook(roomid, delay)\n  centerview(roomid)\n  if mmp.maplooktimer then killTimer(mmp.maplooktimer) end\n  mmp.maplooktimer = tempTimer(tonumber(delay) or 4, [[centerview(mmp.currentroom); mmp.maplooktimer = nil]])\nend\n\nfunction mmp.getnums(roomname, exact)\n  if tonumber(roomname) then return {roomname} end\n\n  local t = (not exact and mmp.searchRoom or mmp.searchRoomExact)(roomname)\n\n  if not t or not next(t) then\n    return nil end\n\n  local result = {}\n\n  if not tonumber(select(2, next(t))) then\n    for roomid,_ in pairs(t) do\n      if roomid ~= 0 then result[#result+1] = tonumber(roomid) end\n    end\n  else\n    for _,roomid in pairs(t) do\n      if roomid ~= 0 then result[#result+1] = tonumber(roomid) end\n    end\n  end\n\n  return result\nend\n\n-- searchRoom with a cache!\nlocal cache = {}\nsetmetatable(cache, {__mode = \"kv\"}) -- weak keys/values = it'll periodically get cleaned up by gc\n\nfunction mmp.searchRoom(what)\n  local result = cache[what]\n  if not result then\n    result = searchRoom(what)\n    local realResult = {}\n    for key, value in pairs(type(result) == \"table\" and result or {}) do\n        -- both ways, because searchRoom can return either id-room name or the reverse\n        if type(key) == \"string\" then\n          realResult[key:ends(\" (road)\") and key:sub(1, -8) or key] = value\n        else\n          realResult[key] = value:ends(\" (road)\") and value:sub(1, -8) or value\n        end\n    end\n    cache[what] = realResult\n    result = realResult\n  end\n  return result\nend\n\nlocal function endswith(s, suffix)\n    return s:sub(#s - #suffix + 1) == suffix\nend\n\nfunction mmp.searchRoomExact(what)\n  if type(what) ~= 'string' then return end\n\n  local roomTable = mmp.searchRoom(what)\n  local realResult = {}\n  what = what:lower()\n  for key, value in pairs (roomTable) do\n    if type(key) == \"string\" and (key:lower() == what or (endswith(key, '.') and key:sub(1, -2) == what)) then\n        realResult[key:ends(\" (road)\") and key:sub(1, -8) or key] = value\n    elseif type(value) == \"string\" and (value:lower() == what or (endswith(value, '.') and value:sub(1, -2) == what)) then\n        realResult[key] = value:ends(\" (road)\") and value:sub(1, -8) or value\n    end\n  end\n  if (table.is_empty(realResult)) then\n    return roomTable\n  else\n    return realResult\n  end\nend\n\nfunction mmp.findAreaID(areaname, exact)\n  local areaname = areaname:lower()\n  local list = getAreaTable()\n\n  -- iterate over the list of areas, matching them with substring match.\n  -- if we get match a single area, then return it's ID, otherwise return\n  -- 'false' and a message that there are than one are matches\n  local returnid, fullareaname, multipleareas = nil, nil, {}\n  for area, id in pairs(list) do\n    if (not exact and area:lower():find(areaname, 1, true)) or (exact and areaname == area:lower()) then\n      returnid = id; fullareaname = area; multipleareas[#multipleareas+1] = area\n    end\n  end\n\n  if #multipleareas == 1 then\n    return returnid, fullareaname\n  else\n    return nil, nil, multipleareas\n  end\nend\n\nfunction mmp.roomexists(num)\n  if not num then return false end\n  if roomExists then return roomExists(num) end\n\n  local s,m = pcall(getRoomArea, tonumber(num))\n  return (s and true or false)\nend\n\nfunction mmp.getcontinents()\n  local tmp = getRoomUserData(1, \"areaContinents\")\n  if tmp == \"\" then return {} end\n\n  return yajl.to_value(tmp)\nend\n\n-- patches welcome to finish this function.\nfunction mmp.removecontinent(area, continent)\n  local continents = mmp.getcontinents()\n\n  if not next(continents) then return nil, \"no continents are known\" end\n  if not continents[continent] then return nil, \"no such continent is recorded\" end\n\n  local index = mmp.indexof_valueonly(continents[continent], area)\n  if not index then return nil, \"this area is not on that continent\" end\n  table.remove(continents[continent], index)\n  local tmp = yajl.to_string(continents)\n  setRoomUserData(1, \"areaContinents\", tmp)\n  return true\nend\n\nfunction mmp.addcontinent(areaid, continent)\n  local continents = mmp.getcontinents()\n\n  if not next(continents) then return nil, \"no continents are known\" end\n  if not continents[continent] then continents[continent] = {} end\n\n  local index = mmp.indexof_valueonly(continents[continent], areaid)\n  if index then return nil, \"this area is already on that continent\" end\n  continents[continent][#continents[continent] + 1] = areaid\n  local tmp = yajl.to_string(continents)\n  setRoomUserData(1, \"areaContinents\", tmp)\n  return true\nend\n\nfunction mmp.indexof_valueonly(data, value)\n  for i = 1, #data do\n    if data[i] == value then return i end\n  end\n\n  return false\nend\n\n-- checks if given area ID is on the given continent. Returns true only if certainly knows\nfunction mmp.oncontinent(areaid, continent)\n  local continents = mmp.getcontinents()\n  if not continents[continent] then return nil, \"no such continent is recorded\" end\n\n  return mmp.indexof_valueonly(continents[continent], areaid)\nend\n\nfunction mmp.getareacontinents(areaid)\n  local areaContinents = {}\n  for continentName, areas in pairs(mmp.getcontinents()) do\n    if mmp.indexof_valueonly(areas, areaid) then\n      areaContinents[#areaContinents + 1] = continentName\n    end\n  end\n  return areaContinents\nend\n\n-- accepts areaname or ID\nfunction mmp.cleanAreaName(area)\n  local areaname = type(area) == \"number\" and mmp.areatabler[area] or area\n  if not areaname then return area end\n\n  -- strip , the\n  areaname = areaname:gsub(\", the$\", '')\n\n  -- strip , the Type of\n  areaname = areaname:gsub(\", the %w+ of$\", '')\n\n  -- strip , the Type of (important)\n  areaname = areaname:gsub(\", the %w+ of %((.+)%)$\", \" (%1)\")\n\n  -- strip , the (important)\n  areaname = areaname:gsub(\", the %((.+)%)$\", \" (%1)\")\n\n  return areaname\nend\n\n-- if this room is in a unique area, report it. Otherwise gives nil\nfunction mmp.getexactarea(roomname)\n  local rooms = mmp.searchRoomExact(roomname)\n\n  if not rooms or not next(rooms) then return nil end\n\n  local areaid\n  for roomid, roomname in pairs(rooms) do\n\n    local caid = getRoomArea(roomid)\n    if areaid and areaid ~= caid then return nil end\n    areaid = caid\n  end\n\n  if areaid then return mmp.areatabler[areaid] end\nend\n\n-- returns the area name of a room or ?\nfunction mmp.getAreaName(roomid)\n   return mmp.areatabler[getRoomArea(roomid)] or '?'\nend\n\n-- removes extra prefixes and suffixes that are not part of the actual room name\nfunction mmp.cleanroomname(roomname)\n  local starts, ends = string.starts, string.ends\n\n  if starts(roomname, \"Flying above \") then\n    roomname = string.sub(roomname, -(#roomname-13))\n  end\n  if starts(roomname, \"In the trees above \") then\n    roomname = string.sub(roomname, -(#roomname-19))\n  end\n  if starts(roomname, \"The ruins of \") then\n    roomname = string.sub(roomname, -(#roomname-13))\n  end\n  if ends(roomname, \".\") then\n    roomname = string.sub(roomname, 1, (#roomname-1))\n  end\n  if ends(roomname, \" (road)\") then\n    roomname = string.sub(roomname, 1, (#roomname-7))\n  end\n  if ends(roomname, \" (indoors)\") then\n    roomname = string.sub(roomname, 1, (#roomname-10))\n  end\n  if ends(roomname, \" (indoor road)\") then\n    roomname = string.sub(roomname, 1, (#roomname-14))\n  end\n\n  return roomname\nend",
    "eventHandlerList": null
}