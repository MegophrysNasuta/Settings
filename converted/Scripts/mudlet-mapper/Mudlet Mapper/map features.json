{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "map features",
    "packageName": null,
    "script": "-------------------------------------------------\n--         Put your Lua functions here.        --\n--                                             --\n-- Note that you can also use external Scripts --\n-------------------------------------------------\n\nlocal function loadMapFeatures()\n  local mapFeaturesString = getMapUserData(\"mapFeatures\")\n  local mapFeatures\n  if mapFeaturesString and mapFeaturesString ~= \"\" then\n    mapFeatures = yajl.to_value(mapFeaturesString)\n  else\n    mapFeatures = {}\n  end\n  return mapFeatures\nend\n\nlocal function saveMapFeatures(mapFeaturesToSave)\n  local mapFeaturesString = yajl.to_string(mapFeaturesToSave)\n  setMapUserData(\"mapFeatures\", mapFeaturesString)\nend\n\nfunction mmp.createMapFeature(featureName, roomCharacter)\n  if not featureName or featureName == \"\" then\n    mmp.echo(\"Can't create an empty map feature.\")\n    return\n  end\n  if featureName:find(\"%d\") then\n    mmp.echo(\"Map feature names must not contain numbers.\")\n    return\n  end\n  roomCharacter = roomCharacter or \"\"\n  if type(roomCharacter) ~= \"string\" then\n    mmp.echo(\n      \"The new room character must be either a string or nil. \" ..\n      type(roomCharacter) ..\n      \" is not allowed.\"\n    )\n    return\n  end\n  local lowerFeatureName = featureName:lower()\n  local mapFeatures = loadMapFeatures()\n  if not mapFeatures[lowerFeatureName] then\n    mapFeatures[lowerFeatureName] = roomCharacter\n    saveMapFeatures(mapFeatures)\n    mmp.echo(\n      \"Created map feature '\" ..\n      featureName ..\n      \"' with the room character '\" ..\n      roomCharacter ..\n      \"'.\"\n    )\n  else\n    mmp.echo(\"A map feature with the name '\" .. featureName .. \"' already exists.\")\n    return\n  end\n  return true\nend\n\nfunction mmp.listMapFeatures()\n  local mapFeatures = loadMapFeatures()\n  mmp.echo(\"This map has the following features:\")\n  echo(string.format(\"    %-25s | %s\\n\", \"feature name\", \"room character\"))\n  echo(string.format(\"    %s\\n\", string.rep(\"-\", 45)))\n  for featureName, roomCharacter in pairs(mapFeatures) do\n    echo(string.format(\"    %-25s | %s\\n\", featureName, roomCharacter))\n  end\n  return true\nend\n\nfunction mmp.roomCreateMapFeature(featureName, roomId)\n  -- checks for the feature name\n  if not featureName then\n    mmp.echo(\"Which feature would you like to create?\")\n    return\n  end\n  local lowerFeatureName = featureName:lower()\n  local mapFeatures = loadMapFeatures()\n  if not mapFeatures[lowerFeatureName] then\n    mmp.echo(\n      \"A feature with name '\" ..\n      featureName ..\n      \"' does not exist. You need to use 'feature create' first.\"\n    )\n    return\n  end\n  -- checks for the room ID\n  if not roomId then\n    if not mmp.currentroom then\n      mmp.echo(\"Don't know where we are at the moment.\")\n      return\n    end\n    roomId = mmp.currentroom\n  else\n    if type(roomId) ~= \"number\" then\n      mmp.echo(\"Need a room ID as number for creating a map feature on a room.\")\n      return\n    end\n  end\n  if not getRoomName(roomId) then\n    mmp.echo(\"Room number '\" .. roomId .. \"' does not exist.\")\n    return\n  end\n  -- check if feature already exists\n  if table.contains(mmp.getRoomMapFeatures(roomId), lowerFeatureName) then\n    mmp.echo(\"Room '\" .. roomId .. \"' has already map feature '\" .. featureName .. \"'.\")\n    return\n  end\n  -- create map feature in room\n  setRoomUserData(roomId, \"feature-\" .. lowerFeatureName, \"true\")\n  mmp.echo(string.format(\"Map feature '%s' created in room number '%d'.\", featureName, roomId))\n  local featureRoomChar = mapFeatures[lowerFeatureName]\n  if featureRoomChar ~= \"\" then\n    setRoomChar(roomId, featureRoomChar)\n    mmp.echo(\"The room now carries the room char '\" .. featureRoomChar .. \"'.\")\n  end\n  return true\nend\n\nfunction mmp.roomDeleteMapFeature(featureName, roomId)\n  -- checks for the feature name\n  if not featureName then\n    mmp.echo(\"Which feature would you like to delete?\")\n    return\n  end\n  local lowerFeatureName = featureName:lower()\n  -- checks for the room ID\n  if not roomId then\n    if not mmp.currentroom then\n      mmp.echo(\"Don't know where we are at the moment.\")\n      return\n    end\n    roomId = mmp.currentroom\n  else\n    if type(roomId) ~= \"number\" then\n      mmp.echo(\"Need a room ID as number for deleting a map feature from a room.\")\n      return\n    end\n  end\n  if not getRoomName(roomId) then\n    mmp.echo(\"Room number '\" .. roomId .. \"' does not exist.\")\n    return\n  end\n  -- check if feature exists\n  local roomMapFeatures = mmp.getRoomMapFeatures(roomId)\n  if not table.contains(roomMapFeatures, lowerFeatureName) then\n    mmp.echo(\"Room '\" .. roomId .. \"' doesn't have map feature '\" .. featureName .. \"'.\")\n    return\n  end\n  -- delete map feature from room\n  setRoomUserData(roomId, \"feature-\" .. lowerFeatureName, \"\")\n  mmp.echo(string.format(\"Map feature '%s' deleted from room number '%d'.\", featureName, roomId))\n  -- now update room char if needed.\n  -- first update current map features of this room\n  roomMapFeatures = mmp.getRoomMapFeatures(roomId)\n  local mapFeatures = loadMapFeatures()\n  -- find out if we need to set a new room character\n  if getRoomChar(roomId) == mapFeatures[lowerFeatureName] and getRoomChar(roomId) ~= \"\" then\n    local index, otherRoomMapFeature\n    -- find another usable room character\n    repeat\n      index, otherRoomMapFeature = next(roomMapFeatures, index)\n    until not otherRoomMapFeature or mapFeatures[otherRoomMapFeature] ~= \"\"\n    if otherRoomMapFeature then\n      -- we found a usable room character, now set it\n      local newRoomChar = mapFeatures[otherRoomMapFeature]\n      setRoomChar(roomId, newRoomChar)\n      mmp.echo(\"Using '\" .. newRoomChar .. \"' as new room character.\")\n    else\n      -- we didn't find a usable room character, delete it.\n      setRoomChar(roomId, \"\")\n      mmp.echo(\"Deleted the current room character.\")\n    end\n  end\n  return true\nend\n\nfunction mmp.getRoomMapFeatures(roomId)\n  -- checks for the room ID\n  if not roomId then\n    if not mmp.currentroom then\n      mmp.echo(\"Don't know where we are at the moment.\")\n      return\n    end\n    roomId = mmp.currentroom\n  else\n    if type(roomId) ~= \"number\" then\n      mmp.echo(\"Need a room ID as number for getting all map features of a room.\")\n      return\n    end\n  end\n  if not getRoomName(roomId) then\n    mmp.echo(\"Room number '\" .. roomId .. \"' does not exist.\")\n    return\n  end\n  local result = {}\n  local mapFeatures = loadMapFeatures()\n  for mapFeature in pairs(mapFeatures) do\n    if getRoomUserData(roomId, \"feature-\" .. mapFeature) == \"true\" then\n      result[#result + 1] = mapFeature\n    end\n  end\n  return result\nend\n\nfunction mmp.deleteMapFeature(featureName)\n  if not featureName or featureName == \"\" then\n    mmp.echo(\"Which map feature would you like to delete?\")\n    return\n  end\n  local lowerFeatureName = featureName:lower()\n  local mapFeatures = loadMapFeatures()\n  if not mapFeatures[lowerFeatureName] then\n    mmp.echo(\"Map feature '\" .. featureName .. \"' does not exist.\")\n    return\n  end\n  local roomsWithFeature = searchRoomUserData(\"feature-\" .. lowerFeatureName, \"true\")\n  for _, roomId in pairs(roomsWithFeature) do\n    local deletionResult = mmp.roomDeleteMapFeature(lowerFeatureName, roomId)\n    if not deletionResult then\n      mmp.echo(\n        \"Something went wrong deleting the map feature '\" ..\n        featureName ..\n        \"' from all rooms. Deletion incomplete.\"\n      )\n      return\n    end\n  end\n  mapFeatures[lowerFeatureName] = nil\n  saveMapFeatures(mapFeatures)\n  mmp.echo(\"Deleted map feature '\" .. featureName .. \"' from map.\")\n  return true\nend\n\nfunction mmp.getMapFeatures()\n  return loadMapFeatures()\nend",
    "eventHandlerList": null
}