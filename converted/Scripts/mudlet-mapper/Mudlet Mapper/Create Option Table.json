{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Create Option Table",
    "packageName": null,
    "script": "-------------------------------------------------\n--         Put your Lua functions here.        --\n--                                             --\n-- Note that you can also use external Scripts --\n-------------------------------------------------\nlocal spairs = spairs or function(tbl, order)\n  local keys = table.keys(tbl)\n  if order then\n    table.sort(keys, function(a,b) return order(tbl, a, b) end)\n  else\n    table.sort(keys)\n  end\n\n  local i = 0\n  return function()\n    i = i + 1\n    if keys[i] then\n      return keys[i], tbl[keys[i]]\n    end\n  end\nend\n\n\nfunction createOption(startingValue, onChangeFunc, allowedVarTypes, use, checkOption, games)\n\tif allowedVarTypes then -- make sure our starting Value follows type rules\n\t\tif not table.contains(allowedVarTypes, type(startingValue)) then\n\t\t\techo(\"Starting type is not of allowed type!\\n\")\n\t\t\tdisplay(allowedVarTypes)\n\t\t\techo(\"type: \" .. type(startingValue) .. \"\\n\")\n\t\t\treturn\n\t\tend\n\tend\n\n\tlocal option = {\n\t\tvalue = startingValue,\n\t\tonChange = onChangeFunc,\n\t\tallowedVarTypes = allowedVarTypes,\n\t\tuse = use or \"\",\n\t\tgames = games,\n\t\tcheckOption = checkOption or function() return true end\n\t}\n\n\treturn option\nend\n\nfunction createOptionsTable(defaultTable)\n\tlocal index = {} -- index to store the default table at in our proxy table\n\n\n\tlocal proxyTable = {} -- This is the table that is returned to the user\n\n\tproxyTable.disp = echo\n\n\tproxyTable.dispDefaultWriteError = function()\n\t\techo(\"Can't overwrite default options. Please use the SetOption function to change the value\\n\")\n\tend\n\n\tproxyTable.dispOption = function(opt, val)\n\t\tif not opt or not val then return end\n\t\techo(\"Name: \" .. string.title(opt) .. string.rep(\" \", 10 - string.len(opt)))\n\t\techo(\"Val: \" .. tostring(val.value))\n\t\techo(string.rep(\" \", 10 - string.len(tostring(val.value))) ..  \"- \" .. val.use .. \"\\n\")\n\tend\n\n\tfunction proxyTable:showAllOptions(game)\n\t\tproxyTable.disp(\"Available options: \\n\")\n\t\tfor k, v in spairs(self[index]) do\n\t\t\tif not game or not v.games or v.games[game] then\n\t\t\t\tself.dispOption(k, v)\n\t\t\tend\n\t\tend\n\t\techo(\"\\n\")\n\t\tfor k, v in spairs(self[\"_customOptions\"]) do\n\t\t\tself.dispOption(k, v)\n\t\tend\n\n\tend\n\n\tfunction proxyTable:getAllOptions()\n\t\tlocal t = {}\n\t\tfor k, v in pairs(self[index]) do\n\t\t\tt[k] = v.value\n\t\tend\n\n\t\treturn t\n\tend\n\n   function proxyTable:setOption(option, value, silent)\n\t\tif self[option] == nil then\n\t\t\tproxyTable.disp(\"No such option!\\n\")\n\t\t\treturn\n\t\tend\n\n\t\t-- otherwise, set the option\n\t\tif self[\"_customOptions\"][option] then\n\t\t\tif not (table.contains(self[\"_customOptions\"][option].allowedVarTypes, type(value)) and self[\"_customOptions\"][option].checkOption(value)) then\n\t\t\t\tproxyTable.disp(\"You can't set '\" .. option .. \"' to that!\\n\")\n\t\t\t\treturn\n\t\t\tend\n\t\t\tself[\"_customOptions\"][option].value = value\n\t\t\tif self[\"_customOptions\"][option].onChange then\n\t\t\t\tself[\"_customOptions\"][option].onChange(option, value)\n\t\t\tend\n\t\telse\n\t\t\tif not (table.contains(self[index][option].allowedVarTypes, type(value)) and self[index][option].checkOption(value)) then\n\t\t\t\tproxyTable.disp(\"You can't set '\" .. option .. \"' to that!\\n\")\n\t\t\t\treturn\n\t\t\tend\n\t\t\trawset(self[index][option], \"value\", value)\n\t\t\tlocal opt = rawget(self[index], option)\n\t\t\tif opt.onChange  and not silent then opt.onChange(option, value) end\n\t\tend\n\t\tif mmp and mmp.clearpathcache then mmp.clearpathcache() end\n\tend\n\n\n\tproxyTable._customOptions = {}\n\n\tlocal mt = {\n\t\t__index = function(t, k)\n\t\t\tlocal custOp = rawget(t, \"_customOptions\")\n\t\t\tif custOp[k] then\n\t\t\t \tlocal opt = custOp[k]\n\t\t\t\tif opt then return opt.value else return nil end\n\t\t\telse\n\t\t\t\tlocal opt = t[index][k]\n\t\t\t\tif opt then return opt.value else return nil end\n\t\t\tend\n\t\tend,\n\n\t\t__newindex = function (t, k, v)\n\t\t\tif t[index][k] then\n\t\t\t\tproxyTable.dispDefaultWriteError()\n\t\t\telse\n\t\t\t\tt[\"_customOptions\"][k] = v\n\t\t\tend\n\t\tend\n\t}\n\n\n\tproxyTable[index] = defaultTable\n\n\tsetmetatable(proxyTable, mt)\n\n\treturn proxyTable\n\nend",
    "eventHandlerList": null
}