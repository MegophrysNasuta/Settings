{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Transverse and pathfind",
    "packageName": null,
    "script": "local planes =\n  {\n    [\"the Prime Material Plane\"] = \"prime\",\n    [\"the Ethereal Plane\"] = \"ethereal\",\n    [\"the Water Elemental Plane\"] = \"elemental\",\n    [\"the Earth Elemental Plane\"] = \"elemental\",\n    [\"the Air Elemental Plane\"] = \"elemental\",\n    [\"the Fire Elemental Plane\"] = \"elemental\",\n    [\"Celestia, Plane of Light\"] = \"cosmic\",\n    [\"the Cosmic Plane of Vortex\"] = \"cosmic\",\n    [\"the Cosmic Plane of Continuum\"] = \"cosmic\",\n    [\"the Tainted Plane of Nil\"] = \"cosmic\",\n    [\"the Astral Plane\"] = \"astral\",\n  }\n\nfunction mmp.transverse(_, command)\n  command = command:lower()\n  if command:sub(0, 11) == \"transverse \" or command == \"pathfind\" then\n    transverseCMD = command\n    transversedFrom = gmcp.Room.Info.num\n    lastPlane = planes[gmcp.Room.Info.details[1]]\n    validTransverse = true\n  end\nend\n\nregisterAnonymousEventHandler(\"sysDataSendRequest\", \"mmp.transverse\")\n\nfunction mmp.registerTransverseExit()\n  if transversedFrom ~= gmcp.Room.Info.num then\n    addSpecialExit(transversedFrom, gmcp.Room.Info.num, transverseCMD)\n    setExitWeight(transversedFrom, transverseCMD, 20)\n    if lastPlane then\n      addSpecialExit(gmcp.Room.Info.num, transversedFrom, \"transverse \" .. lastPlane)\n      setExitWeight(gmcp.Room.Info.num, \"transverse \" .. lastPlane, 20)\n    end\n    validTransverse = false\n  end\nend\n\nfunction mmp.clearTransverse()\n  local otherSide = 0\n  for room, command in pairs(getSpecialExits(gmcp.Room.Info.num)) do\n    if next(command) == transverseCMD then\n      otherSide = room\n    end\n  end\n  for room, command in pairs(getSpecialExits(otherSide) or {}) do\n    if room == gmcp.Room.Info.num and string.sub(next(command), 0, 11) == \"transverse \" then\n      removeSpecialExit(otherSide, next(command))\n    end\n  end\n  removeSpecialExit(gmcp.Room.Info.num, transverseCMD)\n  if mmp.autowalking then\n    mmp.autowalking = false\n    mmp.gotoRoom(string.split(next(mmp.showpathcache()), \"_\")[2])\n  end\nend\n\nfunction mmp.registerPathfind()\n  addSpecialExit(transversedFrom, gmcp.Room.Info.num, \"pathfind\")\n  setExitWeight(transversedFrom, \"pathfind\", 15)\n  addSpecialExit(gmcp.Room.Info.num, transversedFrom, \"pathfind\")\n  setExitWeight(gmcp.Room.Info.num, \"pathfind\", 15)\n  validTransverse = false\nend\n\nfunction mmp.clearPathfind()\n  local otherSide = 0\n  for room, command in pairs(getSpecialExits(gmcp.Room.Info.num)) do\n    if next(command) == \"pathfind\" then\n      otherSide = room\n    end\n  end\n  for room, command in pairs(getSpecialExits(otherSide) or {}) do\n    if room == gmcp.Room.Info.num and next(command) == \"pathfind\" then\n      removeSpecialExit(otherSide, next(command))\n    end\n  end\n  removeSpecialExit(gmcp.Room.Info.num, \"pathfind\")\n  if mmp.autowalking then\n    mmp.autowalking = false\n    mmp.gotoRoom(string.split(next(mmp.showpathcache()), \"_\")[2])\n  end\nend\n\nfunction mmp.lockpaths(lock)\n  local count = 0\n  for area, areaname in pairs(mmp.areatabler) do\n    local rooms = getAreaRooms(area) or {}\n    for i = 0, #rooms do\n      local exits = getSpecialExits(rooms[i] or 0)\n      for room, command in pairs(exits or {}) do\n        if next(command) == \"pathfind\" then\n          count = count + 1\n          lockSpecialExit(rooms[i], room, \"pathfind\", lock)\n        end\n      end\n    end\n  end\n  mmp.echo((lock and \"Locked \" or \"Unlocked \") .. count .. \" pathfinding exits.\")\nend",
    "eventHandlerList": null
}