{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Profile Management",
    "packageName": null,
    "script": "function wsys.newProfile( name )\n if not table.contains(wsys.settings.profilenames, name) then\n  -- add name to available profiles\n  wsys.settings.profilenames[#wsys.settings.profilenames+1] = name\n  -- create new profile\n  wsys.settings.affprio[name] = {}\n  wsys.settings.affprio[name][wsys.myClass()] = wsys.return_defaultaffprios()\n  wsys.settings.defup[name] = {}\n  wsys.settings.defup[name][wsys.myClass()] = {}\n  wsys.settings.defprio[name] = {}\n  wsys.settings.defprio[name][wsys.myClass()] = {}\n  wsys.settings.keepup[name] = {}\n  wsys.settings.keepup[name][wsys.myClass()] = {}\n  wsys.settings.precache[name] = {}\n  wsys.settings.focusshifts[name] = {}\n  wsys.settings.focusshifts[name][wsys.myClass()] = {}\n  \n  wsys.report(\"Created new profile named: \" .. name)\n end\nend\n\nfunction wsys.copyProfile( pOrig, pCopy )\n  if table.contains(wsys.settings.profilenames, pOrig) and table.contains(wsys.settings.profilenames, pCopy) then\n    wsys.settings.affprio[pCopy] = wsys.deepcopy(wsys.settings.affprio[pOrig])\n    wsys.settings.defup[pCopy] = wsys.deepcopy(wsys.settings.defup[pOrig])\n    wsys.settings.defprio[pCopy] = wsys.deepcopy(wsys.settings.defprio[pOrig])\n    wsys.settings.keepup[pCopy] = wsys.deepcopy(wsys.settings.keepup[pOrig])\n    wsys.settings.precache[pCopy] = wsys.deepcopy(wsys.settings.precache[pOrig])\n    wsys.settings.focusshifts[pCopy] = wsys.deepcopy(wsys.settings.focusshifts[pOrig])\n    wsys.report(\"Copied \" .. pOrig .. \" settings into the \" .. pCopy .. \" profile.\")\n  elseif not table.contains(wsys.settings.profilenames, pOrig) then\n    wsys.report(pOrig .. \" profile does not exist, please create it first.\")\n  elseif not table.contains(wsys.settings.profilenames, pCopy) then\n    wsys.report(pCopy .. \" profile does not exist, please create it first.\")\n  end\nend\n\nfunction wsys.copyProfileClass( copied_class )\n  if wsys.settings.affprio[wsys.profile][copied_class] == nil then\n    wsys.report(copied_class .. \" class profile does not exist, please create it first.\")\n  else\n    if wsys.settings.affprio[wsys.profile][wsys.myClass()] == nil then\n      wsys.newclasstables(wsys.myClass())\n    end\n    wsys.settings.affprio[wsys.profile][wsys.myClass()] = wsys.deepcopy(wsys.settings.affprio[wsys.profile][copied_class])\n    wsys.settings.defup[wsys.profile][wsys.myClass()] = wsys.deepcopy(wsys.settings.defup[wsys.profile][copied_class])\n    wsys.settings.defprio[wsys.profile][wsys.myClass()] = wsys.deepcopy(wsys.settings.defprio[wsys.profile][copied_class])\n    wsys.settings.keepup[wsys.profile][wsys.myClass()] = wsys.deepcopy(wsys.settings.keepup[wsys.profile][copied_class])\n    wsys.settings.precache[wsys.profile][wsys.myClass()] = wsys.deepcopy(wsys.settings.precache[wsys.profile][copied_class])\n    wsys.settings.focusshifts[wsys.profile][wsys.myClass()] = wsys.deepcopy(wsys.settings.focusshifts[wsys.profile][copied_class])\n\n    --Loop through defup, defprio, keepup and remove any class specific defences\n    for k in pairs( wsys.tb.defenceTable ) do\n      if not ( wsys.classDefCheck(k, \"free\") or wsys.classDefCheck(k, wsys.myClass()) ) then\n         wsys.settings.defup[wsys.profile][wsys.myClass()][k] = nil\n         wsys.settings.defprio[wsys.profile][wsys.myClass()][k] = nil\n         wsys.settings.keepup[wsys.profile][wsys.myClass()][k] = nil\n      end\n    end\n    \n    wsys.report(\"Copied \" .. copied_class .. \" \" ..wsys.profile .. \" settings into the \" .. wsys.myClass() .. \" \"..wsys.profile .. \" profile.\")\n  end\nend\n\nfunction wsys.switchProfile( name )\n  local oldProfile = wsys.profile\n  if table.contains(wsys.settings.profilenames, name) then\n    wsys.profile = name\n    wsys.report(\"Switched to \" .. name .. \" profile.\")\n    -- make sure we have all the right tables already\n    if wsys.settings.affprio[wsys.profile][wsys.myClass()] == nil then\n      wsys.newclasstables(wsys.myClass())\n    end\n    -- reset the aff prios\n    wsys.resetAllAffPrios()\n    -- keep up defs, need to take off the ones I don't want and add those I do want now.\n    for k in pairs(wsys.settings.keepup[oldProfile][wsys.myClass()]) do\n      if not table.contains(wsys.settings.keepup[name][wsys.myClass()], k) then\n        send(\"curing priority defence \" .. k .. \" reset\", false)\n      end\n    end\n    for k in pairs(wsys.settings.keepup[name][wsys.myClass()]) do\n      wsys.enableSSDef( k, wsys.settings.defprio[name][wsys.myClass()][k] )\n    end\n    -- make sure all the herbs that are needed are precached\n    wsys.outrqueue()\n  else\n    wsys.report(name .. \" profile does not exist.\")\n  end\nend\n\nfunction wsys.deleteProfile( name )\n  if name == \"basic\" then\n    wsys.report(\"Not allowed to delete basic profile!\")\n  elseif wsys.profile == name then\n    wsys.report(name .. \" is your current profile. Switch to another before deleting it!\")\n  elseif table.contains(wsys.settings.profilenames, name) then\n    -- remove name from list of profiles\n    table.remove(wsys.settings.profilenames, table.index_of(wsys.settings.profilenames, name))\n    wsys.settings.affprio[name] = nil\n    wsys.settings.defup[name] = nil\n    wsys.settings.defprio[name] = nil\n    wsys.settings.keepup[name] = nil\n    wsys.settings.precache[name] = nil\n    wsys.settings.focusshifts[name] = nil\n    wsys.report(\"Deleted the \" .. name .. \" profile.\")\n  end\nend\n\nlocal find_differences = function(a, b)\n\tlocal diff = {}\n\tfor k,v in pairs(a) do\n\t\tif v ~= b[k] then\n\t\t\tdiff[k] = { v, b[k] }\n\t\tend\n\tend\n\tfor k,v in pairs(b) do\n\t\tif not diff[k] and not a[k] then\n\t\t\tdiff[k] = { false, v }\n\t\tend\n\tend\n\t\n\treturn diff\nend\n\nfunction wsys.resetProfileAffs( class, profile, confirm )\n\tif not profile or not class then\n\t\treturn -- Invalid commands. Expects a profile and class\n\tend\n\tprofile = profile:lower()\n\tclass = class:lower()\n\t\n\tif class == \"all\" then\n\t\t-- This is the reset all option\n\t\treturn\n\tend\n\n\tlocal prios = wsys.settings.affprio[profile] and wsys.settings.affprio[profile][class]\n\t\n\tif not prios then\n\t\twsys.report(\"Invalid profile combination: '\"..profile..\"', \"..class )\n\t\treturn\n\tend\n\t\t\n\twsys.report(\"Resetting aff prios for '\"..profile..\"', \"..class )\n\tlocal diffs = find_differences( prios, wsys.return_defaultaffprios() )\n\n\t-- Update this class/mode prio set to default\n\tif confirm then\n\t\twsys.settings.affprio[profile][class] = wsys.return_defaultaffprios()\n\tend\n\t\n\t-- Display any changes that occurred\n\tfor aff,changes in pairs(diffs) do\n\t\tlocal display_str = string.format(\"<white>[<grey>%s<white>][<grey>%s<white>]: %-10s <yellow>%-3s<white>-><green>%3s\",\n\t\t\t\t\t\t\t\t\t\t\t\tprofile, class, aff, (changes[1] or \"nil\"), (changes[2] or \"nil\") )\n\t\t\n\t\t\n\t\tif changes[1] then\n\t\t\t-- If there was an old value, allow reverting\n\t\t\tlocal command = string.format([[wsys.affprioset(\"%s\", \"%s\", \"%s\", \"%s\" )]], aff, changes[1], profile, class )\n\t\t\twsys.report(\"\")\n\t\t\tcechoLink( display_str, command, \"Revert \"..aff..\" priority change to \" ..changes[1], true)\n\t\telse\n\t\t\t-- No previous value, this is a new affliction priority\n\t\t\twsys.report( display_str )\n\t\tend\t\t\n\tend\n\t\n\tif wsys.profile == profile and wsys.myClass() == class then\n\t\twsys.resetAffPrios()\n\tend\nend\n\nfunction wsys.resetAllProfileAffs( confirm )\n\tconfirm = confirm and confirm == \" confirm\" or false\n\t\n\tif not confirm then\n\t\twsys.report(\"(Dry run only): No changes will be made\")\n\tend\n\tfor profile,v in pairs(wsys.settings.affprio) do\n\t\tfor class,prios in pairs(v) do\n\t\t\twsys.resetProfileAffs( class, profile, confirm )\n\t\tend\n\tend\n\tif not confirm then\n\t\twsys.report(\"(Dry run only): Use '<light_grey>wconfig profile resetaff all confirm<white>' to confirm changes.\") \n\tend\nend\n\nfunction wsys.profileSwitchOnDeath()\n  if wsys.profile ~= wsys.settings.profileondeath then\n    wsys.switchProfile( wsys.settings.profileondeath )\n  end\nend\n\nregisterAnonymousEventHandler(\"You Died\", \"wsys.profileSwitchOnDeath\")\n\n\nfunction wsys.profileSwitchOnBurst()\n  if wsys.profile ~= wsys.settings.profileonburst then\n    wsys.switchProfile( wsys.settings.profileonburst )\n  end\nend\n\nregisterAnonymousEventHandler(\"You Starbursted\", \"wsys.profileSwitchOnBurst\")",
    "eventHandlerList": null
}