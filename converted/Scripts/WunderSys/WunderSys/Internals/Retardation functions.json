{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Retardation functions",
    "packageName": null,
    "script": "function wsys.retardationOn()\n if not wsys.retard then\n  wsys.retard = true\n  wsys.waittime = 1 + wsys.myPing()*3\n  wsys.slowedsipping()\n  wsys.report(\"<red>RETARDATION curing enabled\")\n  wsys.retardationDownCheck()\n end\nend\n\nfunction wsys.retardationOff()\n wsys.aff.aeon = nil\n wsys.retard = false\n wsys.normalsipping()\n send(\"curing batch on\", false)\n wsys.waittime = wsys.myPing()*2\n vibeSpinner = nil\n wsys.report(\"<red>RETARDATION curing disabled\")\nend\n\nfunction wsys.slowedsipping()\n  send(\"curing siphealth \" .. wsys.settings.aeonsiphealth, false)\n  send(\"curing sipmana \" .. wsys.settings.aeonsipmana, false)\n  send(\"curing mosshealth 0\", false)\n  send(\"curing mossmana 0\", false)\nend\n\nfunction wsys.normalsipping()\n  send(\"curing siphealth \" .. wsys.settings.siphealth, false)\n  send(\"curing sipmana \" .. wsys.settings.sipmana, false)\n  if wsys.settings.usemoss then wsys.mossThreshholdDown() end\nend\n\nfunction wsys.retardationDownCheck()\n  if wsys.timer.retardDropDetectionTimer then killTimer(wsys.timer.retardDropDetectionTimer) end\n  wsys.timer.retardDropDetectionTimer = tempTimer(5, [[wsys.timer.retardDropDetectionTimer = nil;if wsys.retard then wsys.retardationOff() end]])\nend\n\nfunction wsys.serversideRetardationDetection(cure)\n  if not wsys.aff.aeon and not wsys.aff.blackout then\n    wsys.retardationOn()\n  end\nend",
    "eventHandlerList": null
}