{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Prompt Sub",
    "packageName": null,
    "script": "function wsys.promptColorSub(tag)\n  for k,v in pairs(wsys.prompttagcolors) do\n    if table.contains(wsys.prompttagcolors, tag) then\n      if type(wsys.prompttagcolors[tag]) == \"function\" then\n        return \"<\"..wsys.prompttagcolors[tag]()..\">\"\n      elseif type(wsys.prompttagcolors[tag]) == \"string\" then\n        return \"<\"..wsys.prompttagcolors[tag]..\">\"\n      end --if\n    else\n      --color not in table, hope you used a valid mudlet color\n      return \"<\"..tag..\">\"\n    end --if\n  end --for\nend\n  \nfunction wsys.promptTagSub(tag)\n  local theTag = false\n  local tailEnd = false\n    for k,v in pairs(wsys.prompttags) do\n      if string.starts(tag, k) then\n        theTag = k\n        --save the bit after the prompt tag\n        tailEnd = string.gsub(tag, theTag, \"\")\n      end\n    end\n  local th = wsys.prompttags[theTag]\n  if type(th) == \"function\" then\n    return _G[\"wsys\"][\"prompttags\"][theTag]() .. tailEnd\n  elseif type(th) == \"string\" then\n    return _G[\"wsys\"][\"prompttags\"][theTag] .. tailEnd\n  end\nend\n\nfunction wsys.displayPromptString(str)\n  --Split based on color tags, so we don't change the background for everything\n  local last_color = nil\n  local display_text = \"\"\n  for color,text in string.gmatch( \"<white>\"..str, \"<([A-Za-z_:]+)>([^<]*)\" ) do\n    if not string.match( color, \"[A-Za-z_]+:[A-Za-z_]+\" ) and not color_table[color] then\n      -- Not a valid color, add it to the text and continue\n      display_text = display_text .. \"<\"..color..\">\"..text\n    else\n      if not last_color then last_color = color end\n\n      if not string.find( color, \":\" ) and not string.find( last_color, \":\" ) then\n        display_text = \"<\"..last_color..\">\"..display_text\n      end\n      display_text = display_text..\"<\"..color..\">\"..text\n      cecho(display_text)\n      display_text = \"\"\n      last_color = color\n    end\n  end\nend\n\nfunction wsys.displayLen( str )\n\treturn str:gsub(\"<[a-zA-Z_:]+>\", \"\"):len()\nend\n\nfunction wsys.promptsub()\n  selectCurrentLine(); replace(\"\");\n\n  local promptstring = wsys.aff.blackout and wsys.settings.blackoutprompt or wsys.settings.prompt\n  --sub out the # color tags\n  promptstring = string.gsub(promptstring, \"#([A-Za-z_:]+)\", wsys.promptColorSub )\n  --sub out the @ prompt tags\n  promptstring = string.gsub(promptstring, \"@(%w+)\", wsys.promptTagSub )\n\n  if wsys.def.lyre then promptstring = promptstring .. \"<gold> L\" end\n  if wsys.vmode then promptstring = promptstring ..  \"<MediumVioletRed> vivi\" end\n  if wsys.heartseedmode then promptstring = promptstring ..  \"<firebrick> H<LimeGreen>Seed\" end\n  if wsys.bardmode then promptstring = promptstring .. \"<firebrick> BARD\" end\n\n  wsys.displayPromptString( promptstring )\n\n  local promptline2 = wsys.settings.promptline2\n  if promptline2 and type(promptline2) == \"string\" then\n    promptline2 = string.gsub(promptline2, \"#([A-Za-z_:]+)\", wsys.promptColorSub )\n    promptline2 = string.gsub(promptline2, \"@(%w+)\", wsys.promptTagSub )\n    if wsys.displayLen( promptline2 ) > 0 then\n      wsys.displayPromptString(\"\\n\"..promptline2)\n    end\n  end\n\n  previousPromptLineNumber = currentPromptLineNumber\n  previousPromptLineNumberLength = currentPromptLineNumberLength\n  currentPromptLineNumber = getLineNumber()\n  currentPromptLineNumberLength = #(string.gsub(promptstring, \"<.->\", \"\"))\n  wsys.salviaSendEcho()\n\nend\n\n\n\n\n\n\n\n\n",
    "eventHandlerList": null
}