{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "System Functions",
    "packageName": null,
    "script": "-- OSEND\nfunction wsys.osend(...)\n if not wsys.paused and not wsys.softpaused and not wsys.aff.aeon and (not wsys.uselyre or (not wsys.def.lyre and not wsys.timer.lyrewait)) then\n  wsys.salviaSend(...)\n end -- if\nend -- func\n\n-- PSEND\nfunction wsys.psend(...)\n if not wsys.paused and not wsys.softpaused and not wsys.aff.aeon then\n  send(\"pt \" .. ...)\n end -- if\nend -- func\n\n-- CAN CURE\nfunction wsys.cancure()\n if not wsys.paused and not wsys.softpaused and not wsys.aff.aeon and not wsys.retard and (not wsys.uselyre or (not wsys.def.lyre and not wsys.timer.lyrewait)) and not wsys.aff.sleeping then\n  return true\n else\n  return false\n end -- if\nend -- func\n\n--is slowed\nfunction wsys.isslowed()\n  if wsys.aff.aeon and wsys.retard then return true else return false end\nend --func\n\n\nfunction wsys.damagedarms()\n if (wsys.aff.brokenleftarm or wsys.aff.damagedleftarm or wsys.aff.mangledleftarm) and (wsys.aff.brokenrightarm or wsys.aff.damagedrightarm or wsys.aff.mangledrightarm) then\n  return true\n else\n  return false\n end -- if\nend -- func\n\n\nfunction wsys.damagedlegs()\n if wsys.aff.brokenleftleg or wsys.aff.damagedleftleg or wsys.aff.mangledleftleg or wsys.aff.brokenrightleg or wsys.aff.damagedrightleg or wsys.aff.mangledrightleg then\n  return true\n else\n  return false\n end -- if\nend -- func \n\nfunction wsys.bothdamagedlegs()\nif (wsys.aff.brokenleftleg or wsys.aff.damagedleftleg or wsys.aff.mangledleftleg) and (wsys.aff.brokenrightleg or wsys.aff.damagedrightleg or wsys.aff.mangledrightleg) then\n return true\nelse\n return false\nend -- if\nend -- func\n\n--am I hindered\nfunction wsys.isHindered()\n  return (wsys.damagedarms() or wsys.tanglecheck() or wsys.impaled() or wsys.aff.paralysis or wsys.aff.prone or false)\nend\n\n\n-- returns number of affs you have for a certain cure\n-- useful to find out if you're kelp stacked etc\nfunction wsys.affamount(cure)\n  local c = 0\n  for k,v in pairs(wsys.tb.cures[cure]) do\n\t  c = c + wsysf.affv[v]\n  end\n  return c\nend\n\n\n-- DELETE FULL\n-- overwrites default function, does NOT belong in wsys namespace\nfunction deleteFull()\n if wsys.deletefull_id then killTrigger( wsys.deletefull_id ) end\n wsys.deletefull_id = tempLineTrigger(1,1,[[if not isPrompt() then \n  wsys.deletefull = false\n  wsys.deletefull_id = nil\n end]])\n deleteLine()\n wsys.deletefull = true\nend -- func\n\n-- OUTRIFT CHECK\nfunction wsys.outriftcheck()\n if not wsys.tanglecheck() and not wsys.damagedarms() then\n  return true\n else\n  return false\n end -- if\nend -- func\n\n\n-- TANGLE CHECK\nfunction wsys.tanglecheck()\n if wsys.impaled() or wsys.aff.webbed or wsys.aff.entangled or wsys.aff.bound or wsys.aff.transfixation then\n  return true\n else\n  return false\n end -- if\nend -- func\n\n\nfunction wsys.impaled()\n if wsys.aff.impaled or wsys.aff.daeggerimpale or wsys.aff.speared then\n  return true\n else\n  return false\n end -- if\nend -- func\n\n\nfunction wsys.cleartimers()\n local timers = {}\n for k,v in pairs(wsys.timer) do\n  if string.match(k, \"wait\") then\n   killTimer(tostring(v))\n   timers[#timers+1] = k\n  end -- if\n end -- for\n if next(timers) then\n  for k in pairs(wsys.timer) do\n   wsys.timer[k] = nil\n  end -- for\n end -- if\nend -- func",
    "eventHandlerList": null
}