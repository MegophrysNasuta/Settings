{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Overrides",
    "packageName": null,
    "script": "wsys.overrides = wsys.overrides or {}\n\n-------------------------------------------------\n--              Aff Tag Overrides              --\n-------------------------------------------------\nwsys.overrides.afftags = wsys.overrides.afftags or {}\n\n--- Aff prompt tag shortnames may be used to override the string displayed in the @affs prompt tag\n-- Example: \n--   wsys.overrides.afftags.shortnames.paralysis = \"PARALYZED!!\"\n-- So instead of the default \"PAR\" you see in your prompt when paralyzed, you'd see \"PARALYZED!!\"\n-- Important: Don't use < or > here. It won't appear correctly because things may be interpretted as colors\nwsys.overrides.afftags.shortnames = wsys.overrides.afftags.shortnames or {}\n\n--- Aff prompt tag colors may be used to override the default colors used for a given affliction\n-- Example 1:\n--   wsys.overrides.afftags.colors.paralysis = \"blue\"\n-- Example 2:\n--   wsys.overrides.afftags.colors.prone = \"white:red\"\n--   This would make prone appear as white text on a red background\n--\n-- You may also provide a table with values for stackable affs\n-- Example 3:\n--   wsys.overrides.afftags.colors.bleeding = { \"maroon\", [200] = \"red\", [500] = \"white\" },\n--   This would show bleeding as maroon from 1-199, red at 200-499, and white at 500+\nwsys.overrides.afftags.colors = wsys.overrides.afftags.colors or {}\n\n--- Aff prompt tags may also override the default cure colors\n-- Note: Cure colors are only used if an aff specific color is not already configured, default or otherwise\n-- Also note: the cure specified here may be a prefix to multiple cure types. \n--   E.g. \"mending\" will match \"mendinglegs\", \"mendingarms\", etc.\n--   Core possible cure types, please see wsys.tb.affc\n-- The colors provided may either be a simple color, or a table of colors based on stack value, as above.\n-- Example 1:\n--   wsys.overrides.afftags.cure_colors.kelp = \"white\"\n-- \n-- Example 2:\n--   wsys.overrides.afftags.cure_colors.health = { \"green\", [3] = \"blue\", [6] = \"blue:white\" }\n--   This would display fractures (cured by \"healthlegs\", \"healtharms\", etc) as green from 1-2 stacks, \n--   blue at 3-5, and blue with a white background at 6+\nwsys.overrides.afftags.cure_colors = wsys.overrides.afftags.cure_colors or {}\n\n-------------------------------------------------\n--            Do Queue Expansions              --\n-------------------------------------------------\nwsys.overrides.doqueue = wsys.overrides.doqueue or {}\n\n--- Doqueue variable function expansion support\n-- Each entry you add to this table will be called when prefixed with $\n-- The key should be a string, and the value should be a function that returns a string.\n-- The input command will be expanded once when you queue the command, and again if wsys.doupdate() is called.\n--\n--[[ Examples:\nwsys.overrides.doqueue.expand.target = function() return my_target end\nwsys.overrides.doqueue.expand.atk = function()\n  if has_rebounding or has_shield then \n    return \"raze\"\n  else\n    return \"jab\"\n  end\nend\n-- You may then call: wsys.dofirst(\"$atk $target\")\n-- If \"Tynil\" is my_target, then this would expand to \"raze Tynil\" if has_rebounding or has_shield is true.\n-- Else, it expands to \"jab Tynil\"\n-- Calling wsys.doupdate() when those has_rebounding/shield variables change would cause this to re-evaluate\n-- and potentially change which attack is queued.\n-- You don't need to use all expansions. wsys.doadd(\"kick $target\") would expand to \"kick Tynil\" here.\n]]\nwsys.overrides.doqueue.expand = wsys.overrides.doqueue.expand or {}",
    "eventHandlerList": null
}