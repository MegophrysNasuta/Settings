{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Affliction Functions",
    "packageName": null,
    "script": "wsys.predicted = {}\n\n---------------------------------------------------\n-- Translation layer to map wsysf.affs to wsys.aff\n---------------------------------------------------\n\n-- Note, this meta table allows you to access the values\n-- From wsysf.affs, but it does not automatically map pairs()\n-- or next(). Both of these will always be empty\nwsys.aff = setmetatable({}, {\n\t__index = function(table, key)\n\t\treturn wsysf.affs[key] or wsys.predicted[aff]\n\tend,\n\t__newindex = function(table, key, value)\n\t\techo(\"!Don't set wsys.aff.\"..key..\" = \"..tostring(value))\n\tend\n})\n\nlocal wsysf_aff_event_handler = function( event, affliction )\n\n\tif wsys.predicted[ affliction ] then wsys.predicted[ affliction ] = nil end\n\t\n\twsys.checkaffs_next_prompt()\n\t\n\tif event == \"wsysf got aff\" then\n\t\traiseEvent( \"got aff\", affliction )\n\telseif event == \"wsysf lost aff\" then\n\t\traiseEvent( \"lost aff\", affliction )\n\tend\nend\n\nif wsys.events.aff_add then killAnonymousEventHandler( wsys.events.aff_add ) end\nif wsys.events.aff_remove then killAnonymousEventHandler( wsys.events.aff_remove ) end\nif wsys.events.aff_list then killAnonymousEventHandler( wsys.events.aff_list ) end\n\nwsys.events.aff_add = registerAnonymousEventHandler(\"wsysf got aff\", wsysf_aff_event_handler)\nwsys.events.aff_remove = registerAnonymousEventHandler(\"wsysf lost aff\", wsysf_aff_event_handler)\nwsys.events.aff_list = registerAnonymousEventHandler(\"gmcp.Char.Afflictions.List\", function() wsys.predicted = {} end)\n\nfunction wsys.affpredict(aff, value)\n  if value == nil then value = true end\n\t\n\tif not wsysf.affs[aff] and wsys.predicted[aff] ~= value then\n\t\tif value then\n\t\t\tsend(\"curing predict \"..aff) -- ,false)\n\t\telse\n\t\t\tsend(\"curing unpredict \"..aff) -- ,false)\n  \t\tend\n  \t\twsys.predicted[aff] = value\n\tend\nend\n\t\n---------------------------------------------------\n-- Old Aff tracking functions. Some of these may\n-- functions may no longer be needed\n---------------------------------------------------\n\t\n-- Deprecated in favour of pure GMCP aff tracking\n-- This is only used for class tracking and the aff print lines now\nfunction wsys.affadd(affliction, class, time, from_gmcp)\n  if not wsys.lifevision then\n    local gained = wsys.affs_gained[affliction]\n    if not from_gmcp and wsys.affline ~= getLineNumber() then\n      wsys.affprint(affliction)\n    end -- if\n\n    if class then wsys.newClassTimer( class ) end\n\n    if not from_gmcp then\n      wsys.affline = getLineNumber()\n    end\n  end -- if\nend -- func\n\n\nfunction wsys.affcured(affliction)\n if not wsys.lifevision then\n  if wsys.aff.blackout then\n   wsys.affcheckblackout(affliction)\n   do return end\n  end -- if\n  if (wsys.cure and table.contains(wsys.tb.affc[affliction], wsys.cure)) or (wsys.applying and table.contains(wsys.tb.affc[affliction], wsys.applying)) or wsys.cure == \"tree\" or wsys.cure == \"dheal\" or wsys.cure == \"fool\" or affliction == \"aeon\"  or affliction == \"inquisition\" or affliction == \"crone\" or wsys.cure == \"corrupt\" or affliction == \"sleeping\" or wsys.cure == \"passive\" or wsys.cure == \"shrugging\" then\n   wsys.affcuredconfirm(affliction)\n   if wsys.targettedCure(wsys.cure) then\n     --wsys.curedAICheck(affliction)\n   end\n  end -- if \n end -- if\n --wsys.checkaffs()\nend -- func\n\n\nfunction wsys.affcuredconfirm(affliction, from_gmcp)\n  if affliction == \"aeon\" then\n    wsys.def.speed = false\n  end -- if\n\n  if not from_gmcp then\n    disableTrigger(string.title(affliction) .. \" -\")\n    wsys.affcureprint(affliction)\n  end\n\n  wsys.checkaffs(affliction)\n\n  if wsys.timer[affliction..\"decay\"] then \n    killTimer(wsys.timer[affliction..\"decay\"])\n    wsys.timer[affliction..\"decay\"] = nil\n  end\nend -- func\n\n\nfunction wsys.affcheckblackout(affliction)\n for k,v in ipairs(wsys.tb.affc[affliction]) do\n  if wsys.eating == v then\n   wsys.ate(wsys.eating)\n   wsys.affcuredconfirm(affliction)\n   do return end\n  end -- if\n  if wsys.applying == v then\n   wsys.affcuredconfirm(affliction)\n   do return end\n  end -- if\n  if wsys.pipes.smoking == v then\n   wsys.smoked(wsys.pipes.smoking)\n   wsys.affcuredconfirm(affliction)\n   do return end\n  end -- if\n  if v == \"focus\" and wsys.timer.focuswait then\n   wsys.focused()\n   wsys.affcuredconfirm(affliction)\n   do return end\n  end -- if\n  if v == \"restore\" and wsys.timer.restorewait then\n   wsys.restored()\n   wsys.affcuredconfirm(affliction)\n   do return end\n  end -- if\n  if v == \"immunity\" and wsys.timer.immunitywait then\n   immunityd()\n   wsys.affcuredconfirm(\"voyria\")\n   do return end\n  end -- if\n  if v == \"stand\" and wsys.cure == \"stand\" then\n   wsys.affcuredconfirm(\"prone\")\n   do return end\n  end -- if\n  if v == \"fitness\" and wsys.timer.fitnesswait then\n   wsys.fitnessd()\n   wsys.affcuredconfirm(\"asthma\")\n   do return end\n  end -- if\n  if wsys.timer.dhealwait then\n   wsys.dhealed()\n   wsys.affcuredconfirm(affliction)\n   do return end\n  end -- if\n  if wsys.timer.foolwait then\n   fooled()\n   wsys.affcuredconfirm(affliction)\n   do return end\n  end -- if\n end -- for\n if affliction == \"aeon\" then\n  wsys.affcuredconfirm(\"aeon\")\n end -- if\nend -- func\n\n\nlocal affs_next_prompt_id = nil\nfunction wsys.checkaffs_next_prompt()\n\tif not affs_next_prompt_id then\n\t\taffs_next_prompt_id = tempPromptTrigger( function()\n\t\t\taffs_next_prompt_id = nil\n\t\t\twsys.checkaffs()\n\t\tend, 1)\n\tend\nend\n\nfunction wsys.checkaffs()\n wsys.lockqueue()\nend -- func\n    \n\nfunction wsys.firequeues()\n if wsys.lifevision then\n  wsys.tb.affstogether = {}\n  if not wsys.self_illusion then cecho(\"<pink>ILLUSION BITCH!\") end\n  do return end\n end -- if\n \n if wsys.aff.aeon then\n  if wsys.retard then\n   --retardqueue()\n  else\n   --aeonqueue()\n  end -- if\n  do return end\n end -- if\n\n wsys.ragequeue()\n wsys.lockqueue()\nend -- func\n\n\nfunction wsys.pairscheck(cure) -- What is this for?\n wsys.checkaffs()\nend -- func\n\n\nfunction wsys.unstunned()\n wsys.cleartimers()\n wsys.checkaffs()\n wsys.canaction()\nend -- func\n\nif wsys.events.blackoutloss then killAnonymousEventHandler( wsys.events.blackoutloss ) end\nwsys.events.blackoutloss = registerAnonymousEventHandler( \"lost aff\", \"wsys.blackoutloss\" )\n\nfunction wsys.blackoutloss( event, affliction )\n  if event == \"lost aff\" and affliction == \"blackout\" then\n    disableTrigger(\"Blackout -\")\n    tempPromptTrigger(function()\n      if not wsys.bals.e then\n      \tsend(\"curing predict disrupted\", false)\n      end -- if\n      if wsys.stats.h == wsys.stats.maxh and wsys.stats.m == wsys.stats.maxm then\n        wsys.affpredict(\"recklessness\")\n      end -- if\n      if not wsys.aff.aeon and wsys.classTimerExists(\"occultist\") or wsys.classTimerExists(\"jester\") or wsys.classTimerExists(\"shaman\") then\n      \tsend(\"curing predict aeon\")\n      end\n      --send(\"plist\")\n      if not wsys.aff.aeon then\n      \tsend(\"curing queue add speed\")\n      end\n    end, 1)\n  end\nend -- func\n\nfunction wsys.return_defaultaffprios()\n  return {\n    ---------------------------------\n    --HERBS (+ a few focusables obv)\n    ---------------------------------\n    -- depsthwalker priors: paralysis > timeloop > madness/depression > retribution > parasite\n    [\"paralysis\"] = 4,\n    [\"timeloop\"] = 5,\n    [\"hypochondria\"] = 5,\n    [\"shadowmadness\"] = 6,\n    [\"depression\"] = 6,\n    [\"retribution\"] = 6,\t-- This should be > madness, but < parasite. So either 6 or 7\n    [\"scytherus\"] = 6,\n    [\"impatience\"] = 6,\n    [\"parasite\"] = 7,\n    [\"asthma\"] = 7,\n    [\"sensitivity\"] = 7,\n    [\"weariness\"] = 7,\n    [\"guilt\"] = 8,\n    [\"darkshade\"] = 8,\n    [\"hypersomnia\"] = 9,\n    [\"hallucinations\"] = 9,\n    --10 GAP FOR OFF-FOCUS BAL SHIFTS\n    [\"nausea\"] = 11,\n    [\"haemophilia\"] = 11,\n    [\"lethargy\"] = 11,\n    [\"addiction\"] = 11,\n    [\"tenderskin\"] = 11,\n    [\"spiritburn\"] = 11,\n    --13 GAP\n    [\"temperedmelancholic\"] = 14,\n    [\"temperedcholeric\"] = 14,\n    [\"temperedsanguine\"] = 14,\n    [\"temperedphlegmatic\"] = 14,\n    [\"lovers\"] = 14, \n    [\"pacified\"] = 14, \n    [\"healthleech\"] = 14,\n    [\"clumsiness\"] = 14,\n    [\"dissonance\"] = 14,\n    [\"loneliness\"] = 16,\n    [\"claustrophobia\"] = 16,\n    [\"agoraphobia\"] = 16,\n    [\"vertigo\"] = 16,\n\n\n    [\"peace\"] = 16, \n    [\"justice\"] = 16, \n    [\"generosity\"] = 16,\n\n    [\"dementia\"] = 17,\n    [\"paranoia\"] = 17,\n\n    [\"stupidity\"] = 18, --move to 9 if off focus balance\n    [\"epilepsy\"] = 18,\n    [\"confusion\"] = 20, --move to 2 if disrupted, move to 8 if off focus balance\n    [\"recklessness\"] = 21, --move up higher if off focus balance\n    [\"masochism\"] = 21,\n\n    [\"dizziness\"] = 23, --if off focus balance move this to 14? Seems too high honestly.\n    [\"shyness\"] = 23, --if off focus balance move this to 14?\n\n    --------------------------\n    --SALVE\n    --------------------------\n    [\"heartseed\"] = 3,\n    [\"hypothermia\"] = 3,\n    [\"anorexia\"] = 4,\n    [\"crushedthroat\"] = 5,\n    [\"itching\"] = 5,\n\n    --6 GAP: For resto leg breaks and prone\n\n    [\"brokenleftleg\"] = 7,\n    [\"brokenrightleg\"] = 7,\n\n    [\"damagedleftleg\"] = 8, --move these up if prone so Sents can't screw me over.\n    [\"damagedrightleg\"] = 8,\n    [\"mangledleftleg\"] = 8,\n    [\"mangledrightleg\"] = 8,\n\n    [\"mangledhead\"] = 9,\n\n    [\"brokenleftarm\"] = 10,\n    [\"brokenrightarm\"] = 10,\n\n    [\"damagedleftarm\"] = 11,\n\n    [\"damagedhead\"] = 12,\n    [\"concussion\"] = 12,\n\n    [\"damagedrightarm\"] = 13,\n\n    [\"mangledleftarm\"] = 14,\n    [\"mangledrightarm\"] = 14,\n\n    [\"frozen\"] = 15,\n    [\"shivering\"] = 15, --same rank as frozen\n    --CALORIC(insulation) at 15 unless it's a damn sentinel, then move up to 2 along with frozen and shivering\n    [\"scalded\"] = 16,\n    [\"mildtrauma\"] = 17,\n    [\"serioustrauma\"] = 17,\n\n    --MASS at 18\n\n    [\"burning\"] = 19,\n    [\"stuttering\"] = 19,\n    [\"slashedthroat\"] = 19,\n    [\"laceratedthroat\"] = 19,\n    [\"selarnia\"] = 20,\n\n    --broken = crippled\n    --damaged = broken\n    --mangled = mangled\n    --lvl1 torso = mildtrauma\n    --lvl2 torso = serioustrauma\n\n    ---------------------------\n    --PIPE\n    ---------------------------\n    [\"aeon\"] = 2,\n    [\"slickness\"] = 3, --1 higher than para so that smoke > eat broot if para and slick.\n    [\"whisperingmadness\"] = 11,\n    [\"hellsight\"] = 12,\n    -- From Oblive - Air Lord priority: manaleech>deadening>disloyalty>tension>pressure\n    [\"manaleech\"] = 13,\n    [\"deadening\"] = 14,\n    [\"disloyalty\"] = 15,\n    [\"pressure\"] = 16,\n    [\"tension\"] = 17,\t--  Pressure > Tension, unless sent airborne, then swap\n\n    --[\"rebounding\"] = 18, (DEFENCE QUEUE SLOT 18) IMPORTANT TO MOVE THIS DOWN BELOW PRESSURE\n\n    ------------------------\n    --HEALTH ELIXIR\n    ------------------------\n    [\"skullfractures\"] = 8,\n    [\"crackedribs\"] = 9,\n    [\"torntendons\"] = 10,\n    [\"wristfractures\"] = 11,\n\n    -------------------------\n    --WRITHE\n    -------------------------\n    [\"bound\"] = 6,\n    [\"transfixation\"] = 6,\n    [\"webbed\"] = 6,\n    [\"entangled\"] = 6,\n    [\"daeggerimpale\"] = 6,\n    [\"impaled\"] = 6,\n\n    -----------------------\n    --BAL FREE CURES\n    -----------------------\n    [\"sleeping\"] = 2,\n    [\"voyria\"] = 9,\n    [\"prone\"] = 9,\n    [\"disrupted\"] = 9,\n    [\"fear\"] = 20, --low for retardation/aeon curing\n\n  }\nend",
    "eventHandlerList": null
}