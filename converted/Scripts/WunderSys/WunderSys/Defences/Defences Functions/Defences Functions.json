{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Defences Functions",
    "packageName": null,
    "script": "--defence gained function\nfunction wsys.deffed(d)\n  wsys.def[d] = true\n  local onKeepup = false\n  if wsys.settings.keepup[wsys.profile][wsys.myClass()] ~= nil and wsys.settings.keepup[wsys.profile][wsys.myClass()][d] then onKeepup = true end\n  if wsys.settings.defup[wsys.profile][wsys.myClass()][d] and not onKeepup then\n    send(\"curing priority defence \"..d.. \" reset\")\n  end\nend\n\n--lost def (not stripped)\nfunction wsys.undef(d)\n  wsys.def[d] = nil\nend\n\n--can't def up because of an error\nfunction wsys.cannotdef(d)\n  local onKeepup = false\n  if wsys.settings.keepup[wsys.profile][wsys.myClass()] ~= nil and wsys.settings.keepup[wsys.profile][wsys.myClass()][d] then onKeepup = true end\n  if wsys.settings.defup[wsys.profile][wsys.myClass()][d] and not onKeepup then\n    send(\"curing priority defence \"..d.. \" reset\")\n  end\nend\n\nfunction wsys.defmissingdep(d)\n  if wsys.settings.keepup[wsys.profile][wsys.myClass()] ~= nil and wsys.settings.keepup[wsys.profile][wsys.myClass()][d] then \n    wsys.unkeepup(d, true)\n  end\nend\n\n--defence lost function\nfunction wsys.defstrip(defe)\n  wsys.def[wsys.tb.defstripTable[defe]] = false\nend -- func\n\n-- enable serverSide defence\nfunction wsys.enableSSDef( defence, priority, silent )\n  priority = priority or 25\n  local preempt = priority <= 10 and \" preempt\" or \"\"\n  send(\"curing priority defence \" ..defence..\" \".. priority .. preempt, not silent )\nend\n\nfunction wsys.switchDefPrios( def, pos )\n  if wsys.settings.keepup[wsys.profile][wsys.myClass()] then\n\t\t-- TODO: Check shifts so we don't do it multiple times\n  \tsend(\"curing priority defence \" .. def .. \" \" .. tostring(pos), true)\n  end\nend\n\nfunction wsys.defPrioRestore( def )\n\tif wsys.settings.keepup[wsys.profile][wsys.myClass()][def] and wsys.settings.defprio[wsys.profile][wsys.myClass()][def] then\n\t\t-- TODO: Track shifts so we don't reset multiple times\n\t\tsend(\"curing priority defence \" .. def .. \" \" .. tostring(wsys.settings.defprio[wsys.profile][wsys.myClass()][def]), true)\n\telse\n\t\tsend(\"curing priority defence \"..def.. \" reset\")\n\tend\nend\n\nlocal function get_manual_command( command )\n  if type(command) == \"function\" then\n    return command()\n  else\n    if not type(command) == \"string\" then cecho(\"\\n<red>Manual commands should be strings or functions: \"..command ) end\n    return command\n  end\nend\n\n--defup a certain profile\nfunction wsys.defup(profile)\n  profile = profile or wsys.profile\n  if table.contains(wsys.settings.defup, profile) then\n     wsys.report(\"Defup - \"..wsys.profile)\n    wsys.switchProfile( profile )\n  else\n    wsys.report(\"Not a valid profile\")\n    return\n  end\n\n  --Ensure we have class tables\n  if wsys.settings.affprio[wsys.profile][wsys.myClass()] == nil then\n    wsys.newclasstables(wsys.myClass())\n  end\n\n  --Channels for Magi, Sylvans and Priests\n  if wsys.isClass(\"magi\") or wsys.isClass(\"sylvan\") or wsys.isClass(\"priest\") then\n    if wsys.missingChannels() > 0 then\n      wsys.defChannels()\n    end\n  end\n  \n  if wsys.isClass(\"priest\") or wsys.isClass(\"paladin\") then\n    if wsys.settings.havebliss and not (wsys.def.toughness and wsys.def.constitution and wsys.def.resistance) then\n      wsys.doadd(\"perform bliss me\")\n    end\n  end\n\n  -- we need a spiritform thingie too\n  for ck,cv in pairs(wsys.settings.defup[wsys.profile][wsys.myClass()]) do \n    if wsys.tb.defenceTable[ck] and wsys.tb.defenceTable[ck][\"skillset\"][1] == \"spiritform\" and wsys.tb.defenceTable[ck][\"manualcommand\"] then\n      wsys.doadd( get_manual_command( wsys.tb.defenceTable[ck][\"manualcommand\"] ))\n      -- quit the loop, we're done here\n      break\n    end\n  end\n    \n  for k,v in pairs(wsys.settings.defup[wsys.profile][wsys.myClass()]) do\n    local highestprio = 25\n    local highestdef = \"\"\n    local alldefs = {}\n    local manualdefs = {}\n    --add all defups that aren't deffed and aren't in keepup to the serverside keepup\n    if not wsys.def[k] and not wsys.tb.defenceTable[k][\"manualcommand\"] then\n      if wsys.settings.defprio[wsys.profile][wsys.myClass()][k] then\n        if wsys.settings.defprio[wsys.profile][wsys.myClass()][k] <= highestprio then\n          highestprio = wsys.settings.defprio[wsys.profile][wsys.myClass()][k]\n          alldefs[#alldefs+1] = highestdef\n          highestdef = \"curing priority defence \"..k..\" \".. wsys.settings.defprio[wsys.profile][wsys.myClass()][k]\n        else\n          alldefs[#alldefs+1] = \"curing priority defence \"..k..\" \".. wsys.settings.defprio[wsys.profile][wsys.myClass()][k]\n        end\n      else\n        alldefs[#alldefs+1] = \"curing priority defence \"..k..\" 25\"\n        wsys.settings.defprio[wsys.profile][wsys.myClass()][k] = 25\n      end\n    elseif not wsys.def[k] and wsys.tb.defenceTable[k][\"manualcommand\"] then\n      manualdefs[#manualdefs+1] = get_manual_command( wsys.tb.defenceTable[k][\"manualcommand\"] )\n    end --if\n    send(highestdef, false)\n    for k,v in pairs(alldefs) do\n      send(v, false)\n    end\n    for k,v in pairs(manualdefs) do\n      send(v, false)\n    end\n  end --for\n  \n\n  --60 second failsafe to remove all defs from serverside keepup, assume they are already deffed.\n  if wsys.timer.defup then killTimer(wsys.timer.defup) end\n  wsys.timer.defup = tempTimer(60, [[wsys.defupFailsafe();wsys.timer.defup = nil]])\nend --fn\n\n--assume anything that hasn't been deffed up yet is deffed\nfunction wsys.defupFailsafe()\n  for k,v in pairs(wsys.settings.defup[wsys.profile][wsys.myClass()]) do\n    --add all defups that aren't deffed and aren't in keepup to the serverside keepup\n    local onKeepup = false\n    if wsys.settings.keepup[wsys.profile][wsys.myClass()] ~= nil and wsys.settings.keepup[wsys.profile][wsys.myClass()][d] then onKeepup = true end\n    if onKeepup then\n      send(\"curing priority defence \"..k..\" reset\")\n      wsys.def[k] = true\n    end --if\n  end --for\nend\n\nlocal deflines = false\n\nfunction wsys.defCheckStart()\n  deflines = true\n  enableTrigger(\"Def\")\n  send(\"def\")\n  if wsys.timer.defswait then\n    killTimer(tostring(wsys.timer.defswait))\n  end\n  wsys.timer.defswait = tempTimer(wsys.myPing()*2.5, [[wsys.timer.defswait = nil;disableTrigger(\"Def\");deflines = false]])\n  if wsys.isClass(\"sylvan\") or wsys.isClass(\"runewarden\") or wsys.isClass(\"priest\") then\n\n  end\nend\n\nfunction wsys.defCheckEnd()\n  disableTrigger(\"Def\")\n  deflines = false\nend\n\nfunction wsys.defLine(d, msg)\n  if deflines then\n    wsys.def[d] = true\n    deleteLine()\n    if msg then\n      wsys.def_sub(msg, \"newl\")\n    else\n      wsys.def_sub(d, \"newl\")\n    end\n  end\nend\n\n--add def to keepup\nfunction wsys.keepup(def, gagecho)\n  wsys.settings.keepup[wsys.profile][wsys.myClass()][def] = true\n  wsys.settings.defprio[wsys.profile][wsys.myClass()][def] = wsys.settings.defprio[wsys.profile][wsys.myClass()][def] or 25\n  wsys.enableSSDef( def, wsys.settings.defprio[wsys.profile][wsys.myClass()][def], true )\n  if not gagecho then\n    wsys.report(\"Added \" .. def .. \" to defence keepup in the \" ..wsys.profile.. \" profile.\")\n  end\nend\n\n--remove def from keepup\nfunction wsys.unkeepup(def, gagecho)\n  wsys.settings.keepup[wsys.profile][wsys.myClass()][def] = false\n  send(\"curing priority defence \" .. def .. \" reset\")\n  if not gagecho then\n    wsys.report(\"Removed \" .. def .. \" from defence keepup in the \" ..wsys.profile.. \" profile.\")\n  end\nend\n\n--toggle def keepup\nfunction wsys.togglekeepup(def, gagecho)\n  if wsys.settings.keepup[wsys.profile][wsys.myClass()][def] then\n    wsys.unkeepup(def, gagecho)\n  else\n    wsys.keepup(def, gagecho)\n  end\nend\n\n\n--reset all prompt defences\nfunction wsys.promptdefs()\n if not wsys.aff.blackout then\n  wsys.def.blindness = false\n  wsys.def.cloak = false\n  wsys.def.deafness = false\n  wsys.def.kola = false\n  wsys.def.blackwind = false\n  wsys.def.phased = false\n  wsys.def.astralform = false\nend -- if\nend -- func\n\n\n\n-- DEFENSES SUB\nfunction wsys.def_sub(defense, newl)\n if newl then\n  cinsertText(\"\\n<DarkGoldenrod>(<ivory>\" .. defense .. \" +<DarkGoldenrod>)\")\n else\n  cinsertText(\" <DarkGoldenrod>(<ivory>\" .. defense .. \" +<DarkGoldenrod>)\")\n end -- if\nend -- func\n\n-- DEF ADD SUB\nfunction wsys.defaddsub(defence)\n selectCurrentLine()\n fg(\"pink\")\n deselect()\n resetFormat()\n-- deleteLine()\n-- cinsertText(\"\\n[<pink>DEF UP<grey>] <pink>\" .. defence:upper() .. \" <grey>| \" .. line)\nend -- func\n\n-- DEF Loss SUB\nfunction wsys.deflosssub(defence)\n selectCurrentLine()\n fg(\"violet_red\")\n deselect()\n resetFormat()\n-- deleteLine()\n-- cinsertText(\"\\n[<violet_red>DEF LOSS<grey>] <violet_red>\" .. defence:upper() .. \" <grey>| \" .. line)\nend -- func",
    "eventHandlerList": null
}