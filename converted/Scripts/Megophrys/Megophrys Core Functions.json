{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Megophrys Core Functions",
    "packageName": null,
    "script": "Megophrys.autoAttack = function()\n  Megophrys.setGuidance('fight')\n  cecho('\\n<cyan>Commencing auto-attack with '.. Megophrys.class ..'...\\n')\n  Megophrys.priorityLabel:echo('<center>Priority: DAMAGE</center>')\n  Megophrys.updateMissionCtrlBar()\n  Megophrys[Megophrys.class].nextAttack()\nend\n\nMegophrys.autoEscape = function()\n  Megophrys.setGuidance('flight')\n\n  if not gmcp.Room or not gmcp.Room.Info or not gmcp.Room.Info.exits then\n    Megophrys.stopEscape('No exits detected')\n    return\n  end\n\n  cecho('\\nCommencing auto-flight...\\n')\n  Megophrys.fleeingToRoom = Megophrys.Util.randomChoice(getAreaRooms(\n                              getRoomArea(gmcp.Room.Info.num)\n                            ))\n  Megophrys.escapeBlocked = false\n  Megophrys.escapeDelayed = false\n\n  Megophrys.priorityLabel:echo('<center>Priority: FLEE</center>')\n  Megophrys.updateMissionCtrlBar()\n  send('lose '.. target)\n  gotoRoom(Megophrys.fleeingToRoom)\nend\n\nMegophrys.autoResist = function()\n  Megophrys.autoResisting = true\n  Megophrys.setGuidance('DieWithHonor')\n  Megophrys.priorityLabel:echo('<center>Priority: HEAL</center>')\n  wsys.keepup('shield', true)\n  if Megophrys.class == 'Magi' then\n    wsys.keepup('reflections', true)\n  end\n  if Megophrys.class == 'Alchemist' then\n    send('educe tin')\n  end\nend\n\nMegophrys.dgradient = function(text, fgColorTable, bgColorTable)\n  if type(fgColorTable) ~= \"table\" then\n    error(\"Argument #2 expects a table not \".. type(fgColorTable))\n  end\n  if type(bgColorTable) ~= \"table\" then\n    error(\"Argument #3 expects a table not \".. type(bgColorTable))\n  end\n\n  if #fgColorTable > 1 and #bgColorTable > 1 and #fgColorTable ~= #bgColorTable then\n    error(\"Please use the same number of colors for both foreground \"..\n          \"and background gradients.\")\n  end\n\n  if #fgColorTable == 1 and #bgColorTable > 1 then\n    for i=2, #bgColorTable do\n      fgColorTable[i] = fgColorTable[1]\n    end\n  elseif #bgColorTable == 1 and #fgColorTable > 1 then\n    for i=2, #fgColorTable do\n      bgColorTable[i] = bgColorTable[1]\n    end\n  end\n\n  local lenGradient = #fgColorTable\n  if lenGradient > #text then\n    error(\"Text provided is too short for this gradient!\")\n  end\n\n  local _dgradient = Megophrys.Util._dgradient\n\n  if lenGradient > 1 then\n    -- switch colors every nth character (rounded to integer b/c no half characters)\n    local interval = math.floor((#text / (lenGradient - 1)) + 0.5)\n    local resultStr = ''\n    for i=1, lenGradient - 1 do\n      local chunk = string.sub(text, (interval * (i - 1)) + 1, interval * i)\n      resultStr = resultStr .. _dgradient(chunk,\n                                          fgColorTable[i],\n                                          fgColorTable[i + 1],\n                                          bgColorTable[i],\n                                          bgColorTable[i + 1])\n    end\n    return resultStr\n  else\n    return fgColorTable[1] ..','.. bgColorTable[1].gsub('#', '') .. text\n  end\nend\n\nMegophrys.eStopAuto = function(message)\n  if Megophrys.autoAttacking then\n    cecho('\\n<red>Emergency stop: No more auto-attacks.\\n')\n    Megophrys.stopAttack(message or 'Emergency stop lever')\n  end\n  if Megophrys.autoEscaping then\n    Megophrys.stopEscape(message or 'Emergency stop lever')\n  end\n  if Megophrys.autoResisting then\n    Megophrys.stopResist(message or 'Emergency stop lever')\n  end\n  send('clearqueue all')\n  mmp.stop()\n\n  Megophrys.priorityLabel:echo('<center>Priority: IDLE</center>')\n  Megophrys.updateMissionCtrlBar()\nend\n\nMegophrys.findTargetsInLine = function(match)\n  if Megophrys.killStrat ~= 'raid' then return end\n  local firstMatch = true\n  if match then\n    local line = getCurrentLine()\n      for name, _ in pairs(cdb.db) do\n        if (name ~= target and line:match('\\b'.. name ..'\\b') and\n                _.city ~= gmcp.Char.Status.city:lower():split(' ')[1]) then\n          if firstMatch then\n            cecho('\\n<cyan>Click2Target: ')\n            firstMatch = false\n          end\n          cechoPopup('<cyan>'.. name ..'  ',\n            {\n                function() Megophrys.setTarget(name) end,\n                function() send('enemy '.. name) end\n            }, {\n                'Target '.. name,\n                'Enemy '.. name\n            })\n        end\n      end\n  end\nend\n\nMegophrys.goDir = function(direction)\n  Megophrys.lastDirTried = direction\n  sendAll('clearqueue all', direction)\nend\n\nMegophrys.nextLimbPrepAttack = function(onKillConditionAttack,\n                                        limbPrepThreshold,\n                                        limbUnderPrepThreshold)\n  if Megophrys.killPreConditionsMet then\n    return {\n      targetLimb = Megophrys.targetLimb,\n      targetTorso = true\n    }\n  end\n\n  local otherLimb = ''\n  local targetTorso = false\n  local limbIsBroken = false\n  local limbIsPrepped = false\n  local limbIsUnderPrepped = false\n  local otherLimbIsBroken = false\n  local otherLimbIsPrepped = false\n  local otherLlimbIsUnderPrepped = false\n  local torsoIsBroken = false\n  local torsoIsPrepped = false\n  local torsoIsUnderPrepped = false\n  local targetWounds = lb[target].hits\n  local targetLimb = Megophrys.targetLimb\n  local skipTorso = Megophrys.skipTorso\n  local dualPrep = Megophrys.dualPrep\n  local prepConditionsMet = false\n\n  if limbPrepThreshold then\n    limbPrepThreshold = tonumber(limbPrepThreshold)\n  else\n    limbPrepThreshold = 91\n  end\n\n  if limbUnderPrepThreshold then\n    limbUnderPrepThreshold = tonumber(limbUnderPrepThreshold)\n  else\n    limbUnderPrepThreshold = 99   -- disable feature\n  end\n\n  if targetLimb then\n    local targetLimbDmg = (targetWounds[targetLimb ..' leg'] or 0)\n    if targetLimbDmg >= 100 then\n      limbIsBroken = true\n      cecho('\\n<gold>LIMB IS BROKEN!\\n')\n    elseif targetLimbDmg >= limbPrepThreshold then\n      limbIsPrepped = true\n      cecho('\\n<gold>LIMB IS PREPPED!\\n')\n    elseif targetLimbDmg >= limbUnderPrepThreshold then\n      limbIsUnderPrepped = true\n    end\n\n    if targetLimb == 'right' then\n      otherLimb = 'left'\n    else\n      otherLimb = 'right'\n    end\n\n    local otherLimbDmg = (targetWounds[otherLimb ..' leg'] or 0)\n    if otherLimbDmg >= 100 then\n      otherLimbIsBroken = true\n      cecho('\\n<gold>OTHER LIMB IS BROKEN!\\n')\n    elseif otherLimbDmg >= limbPrepThreshold then\n      otherLimbIsPrepped = true\n      cecho('\\n<gold>OTHER LIMB IS PREPPED!\\n')\n    elseif otherLimbDmg >= limbUnderPrepThreshold then\n      otherLimbIsUnderPrepped = true\n    end\n  end\n\n  if not skipTorso then\n    local targetTorsoDmg = (targetWounds.torso or 0)\n    if targetTorsoDmg >= 100 then\n      torsoIsBroken = true\n      cecho('\\n<gold>TORSO IS BROKEN!\\n')\n    elseif targetTorsoDmg >= limbPrepThreshold then\n      torsoIsPrepped = true\n      cecho('\\n<gold>TORSO IS PREPPED!\\n')\n    elseif targetTorsoDmg >= limbUnderPrepThreshold then\n      torsoIsUnderPrepped = true\n    end\n  end\n\n  if limbIsPrepped then\n    if dualPrep and not otherLimbIsPrepped then\n      -- switch legs\n      Megophrys.priorityLabel:echo('<center>Priority: LIMB 2 PREP</center>')\n      targetLimb = otherLimb\n    elseif not skipTorso and not torsoIsPrepped then\n      -- work on prepping torso once limb is done\n      Megophrys.priorityLabel:echo('<center>Priority: TORSO PREP</center>')\n      targetTorso = true\n    else\n      -- otherwise start breaks / proning\n      Megophrys.priorityLabel:echo('<center>Priority: L2 BREAKS</center>')\n      prepConditionsMet = true\n      targetTorso = false\n    end\n  elseif limbIsBroken or Megophrys.limbHasBroken then\n    Megophrys.limbHasBroken = true\n    Megophrys.killPreConditionsMet = true\n\n    if dualPrep and not otherLimbIsBroken then\n      targetLimb = otherLimb\n      Megophrys.killPreConditionsMet = false\n    elseif not skipTorso and not torsoIsBroken then\n      targetTorso = true\n      Megophrys.killPreConditionsMet = false\n    end\n\n    if Megophrys.killPreConditionsMet and onKillConditionAttack then\n      Megophrys.nextMoveButton:echo(tostring(onKillConditionAttack):title(),\n                                    Megophrys.fgColors[killStrat], 'c')\n    end\n  else\n    Megophrys.priorityLabel:echo('<center>Priority: LIMB PREP</center>')\n  end\n\n  return {\n    targetLimb = targetLimb,\n    targetTorso = targetTorso,\n    limbIsPrepped = limbIsPrepped,\n    limbIsUnderPrepped = limbIsUnderPrepped,\n    otherLimbIsPrepped = otherLimbIsPrepped,\n    otherLimbIsUnderPrepped = otherLimbIsUnderPrepped,\n    torsoIsPrepped = torsoIsPrepped,\n    torsoIsUnderPrepped = torsoIsUnderPrepped,\n    prepConditionsMet = prepConditionsMet\n  }\nend\n\nMegophrys.pursue = function()\n  Megophrys.priorityLabel:echo('<center>Priority: PURSUIT</center>')\n  if Megophrys.targetRoom then\n    Megophrys.setGuidance('rushdown')\n    gotoRoom(Megophrys.targetRoom)\n    Megophrys.targetRoom = nil\n  else\n    local findCmd = ''\n    if Megophrys.class == 'Magi' then\n      findCmd = 'cast scry at '\n    else\n      findCmd = 'farsee '\n    end\n    if Megophrys.killStrat == 'raid' and Megophrys.raidLeader then\n      send(findCmd .. Megophrys.raidLeader)\n      Megophrys.priorityLabel:echo('<center>Priority: IDLE</center>')\n    elseif Megophrys.killStrat == 'denizen' and Megophrys.huntingGround then\n      Megophrys.setGuidance('rushdown')\n      send('walk to '.. Megophrys.huntingGround)\n    else\n      send(findCmd .. target)\n      Megophrys.priorityLabel:echo('<center>Priority: IDLE</center>')\n    end\n  end\n  Megophrys.updateMissionCtrlBar()\nend\n\nMegophrys.resetCuringPrios = function(theseAffs)\n  local cmd = 'curing priority'\n  for priority, affList in spairs(Megophrys.prioDefault) do\n    for _, aff in spairs(affList) do\n      local addAff = true\n      if theseAffs and type(theseAffs) == 'table' then\n        addAff = false\n        for _, selectedAff in pairs(theseAffs) do\n          if selectedAff == aff then\n            addAff = true\n            break\n          end\n        end\n      end\n      if addAff then cmd = table.concat({cmd, aff, priority}, ' ') end\n    end\n    if priority % 10 == 0 and cmd ~= 'curing priority' then\n      send(cmd)\n      cmd = 'curing priority'\n    end\n  end\n  if cmd ~= 'curing priority' then\n    send(cmd)\n  end\nend\n\nMegophrys.resetTargetWounds = function()\n  cecho('\\t<cyan>Resetting target wounds...\\n')\n  Megophrys.targetHits = 0\n  lb.resetAll(target)\n  Megophrys.limbHasBroken = false\n  Megophrys.updatePrepGauges()\nend\n\nMegophrys.setEnemies = function(enemyList)\n  Megophrys.enemies = {}\n  disableTrigger('reject_forced_unenemy_all')\n  send('unenemy all')\n  for enemy in string.gmatch(enemyList, '[^, ]+') do\n    if enemy ~= 'and' then\n      Megophrys.enemies[#Megophrys.enemies + 1] = string.lower(enemy)\n    end\n  end\n  send('enemy '.. table.concat(Megophrys.enemies, ' | enemy '))\n  tempTimer(0.25, function()\n    enableTrigger('reject_forced_unenemy_all')\n  end)\nend\n\nMegophrys.setMode = function(mode)\n  Megophrys.killStrat = string.lower(mode)\n  Megophrys.modeButton:echo(string.title(Megophrys.killStrat),\n                            Megophrys.fgColors[Megophrys.killStrat], 'c')\n  if Megophrys.killStrat == 'denizen' then\n    cecho('\\n<cyan>Hunt mode activated as '.. Megophrys.class ..'!')\n\n    wsys.unkeepup('mass', true)\n    wsys.unkeepup('rebounding', true)\n  elseif Megophrys.killStrat == 'raid' then\n    cecho('\\n<cyan>Raid mode activated as '.. Megophrys.class ..'!')\n\n    if Megophrys.raidLeader then\n      cecho('\\n<cyan>Raid leader set to: '.. Megophrys.raidLeader ..'\\n')\n    end\n\n    wsys.keepup('mass', true)\n    wsys.keepup('rebounding', true)\n  elseif Megophrys.killStrat == 'los' then\n    cecho('\\n<cyan>LoS mode activated as '.. Megophrys.class ..'!')\n\n    if Megophrys.LOSDirection then\n      cecho('\\n<cyan>LoS direction set to: '.. Megophrys.LOSDirection ..'\\n')\n    end\n\n    wsys.keepup('mass', true)\n    wsys.keepup('rebounding', true)\n  else  -- some pvp mode\n    wsys.keepup('mass', true)\n    wsys.keepup('rebounding', true)\n  end\n\n  Megophrys.priorityLabel = nil\n  Megophrys.priorityLabel = Geyser.Label:new({\n    name='priorityLabel',\n    x='36%', y=0,\n    width='14%', height='2%',\n    fgColor=Megophrys.fgColors[Megophrys.killStrat], color='black',\n    message='<center>Priority: IDLE</center>'\n  })\n  Megophrys.priorityLabel:setFontSize(11)\n  Megophrys.setTarget('none')\n  Megophrys.highlightTargetRoom()\n  Megophrys[Megophrys.class].setMode()\nend\n\nMegophrys.setGuidance = function(mode)\n  Megophrys.eStopAuto('Mode switch')\n\n  mode = string.lower(mode or '')\n  if mode == 'fight' then\n    Megophrys.autoAttacking = true\n  elseif mode == 'flight' then\n    Megophrys.autoEscaping = true\n  elseif mode == 'diewithhonor' then\n    Megophrys.autoResisting = true\n  elseif mode == 'rushdown' then\n    Megophrys.inPursuit = true\n  elseif mode ~= 'idle' then\n    cecho('\\n<orange>Unknown mode: \"'.. mode ..'\"\\n')\n  end\nend\n\nMegophrys.setOpponentClass = function(cls)\n  if Megophrys.killStrat == 'raid' or Megophrys.riposteUp then return end\n  Megophrys.opponentClass = string.lower(tostring(cls))\nend\n\nMegophrys.setTarget = function(t)\n  if t == 'none' then target = 'none' else\n    target = string.title(string.lower(tostring(t)))\n  end\n  send('st '.. target)\n  cecho('\\n<cyan>Target changed to '.. target ..'.')\n  Megophrys.resetTargetWounds()\n\n  if target ~= 'none' and Megophrys.killStrat ~= 'raid' then\n    send('curing priority reset')\n  end\n\n  if Megophrys.killStrat ~= 'denizen' and target ~= 'none' then\n    ak.oresetparse()\n    hideWindow('aff_display')\n    if Megophrys.class == 'Magi' then\n      sendAll('unally '.. target, 'enemy '.. target)\n    end\n  end\n\n  -- set temp trigger to highlight the target string\n  if hilite_trigger_id then killTrigger(hilite_trigger_id) end\n  if hilite_trigger_id2 then killTrigger(hilite_trigger_id2) end\n\n  hilite_target_func = function(needle)\n    idx = 1\n    done = false\n    while not done do\n      done = true\n      lpos = selectString(needle, idx)\n      if lpos ~= -1 then \n        Megophrys.Util.hiliteSelection('OrangeRed')\n        done = false\n      end\n      idx = idx + 1\n    end\n  end\n\n  if target ~= 'none' then\n    hilite_trigger_id = tempTrigger(target:lower(), function()\n        hilite_target_func(target:lower())\n    end)\n    hilite_trigger_id2 = tempTrigger(target, function()\n        hilite_target_func(target)\n    end)\n    send('tunnelvision on '.. target)\n  else\n    send('tunnelvision off')\n  end\n\n  Megophrys.targetLabel = nil\n  Megophrys.targetLabel = Geyser.Label:new({\n    name='targetLabel',\n    x='36%', y='2%',\n    width='14%', height='2%',\n    fgColor=Megophrys.fgColors[Megophrys.killStrat], color='black',\n    message='<center>Target: '.. target ..'</center>'\n  })\n  Megophrys.targetLabel:setFontSize(11)\nend\n\nMegophrys.shout = function(message, color)\n  if not color then color = 'red' end\n  local remaining_len = (78 - message:len()) / 2\n  local top_line = '\u2554'.. string.rep('\u2550', 78) ..'\u2557'\n  local bottom_line = '\u255a'.. string.rep('\u2550', 78) ..'\u255d'\n  local left_side = '\u2551'.. string.rep(' ', remaining_len)\n  local right_side = string.rep(' ', remaining_len) ..'\u2551'\n  if message:len() % 2 == 1 then\n    right_side = ' '.. right_side\n  end\n\n  cecho('\\n<'.. color ..'>'.. top_line)\n  cecho('\\n<'.. color ..'>'.. left_side .. message:upper() .. right_side)\n  cecho('\\n<'.. color ..'>'.. left_side .. message:upper() .. right_side)\n  cecho('\\n<'.. color ..'>'.. left_side .. message:upper() .. right_side)\n  cecho('\\n<'.. color ..'>'.. bottom_line)\nend\n\nMegophrys.stopAttack = function(reason)\n  if type(reason) == 'table' then reason = 'Clicked STOP' end\n  cecho('\\n<cyan>'.. reason ..'. Disabling auto-attack.\\n')\n  if Megophrys.autoAttackTimerId then\n    killTimer(Megophrys.autoAttackTimerId)\n  end\n  Megophrys.autoAttacking = false\n  send('diag')\n  Megophrys.priorityLabel:echo('<center>Priority: IDLE</center>')\n  Megophrys.updateMissionCtrlBar()\nend\n\nMegophrys.stopEscape = function(reason)\n  if type(reason) == 'table' then reason = 'Clicked STOP' end\n  cecho('\\n<red>'.. reason ..'. Disabling auto-flight.\\n')\n  Megophrys.autoEscaping = false\n  send('diag')\n  Megophrys.priorityLabel:echo('<center>Priority: IDLE</center>')\n  Megophrys.updateMissionCtrlBar()\nend\n\nMegophrys.stopResist = function(reason)\n  if type(reason) == 'table' then reason = 'Clicked STOP' end\n  cecho('\\n<red>'.. tostring(reason) ..'. Disabling auto-resist.\\n')\n  Megophrys.autoResisting = false\n  wsys.unkeepup('shield', true)\n  if Megophrys.class == 'Magi' then\n    wsys.unkeepup('reflections', true)\n  end\n  send('diag')\n  Megophrys.priorityLabel:echo('<center>Priority: IDLE</center>')\n  Megophrys.updateMissionCtrlBar()\nend\n\nMegophrys.toggleDualPrep = function()\n  Megophrys.dualPrep = not Megophrys.dualPrep\n\n  if Megophrys.dualPrep then\n    cecho('\\n<cyan>Toggled to dual-limb prep!\\n')\n  else\n    cecho('\\n<cyan>Toggled to single-limb prep!\\n')\n  end\n\n  Megophrys.updatePrepGauges()\nend\n\nMegophrys.toggleLimbsPrepped = function()\n  local targetLimbSet = (Megophrys.targetLimbSet or 'leg')\n\n  if targetLimbSet == 'leg' then\n    targetLimbSet = 'arm'\n    cecho('\\n<cyan>Toggled to prepping arms!\\n')\n  else\n    targetLimbSet = 'leg'\n    cecho('\\n<cyan>Toggled to prepping legs!\\n')\n  end\n\n  Megophrys.targetLimbSet = targetLimbSet\n  Megophrys.updatePrepGauges()\nend\n\nMegophrys.toggleSkipTorso = function()\n  Megophrys.skipTorso = not Megophrys.skipTorso\n\n  if Megophrys.class == 'Magi' then\n    if Megophrys.skipTorso then\n      cecho('\\n<cyan>Skipping torso! (Only prepping leg(s).)\\n')\n    else\n      cecho('\\n<cyan>Prepping torso as well as leg(s).\\n')\n    end\n  else\n    if Megophrys.skipTorso then\n      cecho('\\n<cyan>Swapping gauge TORSO to HEAD.\\n')\n    else\n      cecho('\\n<cyan>Swapping gauge HEAD to TORSO.\\n')\n    end\n  end\n\n  Megophrys.updatePrepGauges()\nend\n\nMegophrys.toggleTargetLimb = function()\n  if Megophrys.targetLimb == 'right' then\n    Megophrys.targetLimb = 'left'\n  else\n    Megophrys.targetLimb = 'right'\n  end\n  Megophrys.targetLimbSet = Megophrys.targetLimbSet or 'leg'\n  cecho('\\n<cyan>Targetting '.. Megophrys.targetLimb ..' '.. Megophrys.targetLimbSet ..'.\\n')\n  Megophrys.updatePrepGauges()\nend\n\nMegophrys.toggleOne = nil\nMegophrys.toggleTwo = Megophrys.toggleDualPrep\nMegophrys.toggleThree = Megophrys.toggleTargetLimb\nMegophrys.toggleFour = Megophrys.toggleSkipTorso\nMegophrys.toggleFive = Megophrys.toggleLimbsPrepped\n\nMegophrys.tumbleRandom = function()\n  local stopTrying = false\n  local lastDir = nil\n  for dir, roomID in pairs(gmcp.Room.Info.exits) do\n    if math.random(1, 2) % 2 == 0 then\n      send('tumble '.. dir)\n      stopTrying = true\n      break\n    end\n    lastDir = dir\n  end\n  if not stopTrying then send('tumble '.. lastDir) end\nend\n",
    "eventHandlerList": null
}