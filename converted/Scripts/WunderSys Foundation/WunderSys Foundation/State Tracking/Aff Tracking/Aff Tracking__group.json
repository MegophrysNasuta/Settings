{
    "attribs": {
        "isActive": "yes",
        "isFolder": "yes"
    },
    "type": "scriptgroup",
    "name": "Aff Tracking",
    "packageName": null,
    "script": "wsysf.aff_tracking = wsysf.aff_tracking or { ids = {} }\nwsysf.aff_tracking.diagnose_lines = wsysf.aff_tracking.diagnose_lines or {}\n\nwsysf.affs = wsysf.affs or {}\n\nwsysf.aff_tracking.new = {} -- These are the affs that were added since the previous prompt\nwsysf.aff_tracking.lost = {} -- These are the affs that were removed since the previous prompt\nwsysf.aff_tracking.trigger_ids = {}\n\nlocal stackables = {\n\t-- Alchemist Tempers cap at 8\n\ttemperedcholeric = { max = 8 },\n\ttemperedmelancholic = { max = 8 },\n\ttemperedphlegmatic = { max = 8 }, \n\ttemperedsanguine = { max = 8 },\n\t\n\t-- Unweave stackables cap at 5\n\tunweavingbody = { max = 5 },\n\tunweavingmind = { max = 5 },\n\tunweavingspirit = { max = 5 },\n\t\n\t-- 2h fractures are uncapped, but cure double if at or above 6\n\ttorntendons = { doublecure_at = 6, max = 7 },\n\twristfractures = { doublecure_at = 6, max = 7 },\n\tskullfractures = { doublecure_at = 6, max = 7 },\n\tcrackedribs = { doublecure_at = 6, max = 7 },\n}\n\n--setmetatable(wsysf.affs, aff_mt)\n\n--- wsysf.affv = \"aff value\". If the aff is valid, then returns it as a number\n-- if the specified aff is not valid, then returns 0, rather than false\n-- This means: if wsysf.affv.whatever then ... will always pass\n-- But it also allows kelp = wsysf.affv.asthma + wsysf.affv.weariness + ... etc\n-- to be valid, without needing to convert them all to numbers\nwsysf.affv = setmetatable({}, {\n\t__index = function(t,k)\n\t\tlocal value = wsysf.affs[k]\n\n\t\tif not value then \n\t\t\treturn 0\n\t\telseif value == true then \n\t\t\treturn 1 \n\t\telse \n\t\t\treturn tonumber(value) or value \n\t\tend\n\tend,\n})\n\n-- Translate \"wristfractures (1)\" to wristfractures,1\nlocal function get_affs_value( name )\n\taff,value = name:match(\"(%w+) %((.+)%)\")\n\tif aff then\n\t\treturn aff,tonumber(value) or value,true\n\tend\n\t\n\treturn name,1,false\nend\n\n--- Track affs that have been gained or lost until the next prompt\nfunction wsysf.aff_tracking.on_prompt()\n\twsysf.aff_tracking.on_prompt_id = nil\n\twsysf.core.debug.display( 9, wsysf.aff_tracking.new, \"Affs gained on prompt\" )\n\twsysf.core.debug.display( 9, wsysf.aff_tracking.lost, \"Affs lost on prompt\" )\n\twsysf.aff_tracking.new = {}\n\twsysf.aff_tracking.lost = {}\n\t\n\tfor _,id in ipairs(wsysf.aff_tracking.trigger_ids) do\n\t\tkillTrigger( id )\n\tend\n\twsysf.aff_tracking.trigger_ids = {}\nend\n\nfunction wsysf.aff_tracking.set_aff_value( aff, value )\n\tif value == true then value = 1 end -- Convert \"true\" to 1\n\t\n\tif wsysf.affs[aff] ~= value then\n\t\twsysf.aff_tracking.new[aff] = value\n\t\tif not wsysf.aff_tracking.on_prompt_id then wsysf.aff_tracking.on_prompt_id = tempPromptTrigger( wsysf.aff_tracking.on_prompt, 1 ) end\n\t\t\n\t\twsysf.affs[aff] = value\n\t\t\n\t\twsysf.core.debug.print( 5, \"Aff: \"..aff..\"=\"..tostring(value) )\n\t\t\n    raiseEvent(\"wsysf got aff\", aff)\n\tend\nend\n\nfunction wsysf.aff_tracking.add()\n  local aff,value = get_affs_value( gmcp.Char.Afflictions.Add.name )\n\t\n\twsysf.core.debug.display( 7, gmcp.Char.Afflictions.Add, \"Aff Added\" )\n\t\n\t-- Track affs that have been added, and clear them on the next prompt\n\t-- This will let us perform special handling on triggers if needed\n\twsysf.aff_tracking.new[aff] = value\n\tif not wsysf.aff_tracking.on_prompt_id then wsysf.aff_tracking.on_prompt_id = tempPromptTrigger( wsysf.aff_tracking.on_prompt, 1 ) end\n\t\n  wsysf.aff_tracking.set_aff_value( aff, value )\nend\n\t\nfunction wsysf.aff_tracking.remove()\n\twsysf.core.debug.display( 7, gmcp.Char.Afflictions.Remove, \"affs Removed\" )\n\n  for _, v in ipairs(gmcp.Char.Afflictions.Remove) do\n\t\tlocal aff,value = get_affs_value( v )\n\t\t\n\t\t-- Track affs that have been lost, and clear them on the next prompt\n\t\twsysf.aff_tracking.lost[ aff ] = wsysf.affs[aff] or value\n\t\tif not wsysf.aff_tracking.on_prompt_id then wsysf.aff_tracking.on_prompt_id = tempPromptTrigger( wsysf.aff_tracking.on_prompt, 1 ) end\n\t\t\n\t\tif type(value) == \"number\" and value > 1 then\n\t\t\t-- When stackable affs are reduced, you get removed \"aff (#)\" where # is the previous number of stacks. \n\t\t\t-- Assume we removed one stack, except for special cases\n\t\t\tif stackables[aff] and stackables[aff].doublecure_at and value >= stackables[aff].doublecure_at then\n\t\t\t\tvalue = value - 1\n\t\t\tend\n\t\t\tvalue = value - 1\n\t\t\t\n\t\telse\n\t\t\tvalue = nil\n\t\tend\n\t\t\n  \twsysf.affs[aff] = value or nil\n\t\twsysf.core.debug.print( 5, \"Aff: \"..aff..\"=\"..tostring(wsysf.affs[aff]) )\n  \traiseEvent(\"wsysf lost aff\", aff)\n  end\nend\n\t\nfunction wsysf.aff_tracking.list()\n  local newaffs = {}\n  local addedaffs, lostaffs = {}, {}\n\t\n\twsysf.core.debug.display( 7, gmcp.Char.Afflictions.List, \"Aff List\" )\n\t\n  for _, v in ipairs(gmcp.Char.Afflictions.List) do\n\t\tlocal aff,value,has_value = get_affs_value( v.name )\n\t\t\n\t\t-- For stackable affs, the list just gives \"aff\", no (#). Should keep the old number if we have it\n    newaffs[aff] = value\n    if wsysf.affs[aff] ~= value then\n      \n\t\t\tif type(wsysf.affs[aff]) == \"number\" and wsysf.affs[aff] > 0 and not has_value then\n\t\t\t\tnewaffs[aff] = wsysf.affs[aff]\n\t\t\telse\n\t\t\t\taddedaffs[#addedaffs + 1] = aff\n\t\t\tend\n    end\n\t\t\n\t\t-- Check for custom diagnose lines if we don't get stack info from gmcp\n\t\tif wsysf.aff_tracking.diagnose_lines[aff] then\n\t\t\tlocal trigger_id = tempRegexTrigger( wsysf.aff_tracking.diagnose_lines[aff].regex_line, wsysf.aff_tracking.diagnose_lines[aff].func, 1 )\n\t\t\t\n\t\t\techo(\"Added trigger for \"..aff..\" \"..trigger_id )\n\t\t\t\n\t\t\ttable.insert(wsysf.aff_tracking.trigger_ids, trigger_id) \n\t\tend\n  end\n  for aff in pairs(wsysf.affs) do\n    if not newaffs[aff] then\n      lostaffs[#lostaffs + 1] = aff\n    end\n  end\n  wsysf.affs = newaffs\n  for _, aff in pairs(lostaffs) do\n    raiseEvent(\"wsysf lost aff\", aff)\n  end\n  for _, aff in ipairs(addedaffs) do\n    raiseEvent(\"wsysf got aff\", aff)\n  end\nend\n\t\nfor _,id in pairs(wsysf.aff_tracking.ids) do\n\tkillAnonymousEventHandler( id )\nend\n\n-- EVENT HANDLERS\nwsysf.aff_tracking.ids.add =\n\tregisterAnonymousEventHandler(\"gmcp.Char.Afflictions.Add\", \"wsysf.aff_tracking.add\")\nwsysf.aff_tracking.ids.remove =\n\tregisterAnonymousEventHandler(\"gmcp.Char.Afflictions.Remove\", \"wsysf.aff_tracking.remove\")\nwsysf.aff_tracking.ids.list =\n\tregisterAnonymousEventHandler(\"gmcp.Char.Afflictions.List\", \"wsysf.aff_tracking.list\")\n\t\n\t\n-- If value is a number, it stays a number. If value is true, return 1. Otherwise 0\nlocal get_aff_count = function( value )\n\tif not value then\n\t\treturn 0\n\telse\n\t\treturn value and tonumber(value) or 1\n\tend\nend\n\t\nfunction wsysf.aff_tracking.stack_up( aff, count )\n\tif wsysf.affs[aff] then\n\t-- Assume we only get these messages if we already know about them\n\t\t\n\t\tcount = count or 1\n\t\t-- If we just gained this, the count may not match what we expect.\n\t\t-- E.g. gaining tenonds gives torntendons (1), even if focused precision\n\t\tcount = count - get_aff_count( wsysf.aff_tracking.new[aff] )\n\t\t\n\t\tif count > 0 then\n\t\t\tlocal new_count = wsysf.affs[aff] + count\n\t\t\t\n\t\t\t-- Some stackable affs have a hard upper limit.\n\t\t\tif stackables[aff] and stackables[aff].max and new_count > stackables[aff].max then\n\t\t\t\tnew_count = stackables[aff].max\n\t\t\tend\t\n\t\t\t\n\t\t\twsysf.affs[aff] = new_count\n\t\t\t-- Add count to the aff count, with an optional max limit\n  \t\twsysf.core.debug.print(5, aff..\"=\"..wsysf.affs[aff] )\n  \t\t\n  \t\traiseEvent( \"wsysf got aff\", aff )\n\t\tend\n\tend\nend\n\nfunction wsysf.aff_tracking.stack_down( aff, count )\n\tif wsysf.affs[aff] then\n\t-- Assume we only get these messages if we already know about them\n\t\t\n\t\tcount = count or 1\n\n\t\t-- We shouldn't be using stack down with gmcp, should we?\n\t\tif wsysf.aff_tracking.lost[aff] then\n\t\t\tcecho(\"<red>Wsysf: stack_down( \"..aff..\" ) but gmcp lost it?\")\n\t\t\twsysf.core.debug.print(1, \"stack_down( \"..aff..\" ) but gmcp lost it?\")\n\t\telseif wsysf.affv[aff] > 1 then\n\t\t\twsysf.affs[aff] = wsysf.affv[aff] - count\n\t\t\t\n\t\t\twsysf.core.debug.print(5, aff..\"=\"..wsysf.affs[aff] )\n\t\t\traiseEvent( \"wsysf lost aff\", aff )\n\t\telse\n\t\t\twsysf.core.debug.print(2, \"stack_down( \"..aff..\" ) at 1 stack?: \"..tostring(wsysf.affs[aff]))\n\t\tend\n\tend\nend\n",
    "eventHandlerList": null
}