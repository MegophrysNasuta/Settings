{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "alias",
    "name": "Check Room Security",
    "script": "opsec = (opsec or {})\nopsec.checkWormholesAlways = false\nopsec.checkedRooms = (opsec.checkedRooms or {})\nopsec.checkedSlots = {}\n\nopsec.doCommand = function(cmds)\n  if opsec.wait then\n    cecho('Pausing opsec run temporarily...')\n    opsec.wait = false\n    local wait_for = 8\n    if not opsec.checkWormholes and not opsec.checkWormholesAlways then\n      wait_for = 4\n    end\n    opsec.runTimer = tempTimer(wait_for, function() opsec.doCommand(cmds) end)\n  else\n    if table.is_empty(cmds) then\n      killTimer(opsec.runTimer)\n      cecho('\\nOpsec run finished!\\n')\n      expandAlias('opsec display')\n      opsec.checkWormholes = true\n      if opsec.lastPose then send('pose '.. opsec.lastPose) end\n      opsec.posed = false\n      return\n    end\n    if not opsec.posed then\n      send('pose')\n      send('pose Scribbling notes, ^ is here, eyeing the totem '..\n           'up and down and tut-tutting.')\n      opsec.posed = true\n    end\n    if gmcp.Room.Players and #gmcp.Room.Players > 1 then\n      send('em scribbles some notes while glancing at a totem, '..\n           'before busily hurrying off.')\n    end\n    expandAlias('opsec')\n    local timer_in = 3.5\n    if cmds[#cmds]:starts('goto') then\n      expandAlias(cmds[#cmds])\n      timer_in = 5\n    else\n      send(cmds[#cmds])\n    end\n    table.remove(cmds, #cmds)\n    if not opsec.checkWormholes and not opsec.checkWormholesAlways then\n      if timer_in == 5 then timer_in = 2.75 else timer_in = 1.75 end\n    end\n    opsec.runTimer = tempTimer(timer_in, function() opsec.doCommand(cmds) end)\n  end\nend\n\nif matches[2] == 'display' then\n  for roomID, info in pairs(opsec.checkedRooms) do\n    cecho('\\nAt '.. info.name ..' ('.. roomID ..'):\\n')\n    for _, problem in pairs(info.report) do\n      cecho('\\t'.. problem ..'\\n')\n    end\n  end\n  cecho('\\nWormholes found:\\n')\n  display(opsec.wormholes)\nelseif matches[2] == 'logreport' then\n  local report = 'Totems damaged at: '\n  if #opsec.checkedRooms then\n    for roomID, info in pairs(opsec.checkedRooms) do\n      report = report .. info.name .. ' ('.. roomID ..'); '\n    end\n    --cecho('\\n'.. report ..'\\n')\n    send('writelog '.. gmcp.Char.Status.city:lower() ..' '.. report)\n  end\nelseif matches[2] == 'reset' then\n  opsec.checkedRooms = {}\n  opsec.wormholes = {}\n  cecho('\\n<cyan>opsec.checkedRooms and opsec.wormholes reset\\n')\nelse  \n  enableTrigger('opsec_checktotem_runes')\n  enableTrigger('opsec_checktotem_loyalty')\n  enableTrigger('opsec_checktotem_empower')\n  enableTrigger('opsec_checkmono_flame')\n  enableTrigger('opsec_missing_item')\n  enableTrigger('opsec_grossshitonground')\n  enableTrigger('opsec_yeswormhole')\n  \n  opsec.totem_empowered = 0\n  opsec.flame_rune_found = 0\n  \n  sendAll('p totem', 'p monolith')\n  if opsec.checkWormholes or opsec.checkWormholesAlways then\n    send('wormholes')\n  end\n  \n  tempTimer(.75, function()\n    local roomId = gmcp.Room.Info.num\n    local report = {}\n    if (opsec.flame_rune_found == 0) then\n      cecho('\\n<red>Monolith sigil at '.. gmcp.Room.Info.name ..' missing flame rune!')\n    end\n    disableTrigger('opsec_checktotem_runes')\n    disableTrigger('opsec_checktotem_loyalty')\n    disableTrigger('opsec_checktotem_empower')\n    disableTrigger('opsec_checkmono_flame')\n    disableTrigger('opsec_missing_item')\n    disableTrigger('opsec_grossshitonground')\n    disableTrigger('opsec_yeswormhole')\n    local checkSlot = 1\n    while checkSlot <= 6 do \n      local slotVal = opsec.checkedSlots[tostring(checkSlot)]\n      if slotVal ~= 'OK' then\n        report[checkSlot] = 'slot '.. tostring(checkSlot) ..' has '.. (slotVal or 'been smudged')\n      end\n      checkSlot = checkSlot + 1\n    end\n    \n    if (opsec.totem_empowered == 0) then\n      cecho('<cyan>TOTEM SETUP WARNING: Totem not empowered.')\n      --report[#report + 1] = \"Totem not empowered\"\n    end\n    \n    if #report > 0 then\n      opsec.checkedRooms[roomId] = {\n        name = gmcp.Room.Info.name,\n        report = report\n      }\n    end\n  end)\nend\n\nif not (opsec.checkWormholes == true or opsec.checkWormholes == false) then\n  opsec.checkWormholes = true\nend",
    "command": null,
    "packageName": null,
    "regex": "^opsec(?: (display|reset|logreport))?$"
}