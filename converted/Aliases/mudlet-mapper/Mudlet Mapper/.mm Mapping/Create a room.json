{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "alias",
    "name": "Create a room",
    "script": "local m = matches[2]\nif m:starts(\"feature\") then\n  -- another alias was meant.\n  return\nend\nlocal rid, rname\nif mmp.roomexists(mmp.currentroom) then\n  rid, rname = mmp.currentroom, mmp.currentroomname\nend\nlocal x, y, z\n\nlocal function set(newid)\n  -- small func to set things\n  local rid = newid or createRoomID()\n  addRoom(rid)\n  setRoomCoordinates(rid, x, y, z)\n  if mmp.roomexists(mmp.currentroom) then\n    setRoomArea(rid, getRoomArea(mmp.currentroom))\n  end\n  if mmp.roomexists(mmp.currentroom) then\n    setRoomEnv(rid, getRoomEnv(mmp.currentroom))\n  end\n  setExit(mmp.currentroom, rid, m)\n  mmp.echo(string.format(\"Created new room (%d) at %dx, %dy, %dz.\\n\", rid, x, y, z))\n  centerview(mmp.roomexists(mmp.currentroom) and mmp.currentroom or rid)\n  if not mmp.roomexists(mmp.currentroom) then\n    mmp.currentroom = rid;\n    mmp.currentroomname = \"\"\n  end\nend\n\n-- let's be flexible and allow several ways if giving an arg\n-- rc v# x y z\nnewid, x, y, z = string.match(m, \"v(%d+) (%-?%d+) (%-?%d+) (%-?%d+)\")\nif x then\n  set(newid);\n  return\nend\n-- rc x y z\nx, y, z = string.match(m, \"(%-?%d+) (%-?%d+) (%-?%d+)\")\nif x then\n  set();\n  return\nend\nif not rid then\n  mmp.echo(\"Don't know where we are at the moment in order to use relative coordinates.\")\n  return\nend\n-- rc xx? yy? zz?\nx, y, z = string.match(m, \"(%-?%d+)x\"), string.match(m, \"(%-?%d+)y\"), string.match(m, \"(%-?%d+)z\")\nif x or y or z then\n  -- merge w/ old coords if any are missing\n  local ox, oy, oz = getRoomCoordinates(rid)\n  x = x or ox;\n  y = y or oy;\n  z = z or oz\n  set();\n  return\nend\n-- rc left/west, right/east, ...\nlocal ox, oy, oz = getRoomCoordinates(rid)\nlocal has = table.contains\nfor w in string.gmatch(m, \"%a+\") do\n  if has({\"west\", \"left\", \"w\", \"l\"}, w) then\n    x = (x or ox) - 1;\n    y = (y or oy);\n    z = (z or oz)\n  elseif has({\"east\", \"right\", \"e\", \"r\"}, w) then\n    x = (x or ox) + 1;\n    y = (y or oy);\n    z = (z or oz)\n  elseif has({\"north\", \"top\", \"n\", \"t\"}, w) then\n    x = (x or ox);\n    y = (y or oy) + 1;\n    z = (z or oz)\n  elseif has({\"south\", \"bottom\", \"s\", \"b\"}, w) then\n    x = (x or ox);\n    y = (y or oy) - 1;\n    z = (z or oz)\n  elseif has({\"northwest\", \"topleft\", \"nw\", \"tl\"}, w) then\n    x = (x or ox) - 1;\n    y = (y or oy) + 1;\n    z = (z or oz)\n  elseif has({\"northeast\", \"topright\", \"ne\", \"tr\"}, w) then\n    x = (x or ox) + 1;\n    y = (y or oy) + 1;\n    z = (z or oz)\n  elseif has({\"southeast\", \"bottomright\", \"se\", \"br\"}, w) then\n    x = (x or ox) + 1;\n    y = (y or oy) - 1;\n    z = (z or oz)\n  elseif has({\"southwest\", \"bottomleft\", \"sw\", \"bl\"}, w) then\n    x = (x or ox) - 1;\n    y = (y or oy) - 1;\n    z = (z or oz)\n  elseif has({\"up\", \"u\"}, w) then\n    x = (x or ox);\n    y = (y or oy);\n    z = (z or oz) + 1\n  elseif has({\"down\", \"d\"}, w) then\n    x = (x or ox);\n    y = (y or oy);\n    z = (z or oz) - 1\n  end\nend\nif x then\n  set();\n  return\nend\nmmp.echo(\n  [[Where do you want to move the room to?\n  You can use direct coordinates or relative directions.]]\n)",
    "command": null,
    "packageName": null,
    "regex": "^(?:rlc|room create) (.+)?$"
}