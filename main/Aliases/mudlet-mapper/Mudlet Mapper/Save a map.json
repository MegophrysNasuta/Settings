{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "alias",
    "name": "Save a map",
    "script": "local function s(location, format)\n  local savednormal, savedjson = \"not saved\", \"not saved\"\n  if format == \"json\" then\n    savedjson = saveJsonMap(location)\n  elseif format == \"all\" then\n    savedjson = saveJsonMap(location)\n    savednormal = saveMap(location)\n  elseif format == nil or format == \"\" then\n    savednormal = saveMap(location)\n  end\n\n  if savednormal == nil then\n    mmp.echo(\"Couldn't save the map :(\")\n  elseif savednormal == true then\n    mmp.echo(location ~= \"\" and \"Map saved.\" or \"Saved the default map.\")\n  end\n  if savedjson == nil then\n    mmp.echo(\"Couldn't save the JSON map :(\")\n  elseif savedjson == true then\n    mmp.echo(location ~= \"\" and \"Map saved in JSON.\" or \"Saved the default map in JSON.\")\n  end\nend\n\nif matches[2] and (matches[2] == \"json\" or matches[2] == \"all\") and not saveJsonMap then\n  mmp.echo(\"Your Mudlet can't save maps in JSON, please upgrade first.\")\n  return\nend\nif matches[3] and matches[3] == \"custom\" then\n  s(\n    invokeFileDialog(false, \"Please select the folder to save the map in and hit Open\") ..\n    \"/Mudlet map from \" ..\n    os.date(\"%A %d, %b '%y\") ..\n    \".dat\",\n    matches[2]\n  )\nelseif matches[3] then\n  s(getMudletHomeDir() .. \"/map/\" .. matches[3], matches[2])\nelse\n  s(\"\", matches[2])\nend",
    "command": null,
    "packageName": null,
    "regex": "^map save(?: (json|all))?(?: (.+))?$"
}