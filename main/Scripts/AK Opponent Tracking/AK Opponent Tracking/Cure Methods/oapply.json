{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "oapply",
    "packageName": null,
    "script": "function ak.cure.apply(what) \n\t if ak.timers.salvebackup then killTimer(ak.timers.salvebackup) end\n   if aksalvechange then killTimer(aksalvechange) end\n   if akrestoration then killTimer(akrestoration) end\n   applycure = applycure or {} \n   if applycure.lastapplied then\n      AKcalculateSalve()\n   end\n\t if what ~= \"none\" then\n\t \t\tak.enemyprio.applied(what)\n      ak.cure.lastapplied = what\n      ak.randomaffs = ak.randomaffs or 0\n      applycure = {}\n      applycure.aknextsalve = false\n      applycure.lastapplied = what\n      applycure.affoverone = {}\n      applycure.affovertwo = {}\n      applycure.affoverthree = {}\n      applycure.affoverfour = {}\n      applycure.affoverfive = {}\n      applycure.affoversix = {}\n      applycure.donotrecount = {}\n      applycure.possiblemendings = {}\n      applycure.mendingscore = 0\n      applycure.possiblerestorations = {}\n      applycure.restorationscore = 0\n      applycure.totalscore = 0\n      applycure.both = {}\n      applycure.otableadd = \"applied\"..what\n      for i = 1, #affstrack.applied[what] do\n         --display( affstrack.applied[what][i])--probable cures  \n         --display(affstrack.score[affstrack.applied[what][i]])     \n         if affstrack.score[affstrack.applied[what][i]] > 0 and affstrack.applied[what][i] ~= \"frozen\" and affstrack.applied[what][i] ~= \"aflame\" and (affstrack.score[affstrack.applied[what][i]] > 100 or affstrack.applied[what][i] == \"head\" or affstrack.applied[what][i] == \"torso\" or affstrack.applied[what][i] == \"hypothermia\") then\n            table.insert(applycure.possiblerestorations, affstrack.applied[what][i])\n            table.insert(applycure.both, affstrack.applied[what][i])\n            table.insert(applycure.donotrecount, affstrack.applied[what][i]) \n\t\t\t\t\t\tif affstrack.score[affstrack.applied[what][i]] < 200 then\n\t\t\t\t\t\t\ttable.insert(applycure.possiblemendings, affstrack.applied[what][i]) \n\t\t\t\t\t\t\tapplycure.mendingscore = affstrack.score[affstrack.applied[what][i]] + applycure.mendingscore \n\t\t\t\t\t\tend\n            applycure.restorationscore = affstrack.score[affstrack.applied[what][i]] + applycure.restorationscore\n            applycure.totalscore  =  affstrack.score[affstrack.applied[what][i]] + applycure.totalscore\n            AKBackupSalveNumber(affstrack.applied[what][i])\n         elseif affstrack.score[affstrack.applied[what][i]] > 100 and (affstrack.applied[what][i] == \"frozen\" or affstrack.applied[what][i] == \"aflame\") then\n            table.insert(applycure.possiblemendings, affstrack.applied[what][i]) \n            table.insert(applycure.both, affstrack.applied[what][i])\n            table.insert(applycure.donotrecount, affstrack.applied[what][i]) \n            applycure.mendingscore = affstrack.score[affstrack.applied[what][i]] + applycure.mendingscore  \n            applycure.totalscore  =  affstrack.score[affstrack.applied[what][i]] + applycure.totalscore \n            AKBackupSalveNumber(affstrack.applied[what][i])\n         elseif affstrack.score[affstrack.applied[what][i]] > 0 then\n            table.insert(applycure.possiblemendings, affstrack.applied[what][i]) \n            table.insert(applycure.both, affstrack.applied[what][i])\n            table.insert(applycure.donotrecount, affstrack.applied[what][i]) \n            applycure.mendingscore = affstrack.score[affstrack.applied[what][i]] + applycure.mendingscore  \n            applycure.totalscore  =  affstrack.score[affstrack.applied[what][i]] + applycure.totalscore     \n         end\n      end\n      for k,v in pairs(affstrack.applied) do\n         for i=1, #affstrack.applied[k] do\n            if not table.contains(applycure.donotrecount, affstrack.applied[k][i]) and affstrack.score[affstrack.applied[k][i]] > 0 then\n\t\t\t\t\t\t\t applycure.totalscore  =  affstrack.score[affstrack.applied[k][i]] + applycure.totalscore \n            end\n         end\n      end\n      applycure.totalscore = applycure.totalscore / 100\n      applycure.mendingscore = applycure.mendingscore / 100\n      applycure.restorationscore = applycure.restorationscore / 100\n      if applycure.totalscore <= 1 and applycure.totalscore > 0 then --only one confirmed apply coming\n         if #applycure.possiblemendings == 0 then\n            applycure.aknextsalve = \"restoration\"\n            if akrestoration then killTimer(akrestoration) end\n            akrestoration = tempTimer(3.5,[[ak.cure.apply(\"none\");affstrack.score.tempslickness = 0;ak.scoreup(target)]])\n            affstrack.score.tempslickness = 100      \n         elseif #applycure.possiblerestorations == 0 then\n            applycure.aknextsalve = \"mending\"\n            ak.cure.apply(\"none\")\n         else\n            applycure.aknextsalve = \"both\"\n            ak.cure.apply(\"none\")\n         end\n      elseif applycure.totalscore > 0 then                          --MORE CURES COMING!\n\t\t\t\t if ak.timers.salvebackup then killTimer(ak.timers.salvebackup) end\n         ak.timers.salvebackup = tempTimer(5,[[ak.cure.salveBackup()]])\n         if applycure.restorationscore > 0 and applycure.mendingscore > 0 then\n            applycure.aknextsalve = \"mending\"\n\t\t\t\t\t\tif affstrack.score.crushedthroat == 100 and what == \"head\" then\n\t\t\t\t\t\t\tak.cure.apply(\"none\")\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\tend\n            if aksalvechange then killTimer(aksalvechange) end\n            aksalvechange = tempTimer(2.5,[[\n               if affstrack.score.slickness == 0 then\n                  applycure.aknextsalve = \"restoration\"\n               end\n            ]])\n         elseif applycure.restorationscore > 0 and applycure.mendingscore == 0 then\t \n            applycure.aknextsalve = \"restoration\"\n            affstrack.score.tempslickness = 100  \n            if aksalvechange then killTimer(aksalvechange) end\n         elseif applycure.restorationscore == 0 and applycure.mendingscore > 0 then\n            applycure.aknextsalve = \"mending\"\n            ak.cure.apply(\"none\")\n         end\n\t\t  elseif applycure.lastapplied == \"body\" and applycure.totalscore == 0 and affstrack.score.impatience == 100 then\n\t\t\t\t if ak.thoughtIhad then ak.thoughtIhad(\"impatience\") else affstrack.score.impatience = 0 end\n\t\t\t\t affstrack.score.anorexia = 0 \n      elseif applycure.lastapplied ~= \"skin\" then\n         if ak.NoPreApply then\n\n         elseif (gmcp.Char.Status.class ~= \"Magi\" or gmcp.Char.Status.race:match(\"Dragon\")) then         \n            applycure.aknextsalve = \"restoration\"\n            if akrestoration then killTimer(akrestoration) end\n            akrestoration = tempTimer(3.5,[[ak.cure.apply(\"none\");affstrack.score.tempslickness = 0;ak.scoreup(target)]])\n            affstrack.score.tempslickness = 100  \n         end\n\t\t\telseif applycure.lastapplied == \"skin\" then\n\t\t\t\tapplycure.lastapplied = nil\t \n      end\n   else\n      applycure = {}\n      applycure.aknextsalve = nil\n      applycure.lastapplied = nil\n      applycure.affoverone = {}\n      applycure.affovertwo = {}\n      applycure.affoverthree = {}\n      applycure.affoverfour = {}\n      applycure.affoverfive = {}\n      applycure.affoversix = {}\n      applycure.donotrecount = {}\n      applycure.possiblemendings = {}\n      applycure.mendingscore = 0\n      applycure.possiblerestorations = {}\n      applycure.restorationscore = 0\n      applycure.totalscore = 0\n      applycure.both = {}\n   end\n   ak.scoreup(target)\nend\n\nfunction ak.cure.salveBackup()\n\tif affstrack.score.slickness == 0 then\n\t\tak.cure.apply(\"none\")\n\t\tcecho(\"\\n<cyan>They are not applying salves. Forcing previous restoration cure through.\\n\")\n\telse\n\t\tif ak.timers.salvebackup then killTimer(ak.timers.salvebackup) end\n    ak.timers.salvebackup = tempTimer(1,[[ak.cure.salveBackup()]])\n\tend\nend\n\n\nfunction AKcalculateSalve()\n\t if ak.debug then \n\t \tdisplay(\"applycure\")\n\t\tdisplay(applycure)\n\t end\n   local affs = {}\n   ak.cure.lastapplied = what\n   ak.randomaffs = ak.randomaffs or 0\n   applycure = applycure or {}\n   applycure.aknextsalve = applycure.aknextsalve or \"restoration\"\n   applycure.lastapplied = applycure.lastapplied or \"torso\"\n   applycure.affoverone = {}\n   applycure.affovertwo = {}\n   applycure.affoverthree = {}\n   applycure.affoverfour = {}\n   applycure.affoverfive = {}\n   applycure.affoversix = {}\n   applycure.donotrecount = {}\n   applycure.possiblemendings = {}\n   applycure.mendingscore = 0\n   applycure.possiblerestorations = {}\n   applycure.restorationscore = 0\n   applycure.totalscore = 0\n   applycure.both = {}\n   applycure.otableadd = \"applied\"..applycure.lastapplied\n   ocured = ocured or {}\n   ocured[applycure.otableadd] = {} \n   local ToBeCleared = {}\n      for i = 1, #affstrack.applied[applycure.lastapplied] do\n         --display( affstrack.applied[applycure.lastapplied][i])--probable cures         \n         if affstrack.score[affstrack.applied[applycure.lastapplied][i]] > 0 and affstrack.applied[applycure.lastapplied][i] ~= \"frozen\" and affstrack.applied[applycure.lastapplied][i] ~= \"aflame\" and (affstrack.score[affstrack.applied[applycure.lastapplied][i]] > 100 or affstrack.applied[applycure.lastapplied][i] == \"head\" or affstrack.applied[applycure.lastapplied][i] == \"torso\" or affstrack.applied[applycure.lastapplied][i] == \"hypothermia\") then\n            table.insert(ToBeCleared, affstrack.applied[applycure.lastapplied][i])\n            table.insert(applycure.possiblerestorations, affstrack.applied[applycure.lastapplied][i])\n            table.insert(applycure.both, affstrack.applied[applycure.lastapplied][i])\n            table.insert(applycure.donotrecount, affstrack.applied[applycure.lastapplied][i]) \n            applycure.restorationscore = affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.restorationscore\n            applycure.totalscore  =  affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.totalscore\n            AKBackupSalveNumber(affstrack.applied[applycure.lastapplied][i])\n         elseif affstrack.score[affstrack.applied[applycure.lastapplied][i]] > 100 and (affstrack.applied[applycure.lastapplied][i] == \"frozen\" or affstrack.applied[applycure.lastapplied][i] == \"aflame\") then                   \n            table.insert(applycure.possiblemendings, affstrack.applied[applycure.lastapplied][i]) \n            table.insert(applycure.both, affstrack.applied[applycure.lastapplied][i])\n            table.insert(applycure.donotrecount, affstrack.applied[applycure.lastapplied][i]) \n            applycure.mendingscore = affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.mendingscore  \n            applycure.totalscore  =  affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.totalscore \n            AKBackupSalveNumber(affstrack.applied[applycure.lastapplied][i])\n         elseif affstrack.score[affstrack.applied[applycure.lastapplied][i]] > 0 then\n            table.insert(applycure.possiblemendings, affstrack.applied[applycure.lastapplied][i]) \n            table.insert(applycure.both, affstrack.applied[applycure.lastapplied][i])\n            table.insert(applycure.donotrecount, affstrack.applied[applycure.lastapplied][i]) \n            applycure.mendingscore = affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.mendingscore  \n            applycure.totalscore  =  affstrack.score[affstrack.applied[applycure.lastapplied][i]] + applycure.totalscore     \n         end\n      end\n      applycure.totalscore = applycure.totalscore / 100\n      applycure.mendingscore = applycure.mendingscore / 100\n      applycure.restorationscore = applycure.restorationscore / 100\n   if applycure.aknextsalve ~= \"both\" then\n      if applycure.aknextsalve == \"mending\" and applycure.mendingscore > 0 then\n         for i = 1, #applycure.possiblemendings do\n            ocured[applycure.otableadd][applycure.possiblemendings[i]] = affstrack.score[applycure.possiblemendings[i]] \n            table.insert(affs, applycure.possiblemendings[i])\n         end\n      elseif applycure.aknextsalve == \"restoration\" and applycure.restorationscore > 0 then\n         for i = 1, #applycure.possiblerestorations do\n            ocured[applycure.otableadd][applycure.possiblerestorations[i]] = affstrack.score[applycure.possiblerestorations[i]] \n            table.insert(affs, applycure.possiblerestorations[i])\n         end\n      else\n         applycure.aknextsalve = \"both\"\n         for i = 1, #applycure.possiblerestorations do\n            ocured[applycure.otableadd][applycure.possiblerestorations[i]] = affstrack.score[applycure.possiblerestorations[i]] \n            table.insert(affs, applycure.possiblerestorations[i])\n          end\n         for i = 1, #applycure.possiblemendings do\n            ocured[applycure.otableadd][applycure.possiblemendings[i]] = affstrack.score[applycure.possiblemendings[i]] \n            table.insert(affs, applycure.possiblemendings[i])\n         end\n      end\n   elseif applycure.aknextsalve == \"both\" then\n      for i = 1, #applycure.possiblerestorations do\n         ocured[applycure.otableadd][applycure.possiblerestorations[i]] = affstrack.score[applycure.possiblerestorations[i]] \n         table.insert(affs, applycure.possiblerestorations[i])\n      end\n      for i = 1, #applycure.possiblemendings do\n         ocured[applycure.otableadd][applycure.possiblemendings[i]] = affstrack.score[applycure.possiblemendings[i]] \n         table.insert(affs, applycure.possiblemendings[i])\n      end\n   end\n   --display(affs)\n   --display(affstrack.score[affs[1]])\n   if #affs == 1 and affstrack.score[affs[1]] < 100 then\n      if #ToBeCleared > 0 then\n         for i = 1, #ToBeCleared do\n            ak.limbs.CountAgain(ToBeCleared[i])\n         end\n      end\n      ocured[applycure.otableadd] = {}\n      if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end\n      ocured[applycure.otableadd] = {}\n      ocured[applycure.otableadd][affs[1]] = 100\n   end\n   if #affs > 0 then\n      AKleftcuresfirst(affs)\n      if #ToBeCleared > 0 then\n         for i = 1, #ToBeCleared do\n            ak.limbs.CountAgain(ToBeCleared[i])\n         end\n      end\n      ak.echoForPossibleCures(table.concat(affs, \" \"))\n      for i = 1, #affs do\n         reduceSalveAff(affs[i])\n         affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / #affs\n         if affstrack.score[affs[i]] < ak.errorallowance then\n            affstrack.score[affs[i]] = 0\n\t\t\t\t\t\tak.AfflictionCured(affs[i])\n         end\n         if table.contains(applycure.affoverone, affs[i]) then\n            affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n            if table.contains(applycure.affovertwo, affs[i]) then\n               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n               if table.contains(applycure.affoverthree, affs[i]) then\n                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                  if table.contains(applycure.affoverfour, affs[i]) then\n                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                     if table.contains(applycure.affoverfive, affs[i]) then\n                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                        if table.contains(applycure.affoversix, affs[i]) then\n                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                        end\n                     end\n                  end\n               end\n            end \n         end\n      end\n      if affstrack.score.aflame == 0 and affstrack.score.conflagrate == 100 then affstrack.score.conflagrate = 0;akadsty = 1 end\n      if affstrack.score.hypothermia == 100 and affstrack.score.frozen == 0 then affstrack.score.hypothermia = 0 end\n   elseif ak.randomaffs > 0 then\n      ak.randomaffs = ak.randomaffs - 1\n   else\n\n   end\n   applycure.lastapplied = nil\n   affstrack.score.tempslickness = 0 \n   ak.scoreup(target)\nend\n\n\n\nfunction AKBackupSalveNumber(aff)\n   local resetcure = tonumber(affstrack.score[aff])\n   if affstrack.score[aff] > 100 then\n      table.insert(applycure.affoverone, aff) \n      affstrack.score[aff] = affstrack.score[aff] - 100\n      if affstrack.score[aff] > 100 then\n        table.insert(applycure.affovertwo, aff) \n        affstrack.score[aff] = affstrack.score[aff] - 100\n        if affstrack.score[aff] > 100 then\n           table.insert(applycure.affoverthree, aff) \n           affstrack.score[aff] = affstrack.score[aff] - 100\n           if affstrack.score[aff] > 100 then\n              table.insert(applycure.affoverfour, aff) \n              affstrack.score[aff] = affstrack.score[aff] - 100\n              if affstrack.score[aff] > 100 then\n                 table.insert(applycure.affoverfive, aff) \n                 affstrack.score[aff] = affstrack.score[aff] - 100\n                 if affstrack.score[aff] > 100 then\n                    table.insert(applycure.affoversix, aff) \n                    affstrack.score[aff] = affstrack.score[aff] - 100\n                 end\n              end\n           end\n        end\n      end\n   end\n   affstrack.score[aff] = tonumber(resetcure)\nend\nfunction reduceSalveAff(aff)\n   if affstrack.score[aff] > 100 then\n      affstrack.score[aff] = affstrack.score[aff] - 100\n      if affstrack.score[aff] > 100 then\n        affstrack.score[aff] = affstrack.score[aff] - 100\n        if affstrack.score[aff] > 100 then\n           affstrack.score[aff] = affstrack.score[aff] - 100\n           if affstrack.score[aff] > 100 then\n              affstrack.score[aff] = affstrack.score[aff] - 100\n              if affstrack.score[aff] > 100 then\n                 affstrack.score[aff] = affstrack.score[aff] - 100\n                 if affstrack.score[aff] > 100 then\n                    affstrack.score[aff] = affstrack.score[aff] - 100\n                 end\n              end\n           end\n        end\n      end\n   end \nend\n\nfunction AKleftcuresfirst(affs)\n   if table.contains(affs,\"rightleg\") and table.contains(affs,\"leftleg\") then \n      for i=1, #affs do\n         if affs[i] == \"rightleg\" then\n            table.remove(affs,i)\n         end\n      end   \n   elseif table.contains(affs,\"rightarm\") and table.contains(affs,\"leftarm\") then\n      for i=1, #affs do\n         if affs[i] == \"rightarm\" then\n            table.remove(affs,i)\n         end\n      end \n   end\nend",
    "eventHandlerList": null
}