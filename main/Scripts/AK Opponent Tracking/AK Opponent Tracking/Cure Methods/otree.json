{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "otree",
    "packageName": null,
    "script": "function ak.cure.tree()\n\t ak.occie.aura.parsereduct(\"treed\")\n   affs = {}\n   ocured = ocured or {}\n   ocured.treed = {}\n   ak.randomaffs = ak.randomaffs or 0\n   affoverone = {}\n   affovertwo = {}\n   affoverthree = {}\n   affoverfour = {}\n   affoverfive = {}\n   affoversix = {}\n   applycure = applycure or {}\n   if ak.treeableSalve() and applycure.lastapplied and applycure.lastapplied ~= \"head\" and applycure.lastapplied ~= \"torso\" and applycure.aknextsalve ~= \"mending\" then\n      --AKcalculateSalve()\n   end\n   affs = {}\n   ocured = ocured or {}\n   ocured.treed = {}\n   ak.randomaffs = ak.randomaffs or 0\n   affoverone = {}\n   affovertwo = {}\n   affoverthree = {}\n   affoverfour = {}\n   affoverfive = {}\n   affoversix = {}\n   if affstrack.score.paralysis > 0 then\n      if ak.thoughtIhad then ak.thoughtIhad(\"paralysis\") else affstrack.score.paralysis = 0 end\n      ocured.bloodroot = {}\n      ocured = ocured or {}\n      ocured.treed = {}\n   elseif affstrack.score.slickness > 0 then\n     ocured.bloodroot = {}\n   end\n   for i = 1, #affstrack.treed do\n      if affstrack.score[affstrack.treed[i]] > 0 and affstrack.score[affstrack.treed[i]] < 200 and affstrack.treed[i] ~= \"aflame\" and affstrack.treed[i] ~= \"frozen\" then\n         table.insert(affs, affstrack.treed[i]) \n         ocured.treed[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]]     \n         if affstrack.score[affstrack.treed[i]] > 100 then-- and affstrack.score[affstrack.treed[i]] ~= 200 then\n            table.insert(affoverone, affstrack.treed[i]) \n            affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100\n         end\n      elseif affstrack.score.hypothermia == 100 and affstrack.treed[i] == \"frozen\" then\n\n      elseif affstrack.score[affstrack.treed[i]] > 0 and (affstrack.treed[i] == \"aflame\" or affstrack.treed[i] == \"frozen\") then\n         table.insert(affs, affstrack.treed[i]) \n         ocured.treed[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]]\n         if affstrack.score[affstrack.treed[i]] > 100 then\n            table.insert(affoverone, affstrack.treed[i]) \n            affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100\n            if affstrack.score[affstrack.treed[i]] > 100 then\n               table.insert(affovertwo, affstrack.treed[i]) \n               affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100\n               if affstrack.score[affstrack.treed[i]] > 100 then\n                  table.insert(affoverthree, affstrack.treed[i]) \n                  affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100\n                  if affstrack.score[affstrack.treed[i]] > 100 then\n                     table.insert(affoverfour, affstrack.treed[i]) \n                     affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100\n                     if affstrack.score[affstrack.treed[i]] > 100 then\n                        table.insert(affoverfive, affstrack.treed[i]) \n                        affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100\n                        if affstrack.score[affstrack.treed[i]] > 100 then\n                           table.insert(affoversix, affstrack.treed[i]) \n                           affstrack.score[affstrack.treed[i]] = affstrack.score[affstrack.treed[i]] - 100\n                        end\n                     end\n                  end\n               end\n            end\n         end\n      end   \n   end\n   if #affs == 1 and affstrack.score[affs[1]] < 100 and ak.randomaffs == 0 then\n      if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end\n      affstrack.score[affs[1]] = 0\n\t\t\tak.AfflictionCured(affs[1])\n\t\t\tak.ResetConfirmAff(affs[1])\n   elseif #affs > 1 and table.contains(affs,\"impatience\") and FocusCount() >= 100 then\n      ak.echoForPossibleCures(table.concat(affs, \" \"))\n      for i = 1, #affs do\n         if affs[i] ~= \"impatience\" then\n            affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs -1)\n            if affstrack.score[affs[i]] < ak.errorallowance then\n               affstrack.score[affs[i]] = 0\n\t\t\t\t\t\t\t ak.AfflictionCured(affs[i])\n            end     \n            if table.contains(affoverone, affs[i]) then\n               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n               if table.contains(affovertwo, affs[i]) then\n                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                  if table.contains(affoverthree, affs[i]) then\n                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                     if table.contains(affoverfour, affs[i]) then\n                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                        if table.contains(affoverfive, affs[i]) then\n                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                           if table.contains(affoversix, affs[i]) then\n                              affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                           end\n                        end\n                     end\n                  end\n               end \n            end           \n         end\n      end  \n      if affstrack.score.aflame == 0 and affstrack.score.conflagrate == 100 then affstrack.score.conflagrate = 0;akadsty = 1 end\n   elseif #affs > 1 and table.contains(affs,\"asthma\") and SmokeCount() >= 100 then\n      ak.echoForPossibleCures(table.concat(affs, \" \"))\n      for i = 1, #affs do\n         if affs[i] ~= \"asthma\" then\n            affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs -1)\n            if affstrack.score[affs[i]] < ak.errorallowance then\n               affstrack.score[affs[i]] = 0\n\t\t\t\t\t\t\t ak.AfflictionCured(affs[i])\n            end     \n            if table.contains(affoverone, affs[i]) then\n               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n               if table.contains(affovertwo, affs[i]) then\n                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                  if table.contains(affoverthree, affs[i]) then\n                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                     if table.contains(affoverfour, affs[i]) then\n                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                        if table.contains(affoverfive, affs[i]) then\n                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                           if table.contains(affoversix, affs[i]) then\n                              affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                           end\n                        end\n                     end\n                  end\n               end \n            end           \n         end\n      end  \n      if affstrack.score.aflame == 0 and affstrack.score.conflagrate == 100 then affstrack.score.conflagrate = 0;akadsty = 1 end\n   elseif #affs > 0 then\n      ak.echoForPossibleCures(table.concat(affs, \" \"))\n      for i = 1, #affs do\n         --ocured.treed[affs[i]] = affstrack.score[affs[i]]                                       --move me\n         affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / #affs \n         if affstrack.score[affs[i]] < ak.errorallowance then\n            affstrack.score[affs[i]] = 0\n\t\t\t\t\t\tak.AfflictionCured(affs[i])\n         end     \n         if table.contains(affoverone, affs[i]) then\n            affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n            if table.contains(affovertwo, affs[i]) then\n               affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n               if table.contains(affoverthree, affs[i]) then\n                  affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                  if table.contains(affoverfour, affs[i]) then\n                     affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                     if table.contains(affoverfive, affs[i]) then\n                        affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                        if table.contains(affoversix, affs[i]) then\n                           affstrack.score[affs[i]] = affstrack.score[affs[i]] + 100\n                        end\n                     end\n                  end\n               end\n            end \n         end           \n      end  \n      if affstrack.score.aflame == 0 and affstrack.score.conflagrate == 100 then affstrack.score.conflagrate = 0;akadsty = 1 end\n   elseif ak.randomaffs > 0 then\n      AKcalculateSalve()\n      ak.randomaffs = ak.randomaffs - 1\n   else\n      if ak.WhyYouDoThat then ak.WhyYouDoThat(\"treed\") end\n   end\n   ak.scoreup(target)\nend\n\nlocal LimbsToCheck = {\"rightleg\",\"leftleg\",\"rightarm\",\"leftarm\"}\n\nfunction ak.treeableSalve()\n\tif affstrack.score.aflame > 0 then\n\t\treturn true\n\tend\n\tfor i = 1, #LimbsToCheck do\n\t\tif affstrack.score[LimbsToCheck[i]] > 0 and affstrack.score[LimbsToCheck[i]] <= 100 then\n\t\t\treturn true\n\t\telseif affstrack.score[LimbsToCheck[i]] > 100 and affstrack.score[LimbsToCheck[i]] <= 200 and applycure.lastapplied ~= \"torso\" and applycure.lastapplied ~= \"head\" and applycure.aknextsalve ~= \"mending\" then\n\t\t\treturn true\n\t\tend\n\tend\n\n\treturn false\n\nend",
    "eventHandlerList": null
}