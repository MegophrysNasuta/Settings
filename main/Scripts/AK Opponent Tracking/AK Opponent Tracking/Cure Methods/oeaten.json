{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "oeaten",
    "packageName": null,
    "script": "function ak.cure.ate(what,prorun)\n\tak.occie.aura.parsereduct(what)\n   local affs = {}\n   ak.nexteatcheck(what)\n   ak.mickey = false\n   ak.randomaffs = ak.randomaffs or 0\n   ocured = ocured or {}\n   ocured.conversion[what] = ocured.conversion[what] or \"notadded\"\n   ocured[ocured.conversion[what]] = {}\n\t ak.eatsbetweenaffs = ak.eatsbetweenaffs + 1\n   local affconfirmedcount = 0\n   if affstrack.score.anorexia>0 and not prorun then \n      if ak.thoughtIhad then ak.thoughtIhad(\"anorexia\") else affstrack.score.anorexia = 0 end\n      ocured = ocured or {}\n      ocured[ocured.conversion[what]] = {}\n   end\n   if what == \"hawthorn berry\" or what == \"calamine crystal\" then\n      affstrack.score.deaf = 100\n      tempTimer(3,[[affstrack.score.deaf = 0;ak.scoreup(target)]])\n   else\n      for i = 1, #affstrack.eaten[what] do\n         if affstrack.score[affstrack.eaten[what][i]] > 0 then\n            table.insert(affs, affstrack.eaten[what][i])\n            affconfirmedcount = affconfirmedcount + affstrack.score[affstrack.eaten[what][i]]\n         end\n      end\n      if #affs == 1 and affstrack.score[affs[1]] < 100 and ak.randomaffs == 0 then\n         if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end\n         affstrack.score[affs[1]] = 0\n\t\t\t\t ak.AfflictionCured(affs[1])\n\t\t\t\t ak.ResetConfirmAff(affs[1])\n      elseif #affs > 1 and affconfirmedcount <= 100 then\n\t\t\t   if #affs and table.contains(affs,\"slickness\") and affstrack.score.asthma == 100 then\n\t\t\t\t    ak.echoForPossibleCures(table.concat(affs, \" \")) \n\t\t\t\t\t\t--if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end\n\t\t\t\t else\n         \t  if ak.ProTrackingConfirmed then ak.ProTrackingConfirmed(affs[1]) end\n\t\t\t\t end\n         for i = 1, #affs do\n            affstrack.score[affs[i]] = 0\n\t\t\t\t\t\tak.AfflictionCured(affs[i])\n         end\n      elseif #affs > 1 and table.contains(affs,\"impatience\") and ak.goldensealCount() > 100 then\n         ak.echoForPossibleCures(table.concat(affs, \" \"))\n         for i = 1, #affs do            \n            ocured = ocured or {}\n            ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}\n            ocured[ocured.conversion[what]][affs[i]] = affstrack.score[affs[i]]\n            if affs[i] ~= \"impatience\" then\n               affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs-1)\n            end\n            if affstrack.score[affs[i]] < ak.errorallowance then\n                affstrack.score[affs[i]] = 0\n\t\t\t\t\t\t\t\tak.AfflictionCured(affs[i])\n            end\n         end\n      elseif #affs > 1 and table.contains(affs,\"asthma\") and SmokeCount() >= 100 then\n         ak.echoForPossibleCures(table.concat(affs, \" \"))\n         for i = 1, #affs do            \n            ocured = ocured or {}\n            ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}\n            ocured[ocured.conversion[what]][affs[i]] = affstrack.score[affs[i]]\n            if affs[i] ~= \"asthma\" then\n               affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs-1)\n            end\n            if affstrack.score[affs[i]] < ak.errorallowance then\n                affstrack.score[affs[i]] = 0\n\t\t\t\t\t\t\t\tak.AfflictionCured(affs[i])\n            end\n         end\n\t\t\t\n\t\t\telseif #affs > 1 and table.contains(affs,\"slickness\") and affstrack.score.prone == 100 and ak.canstand() then\n         ak.echoForPossibleCures(table.concat(affs, \" \"))\n         for i = 1, #affs do            \n            ocured = ocured or {}\n            ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}\n            ocured[ocured.conversion[what]][affs[i]] = affstrack.score[affs[i]]\n            if affs[i] ~= \"paralysis\" then\n               affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / (#affs-1)\n            end\n            if affstrack.score[affs[i]] < ak.errorallowance then\n                affstrack.score[affs[i]] = 0\n\t\t\t\t\t\t\t\tak.AfflictionCured(affs[i])\n            end\n         end\n\t\t\t\t \n\t\t  elseif #affs == 1 and table.contains(affs,\"slickness\") and affstrack.score.asthma > 0 and affstrack.score.asthma < 100 then\n         ak.echoForPossibleCures(table.concat(affs, \" \"))\n         for i = 1, #affs do            \n            ocured = ocured or {}\n            ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}\n            ocured[ocured.conversion[what]][affs[i]] = affstrack.score[affs[i]]\n            if affstrack.score[affs[i]] < ak.errorallowance then\n                affstrack.score[affs[i]] = 0\n\t\t\t\t\t\t\t\tak.AfflictionCured(affs[i])\n            end\n\t\t\t\t\t\tak.ProTrackingConfirmed(\"asthma\")\n\t\t\t\t\t\tak.ResetConfirmAff(affs[i])\n         end\n\t\t elseif #affs == 1 then\n         ak.echoForPossibleCures(table.concat(affs, \" \"))\n         ocured = ocured or {}\n         ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}\n         ocured[ocured.conversion[what]][affs[1]] = affstrack.score[affs[1]]\n         affstrack.score[affs[1]] = affstrack.score[affs[1]] - affstrack.score[affs[1]] / #affs\n         if affstrack.score[affs[1]] < ak.errorallowance then\n             affstrack.score[affs[1]] = 0\n\t\t\t\t\tak.AfflictionCured(affs[1])\n         end\n\t\t\t   ak.ResetConfirmAff(affs[1])\n      elseif #affs > 0 then\n         ak.echoForPossibleCures(table.concat(affs, \" \"))\n         for i = 1, #affs do\n            ocured = ocured or {}\n            ocured[ocured.conversion[what]] = ocured[ocured.conversion[what]] or {}\n            ocured[ocured.conversion[what]][affs[i]] = affstrack.score[affs[i]]\n            affstrack.score[affs[i]] = affstrack.score[affs[i]] - affstrack.score[affs[i]] / #affs\n            if affstrack.score[affs[i]] < ak.errorallowance then\n                affstrack.score[affs[i]] = 0\n\t\t\t\t\t\t\t\tak.AfflictionCured(affs[i])\n            end\n         end\n      elseif ak.randomaffs > 0 then\n         ak.randomaffs = ak.randomaffs - 1\n      else\n         if ak.WhyYouDoThat then ak.WhyYouDoThat(what) end\n      end\n   end\n   ak.scoreup(target)\nend\n\nfunction ak.goldensealCount()\n\tlocal count = 0\n\tfor i = 1, #affstrack.eaten[\"goldenseal root\"] do\n     if affstrack.score[affstrack.eaten[\"goldenseal root\"][i]] > 0 then\n        count = count + affstrack.score[affstrack.eaten[\"goldenseal root\"][i]]\n     end\n  end\n\treturn count\nend\n\nfunction FocusCount()\n  local count = 0\n  for i = 1, #affstrack.focused do\n      if affstrack.score[affstrack.focused[i]] > 0 then\n         count = count + affstrack.score[affstrack.focused[i]]\n      end\n   end\n   return count\nend\n\nfunction SmokeCount()\n   local count = 0\n   if affstrack.score.aeon > 0 then return 0 end\n   for i = 1, #affstrack.smoked do\n      if affstrack.score[affstrack.smoked[i]] > 0 then\n         count = count + affstrack.score[affstrack.smoked[i]]\n      end\n   end\n   return count\nend\n\nif not ak.nexteatcheck then\n   function ak.nexteatcheck(what)\n\t\tak.lasteat = what\n   end\nend\n\nfunction ak.canstand()\n\tif affstrack.score.rightleg == 0 and affstrack.score.leftleg == 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
    "eventHandlerList": null
}