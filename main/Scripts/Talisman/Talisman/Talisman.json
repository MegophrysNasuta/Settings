{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Talisman",
    "packageName": null,
    "script": "\n\ntalisman = talisman or {}\n\ntalisman.settings = talisman.settings or {}\ntalisman.settings.color = \"CadetBlue\"\n\ntalisman.pieces = talisman.pieces or {}\n--[[\nOld structure\n  greendragonheart = {\n    [\"1\"] = 1,\n    [\"4\"] = 1,\n    [\"2\"] = 1\n  }\nNew structure\n  greendragonheart = {\n    [\"B\"] = 3,\n    [\"Q\"] = 1\n  }\n--]]\n\n\n-- Unknown for when someone transfers one to us, so we can still count it, but dont need to know its total.\ntalisman.types = {promo=\"P\", refine=\"R\", quest=\"Q\", bashing=\"B\", unknown=\"U\", total=\"T\"}\n\n\ntalisman.help = function ()\n\tlocal name\n\tif gmcp then\n\t\tname = gmcp.Char.Status.name:upper()\n\telse\n\t\tname = \"SERAGORN\"\n\tend\n\tcecho(\"<white>USEAGE:\\n\")\n\tcecho(\"<white>TLIST - <reset>Displays a summary list of all known talisman pieces.\\n\")\n\tcecho(\"<white>TCOMPLETE <talisman>- <reset>Splits out the required pieces and completes the given talisman\\n\")\n\tcecho(\"<reset>      - Example: TCOMPLETE AZATLANKNIFE\\n\")\n\tcecho(\"<white>TTRADE <adventurer> <piece> [<count>]\\n\")\n\tcecho(\"<reset>      - Used to trade <count> (defaults to 1) pieces of <piece> to <adventurer>\\n\")\n\tcecho(\"<reset>      - Example: TTRADE \"..name..\" bluedragonscale 20\\n\")\n\tcecho(\"<reset>      - Note: aliases only work after talisman pieces has been checked the first time.\\n\")\n\tcecho(\"<reset>      - After this point it should keep an accurate list of pieces automatically.\\n\")\n\tcecho(\"<white>TTRADE SET <adventurer> <setname>\\n\")\n\tcecho(\"<reset>      - Used to trade all the pieces required to complete <set> to <adventurer>\\n\")\n\tcecho(\"<reset>      - Example: TTRADE SET DRAGON \"..name..\"\\n\")\n\tcecho(\"<white>TTRADE TALISMAN <adventurer> <talismanname>\\n\")\n\tcecho(\"<reset>      - Used to trade all the pieces required to complete a specific <talisman> to <adventurer>\\n\")\n\tcecho(\"<reset>      - Example: TTRADE TALISMAN TRANSOCEANIC \"..name..\"\\n\")\n\tcecho(\"\\n<white>IMPORTANT: No validation is performed on trading complete sets/talismans.\\n\")\n\tcecho(\"<white>This means if you trade an incomplete set you will send some but not all of the pieces.\\n\")\nend\n\ntalisman.echo = function (...)\n\tcecho(string.format(\"<%s>(Talisman): %s\\n\", talisman.settings.color, string.format(...)))\nend\n\ntalisman.deleteLineP = function ()\n  if gss then \n    gss.deleteLineP()\n  elseif svo then\n    svo.deleteLineP()\n  end\nend\n\ntalisman.reset = function ()\n\ttalisman.pieces = {}\nend\n\n-- Function to standardize the names because of the 20 char limit.\ntalisman.getkey = function (longname)\n\treturn talisman.names[longname]\nend\n\n-- Functions to translate level to count and visa versa\ntalisman.counttolevel = function (level)\n\tif (tonumber(level) or 0) <= 0 then\n\t\treturn 1\n\telse\n\t\treturn (math.log(tonumber(level))/math.log(2))+1\n\tend\nend\n\ntalisman.leveltocount = function (level)\n\treturn math.pow(2, (tonumber(level) or 0)-1)\nend\n\n-- type checking for when we want to specifically send a type of talisman piece (promo, refined, etc)\ntalisman.ischecktype = function (type, typeflag)\n\tif not typeflag then \n\t\treturn true\n\telse\n\t\treturn typeflag==type\n\tend\t\nend\n\n-- Set activity checks (so we dont display a set in the list that we have nothing of)\ntalisman.setisactive = function (set)\n\tfor i,_ in pairs(talisman.sets[set]) do\n\t\tif talisman.talismanisactive(i) then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\n\ntalisman.talismanisactive = function (talismanname)\n\tfor k,d in pairs(talisman.info[talismanname]) do\n\t\tif talisman.pieces[k] and (tonumber(talisman.pieces[k][talisman.types.total]) or 0)>0 then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend\n\n\n\n\n-- Functions to help manage and find our pieces\ntalisman.getcount = function (piecename, type)\n\tlocal count = 0\n\tlocal gettype = type or talisman.types.total\n\tif not talisman.pieces[piecename] then\n\t\treturn 0\n\tend\n\treturn talisman.pieces[piecename][gettype] or 0\nend\n\ntalisman.autosplit = function (piecename, size)\n\t-- only split pieces > level 1 obviously..\n\tif (tonumber(size) or 0)<=1 then return end\n\tsend(string.format(\"talisman split %s %s\", piecename, size))\n\tif (tonumber(size) or 0)>2 then\n\t\t-- recursively work our way down.. we just got 2 level (size-1) pieces.. split them\n  \ttalisman.autosplit(piecename, (tonumber(size)-1))\n  \ttalisman.autosplit(piecename, (tonumber(size)-1))\n\tend\nend\n\n-- Function to combine pieces required to get a specific level piece.\ntalisman.make = function (piecename, level)\n\t-- note this can fail currently because we cant control the talisman combine type so it cant combine promo with refined, etc.\n\tif (tonumber(level) or 0) <= 1 then return true end\n\tif (tonumber(level) or 0) > 2 then\n\t\t-- if we need a level 4 piece.. we need 2 level 3 pieces first..\n\t\ttalisman.make(piecename, (tonumber(level)-1))\n    talisman.make(piecename, (tonumber(level)-1))\n\tend\n\t-- to make a level 4 piece, we combine 2 level 3 pieces..\n\tsend(string.format(\"talisman combine %s %s\", piecename, tonumber(level)-1))\n\treturn true\nend\n\ntalisman.add = function (piecename, level, count, type)\n\tlocal name = talisman.lookup[piecename:cut(20)]\n\tlocal mytype = type or talisman.types.unknown\n\tif not name then \n\t\tcecho(\"<red>***\")\n\t\treturn\n\tend\n\n\tif (tonumber(level) or 0) > 1 then\n\t\t-- auto split things on the way in..\n\t\tfor i=1, (tonumber(count) or 1) do\n\t\t\ttalisman.autosplit(piecename, tonumber(level))\n\t\tend\n\tend\n\n\ttalisman.pieces[name] = talisman.pieces[name] or {}\n\ttalisman.pieces[name][mytype] = talisman.pieces[name][mytype] or 0\n\ttalisman.pieces[name][talisman.types.total] = talisman.pieces[name][talisman.types.total] or 0\n\t\n\ttalisman.pieces[name][mytype] = talisman.pieces[name][mytype] + talisman.leveltocount(level)*(tonumber(count) or 1)\n\ttalisman.pieces[name][talisman.types.total] = talisman.pieces[name][talisman.types.total] + talisman.leveltocount(level)*(tonumber(count) or 1)\nend\n\ntalisman.remove = function (piecename, level, count, type)\n\tif not talisman.pieces[piecename] then return end\n\tif not talisman.pieces[piecename][talisman.types.total] then \n\t\ttalisman.echo(\"Attempt to remove pieces we dont think we have for %s!\", piecename)\n\t\treturn -- we dont know if we have those pieces.. bail\n\tend\n\t-- calculate the true quantity we're removing..\n\tlocal count = tonumber(talisman.leveltocount((tonumber(level) or 1)) * (tonumber(count) or 1))\n\n  if (tonumber(talisman.pieces[piecename][talisman.types.total]) or 0) <= count then\n\t\t-- we dont think we have enough in total, so just remove them all\n\t\ttalisman.pieces[piecename]={}\n\t\ttalisman.pieces[piecename][talisman.types.total] = 0\n\telse\n  \t-- we think we have enough.. remove from total, if theres any question where they came from, add to unknown\n\t\tif table.size(talisman.pieces[piecename])>2 then\n\t\t\t-- we always have a T and P or R item, if we have a T, P AND R (or Q) then it indicates some confusion or doubt..\n\t\t\tlocal newtotal = talisman.pieces[piecename][talisman.types.total]-count\n\t\t\ttalisman.pieces[piecename] = {}\n\t\t\ttalisman.pieces[piecename][talisman.types.total] = newtotal\n\t\t\ttalisman.pieces[piecename][talisman.types.unknown] = newtotal\n\t\telse\n\t\t\tfor i,v in pairs(talisman.pieces[piecename]) do\n\t\t\t\ttalisman.pieces[piecename][i] = tonumber(v)-count\n\t\t\tend\n\t\tend\n\tend\nend\n\n\n\n\n\n-- Logic to complete talismans.\ntalisman.complete = function (talismanname)\n\tif not talisman.cancomplete(talismanname) then\n\t\ttalisman.echo(string.format(\"Cannot complete talisman %s, pieces missing.\", talismanname))\n\t\treturn\n\tend\n\n\tfor k,d in pairs(talisman.info[talismanname]) do\n\t\tlocal required = (math.log(d.required)/math.log(2))+1\n\t\tif math.floor(required)==required then\n  \t\t\tif talisman.make(k, required) then\n\t  \t\t\ttalisman.echo(string.format(\"Error: Could not make level %d of %s, please check talisman pieces to correct stored data.\", (tonumber(required) or -1), k))\n  \t\t\treturn\n  \t\tend\n\t\t\ttalisman.remove(k, required, 1)\n\t\telse\n\t\t\t-- if required is 3, we cant combine this, so use 3 singles (mudbomb for example)..\n\t\t\ttalisman.remove(k, 1, d.required)\n\t\tend\n\tend\n\tsend(string.format(\"Talisman complete %s\", talismanname))\nend\n\ntalisman.cancomplete = function (talismanname)\n\tif not talisman.info[talismanname] then\n\t\ttalisman.echo(string.format(\"Invalid talisman %s\", talismanname))\n\t\treturn false\n\tend\n\n\tfor k,d in pairs(talisman.info[talismanname]) do\n\t\tif talisman.getcount(k) < d.required then\n\t\t\t-- dont have required pieces!\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\n\n\n\n\n\n-- Logic for trading talismans\ntalisman.tradeset = function (who, set, promo)\n\tif not talisman.sets[set] then\n\t\ttalisman.echo(string.format(\"Invalid talisman set %s\", set))\n\t\treturn\n\tend\n\tfor i,_ in pairs(talisman.sets[set]) do\n\t\ttalisman.tradetalisman(who, i, promo)\n\tend\nend\n\ntalisman.tradetalisman = function (who, talismanname, promo)\n\tif not talisman.info[talismanname] then\n\t\ttalisman.echo(string.format(\"Invalid talisman %s\", talismanname))\n\t\treturn\n\tend\n\n\tfor k,d in pairs(talisman.info[talismanname]) do\n\t\tif promo then\n\t\t\ttalisman.trade(who, k, d.required)\n\t\telse\n\t\t\ttalisman.trade(who, k, d.required)\n\t\tend\n\tend\nend\n\ntalisman.typetolong = function (typecode)\n\tif typecode == talisman.types.promo then\n\t\treturn \"promo\"\n\telseif typecode == talisman.types.refine then\n\t\treturn \"refine\"\n\telseif typecode == talisman.types.quest then\n\t\treturn \"quest\"\n\telse\n\t\treturn \"\"\n\tend\nend\n\ntalisman.trade = function (who, piecename, quantity, type)\n\tlocal count = talisman.getcount(piecename)\n\tif count<quantity then\n\t\ttalisman.echo(string.format(\"Only %d available of %s \", count, piecename))\n\t\treturn\n\tend\n\tif count>256 then\n\t\ttalisman.echo(\"Trade alias can only handle quantities up to 256, sorry!\")\n\t\treturn\n\tend\n\tlocal required = {}\n\tlocal remaining = quantity\n\tlocal index = 9\n\twhile index>0 and remaining>0 do\n\t\tif remaining>=(2^(index-1)) then\n\t\t\trequired[tostring(index)]=true\n\t\t\tremaining=remaining-(2^(index-1))\n\t\tend\n\t\tindex=index-1\n\tend\n\tfor i,v in pairs(required) do\n\t\tif not talisman.make(piecename, tonumber(i)) then\n\t\t\ttalisman.echo(string.format(\"Error: Could not make level %d of %s\", tonumber(i), piecename))\n\t\t\treturn\n\t\telse\n\t\t\tif not price then\n\t\t\t\tsend(string.format(\"Talisman trade piece %s %d %s to %s for nothing\", piecename, tonumber(i), talisman.typetolong(type), who))\n\t\t\telse\n\t\t\t\tsend(string.format(\"Talisman trade piece %s %d %s to %s for %d\", piecename, tonumber(i), talisman.typetolong(type), who))\n\t\t\tend\n\t\t\ttalisman.remove(piecename, tonumber(i), 1)\n\t\tend\n\tend\nend\n\n\n\n\n\n\n-- Display and formatting functions\n\n-- Highlighters to announce our counts when we get new pieces..\ntalisman.announce = function (piecename, size, type)\n\tlocal count = talisman.getcount(piecename, type)\n\tif size >= 0 then\n\t\tcount = count + 2^(math.abs(tonumber(size))-1)\n\telse\n\t\tcount = count - 2^(math.abs(tonumber(size))-1)\n\tend\n\tcecho(string.format(\"<%s> (Count: %d)\", talisman.settings.color, count))\nend\n\ntalisman.rightpad = function (data, length)\n\treturn string.cut(string.format(\"%s%s\", (data or \"?\"), string.rep(\" \", length)), length)\nend\n\ntalisman.highlight = function ()\n\tselectCurrentLine()\n\tfg(\"gold\")\n\tresetFormat()\nend\n\ntalisman.summary = function (setname)\n\tlocal talismangrandtotal = 0\n\tif setname then\n\t\tif not talisman.setisactive(setname) then\n\t\t\ttalisman.echo(string.format(\"Set Inactive %s\", setname))\n\t\t\treturn \n\t\tend\n\t\ttalisman.displayset(setname)\n\t\treturn\n\tend\n\tfor i,v in ipairs(talisman.setorder) do\n\t\ttalisman.settotal = 0\n\t\ttalisman.setspare = 0\n\t\ttalisman.setrequired = 0\n\t\tif talisman.setisactive(v) then\n\t\t\ttalisman.displayset(v)\n\t\t\ttalismangrandtotal = talismangrandtotal + talisman.setcredittotal\n\t\tend\n\tend\n\tcecho(string.format(\"<white>Total Value: <red>%d (%d)<white>\\n\\n\", talismangrandtotal,((talismangrandtotal or 0) + (tonumber(gmcp.Char.Status.boundcredits) or 0) + (tonumber(gmcp.Char.Status.unboundcredits) or 0))))\nend\n\ntalisman.displayset = function (set)\n\tif not talisman.sets[set] then\n\t\ttalisman.echo(string.format(\"Invalid talisman set for output %s\", set))\n\t\treturn\n\tend\n\n\ttalisman.settotal = 0\n\tcechoLink(string.format(\"<white>%s Set<reset>\\n\", set:title()), [[printCmdLine(\"ttrade set ]]..(target or \"<person>\")..\" \"..set..[[\")]], \"Click to trade complete set\", true)\n\tcecho(string.format(\"<white>%s<reset>\\n\", string.rep(\"-\", string.len(set)+4)))\n\n\ttalisman.setcredittotal = 0\t\n\tif talisman.setformat[set] and talisman.setformat[set].order then\n\t-- echo the header..\n\t\tfor _,v in ipairs(talisman.setformat[set].order) do\n\t\t\tif talisman.talismanisactive(v) then\n\t\t\t\ttalisman.displaysetdetail(set, v, talisman.sets[set][v])\n\t\t\tend\n\t\tend\n\telse\n\t\tfor i,v in pairs(talisman.sets[set]) do\n\t\t\tif talisman.talismanisactive(i) then\n\t\t\t\ttalisman.displaysetdetail(set, i, v)\n\t\t\tend\n\t\tend\n\tend\n\tif talisman.setrequired > 0 then\n\t\tcecho(string.format(\"<white>Total: %d of %d common (%d%% plus %d spare) <red>(%s)<white>\\n\\n\", talisman.settotal, talisman.setrequired, math.floor(talisman.settotal*100/talisman.setrequired), talisman.setspare, (talisman.setcredittotal or 0)))\n\tend\nend\n\ntalisman.displaysetdetail = function (set, talismanname, talismandata)\n\n\tlocal talismanfull, talismancount\n\ttalisman.talismantotal = 0\n\ttalisman.talismanspare = 0\n\ttalisman.talismanrequired = 0\n\tcechoLink(string.format(\"<%s>%s\", ((talismandata and talismandata.color) or talisman.settings.color), talisman.rightpad(talismandata.short, talisman.setformat[set].titlewidth)), [[printCmdLine(\"ttrade talisman ]]..(target or \"<person>\")..\" \"..talismanname..[[\")]], \"Click to trade complete talisman\", true)\n\ttalismanfull, talismancount = talisman.displaytalisman(talismanname, set, talismandata.order)\n\ttalisman.settotal = talisman.settotal + talisman.talismantotal\n\ttalisman.setspare = talisman.setspare + talisman.talismanspare\n\ttalisman.setrequired = talisman.setrequired + talisman.talismanrequired\n\tif talisman.talismanrequired-talisman.talismantotal>0 then\n\t\tcecho(string.format(\"<CadetBlue>(%d%%)<reset>\", math.floor(talisman.talismantotal*100/talisman.talismanrequired)))\n\telse\n\t\tcecho(\"<green>(100%)<reset>\")\n\tend\n\tif talisman.setformat[set].value then\n\t\ttalisman.credittotal = (talismanfull*talismandata.tradein) + ((talismancount - (talismanfull*4)) * talismandata.redeem)\n\t\ttalisman.setcredittotal = (talisman.setcredittotal or 0) + (talisman.credittotal or 0)\n\t\tcecho(string.format(\"<red> %s %s %s <white>(%s %s)\", talismanfull, talismancount, talisman.credittotal, (talismandata.tradein or 0), (talismandata.redeem or 0)))\n\tend\n\tcecho(\"\\n\")\nend\n\ntalisman.displaytalisman = function (talismanname, set, order)\n\tlocal temp = 0\n\tlocal min = 99\n\tlocal count = 0\n\n\tif not talisman.info[talismanname] then\n\t\ttalisman.echo(string.format(\"Invalid talisman for output %s\", talismanname))\n\t\treturn\n\tend\n\tif not order then\n\t\t-- unsorted..\n\t\tfor k,d in pairs(talisman.info[talismanname]) do\n\t\t\ttemp = talisman.displayitem(k, d, set)\n\t\t\tif temp < min then\n\t\t\t\tmin = temp\n\t\t\tend\n\t\t\tcount = count + temp\n\t\tend\n\telse\n\t\tfor _,d in ipairs(order) do\n\t\t\ttemp = talisman.displayitem(d, talisman.info[talismanname][d], set)\n\t\t\tif temp < min then\n\t\t\t\tmin = temp\n\t\t\tend\n\t\t\tcount = count + temp\n\t\tend\n\tend\n\treturn min, count\nend\n\ntalisman.getdisplaycolor = function (name, count, required)\n\tif not talisman.pieces[name] then\n\t\treturn \"CadetBlue\"\n\telseif count >= required then\n\t\tif (tonumber(talisman.pieces[name][talisman.types.unknown]) or 0)>0 then\n\t\t\treturn \"orange_red\"\n\t\telseif (tonumber(talisman.pieces[name][talisman.types.refine]) or 0)>0 and (tonumber(talisman.pieces[name][talisman.types.promo]) or 0)>0 then\n\t\t\treturn \"yellow\"\n\t\telseif (tonumber(talisman.pieces[name][talisman.types.refine]) or 0)>0 then\n\t\t\treturn \"GreenYellow\"\n\t\telse\n\t\t\treturn \"green\"\t\t\n\t\tend\n\telse\n\t\tif (tonumber(talisman.pieces[name][talisman.types.unknown]) or 0)>0 then\n\t\t\treturn \"red\"\n\t\telseif (tonumber(talisman.pieces[name][talisman.types.refine]) or 0)>0 then\n\t\t\treturn \"medium_orchid\"\n\t\telse\n\t\t\treturn \"CadetBlue\"\n\t\tend\n\tend\t\t\nend\n\ntalisman.displayitem = function (name, data, set)\n\tlocal count = talisman.getcount(name)\n\tlocal color = talisman.getdisplaycolor(name, count, data.required)\n\tif count>=data.required then\n\t\tcechoLink(string.format(\"<%s>%s\", color, talisman.rightpad(string.format(\"%s(%d)\", string.cut(data.short,talisman.setformat[set].cellwidth), count), talisman.setformat[set].cellwidth+5)), [[printCmdLine(\"ttrade ]]..(target or \"<person>\")..\" \"..name..[[\")]], \"Click to trade\", true)\n\t\ttalisman.talismantotal = talisman.talismantotal + data.required -- (dont include spares in our total required)\n\t\ttalisman.talismanspare = talisman.talismanspare + count - data.required\n\telse\n\t\tcechoLink(string.format(\"<%s>%s\", color, talisman.rightpad(string.format(\"%s(%d)\", string.cut(data.short,talisman.setformat[set].cellwidth), count), talisman.setformat[set].cellwidth+5)), [[printCmdLine(\"ttrade ]]..(target or \"<person>\")..\" \"..name..[[\")]], \"Click to trade\", true)\n\t\ttalisman.talismantotal = talisman.talismantotal + count -- (dont include spares in our total required)\n\tend\n\ttalisman.talismanrequired = talisman.talismanrequired + data.required\n\treturn math.floor(count/data.required)\nend\n\n\n-- This just helps us deal with the fact that some pieces have a string thats to long (20 char limit on the talisman piece list)..\ntalisman.createlookup = function ()\n\ttalisman.lookup ={}\n\tfor i,v in pairs(talisman.sets) do\n\t\tfor k,d in pairs(v) do\n\t\t\tfor a,b in ipairs(d.order) do\n\t\t\t\ttalisman.lookup[b:cut(20)] = b\n\t\t\tend\n\t\tend\n\tend\nend\n\ntalisman.createlookup()\n",
    "eventHandlerList": null
}