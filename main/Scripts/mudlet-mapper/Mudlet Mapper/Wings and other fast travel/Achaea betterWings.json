{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Achaea betterWings",
    "packageName": null,
    "script": "--builds a table based on current orb settings, then returns a function which can be used to quickly check that table.\n\nlocal function orbedBlackList()\n  local bannedAreas = {}\n  local areaTable = mmp.getAchaeaOrbTable()\n  for org, areas in pairs(areaTable) do\n    for _, area in pairs(areas) do\n      bannedAreas[area] = mmp.settings[\"orb\" .. org]\n    end\n  end\n  return\n    function(roomId)\n      return not bannedAreas[getRoomArea(roomId)]\n    end\nend\n\n--searches for closest room that meets requirements.\n--does stuff to handle weighted rooms, locked rooms, special exits.\n\nlocal function closestOutdoors(startRoom)\n--visited is rooms which have already been found by the search.\n  local visited = {[startRoom] = true}\n  --checking is the rooms that it is currently checking to see if they meet the desired conditions.\n  local checking = {[startRoom] = true}\n  --nextCheck is a list of rooms which will be checked once the algorithm is finished with the rooms in checking.\n  local nextCheck = {}\n  --weightedRooms contains rooms with greater than 1 weight, so that they can be handled differently.\n  local weightedRooms = {}\n  local orbed = orbedBlackList()\n\n  --functions for handling weighted rooms.\n  local function addWeighted(room, weight)\n    if not weightedRooms[room] or weight < weightedRooms[room] then\n      weightedRooms[room] = weight\n    end\n  end\n\n  --this function subtracts 1 from every room weight in the weighted room list.\n  --if they hit zero then it will add them to the checking table and removes them from weightedRooms\n\n  local function reduceWeights()\n    --display(weightedRooms)\n    local toDelete = {}\n    for room, weight in pairs(weightedRooms) do\n      weightedRooms[room] = weightedRooms[room] - 1\n      if weightedRooms[room] <= 0 then\n        if not visited[room] then\n          checking[room] = true\n          visited[room] = true\n        end\n        toDelete[room] = true\n      end\n    end\n    --cleans up the weighted stuff.\n    for room, _ in pairs(toDelete) do\n      weightedRooms[room] = nil\n    end\n  end\n\n  local stopwatch = createStopWatch()\n  startStopWatch(stopwatch)\n  --only willing to search for 500ms. Will abort in longer cases,\n  while getStopWatchTime(stopwatch) < .5 do\n    for room, val in pairs(checking) do\n      --if these conditions are met, returns a roomid and exits out.\n      --probably doesn't work great on weird planes, as when off plane, the room returned may not work for wings.\n      if getRoomUserData(room, \"outdoors\") == \"y\" and orbed(room) then\n        return room\n      end\n      local weights = getExitWeights(room)\n      --loops through all exits in the room, doing stuff.\n      for direction, destRoom in pairs(getRoomExits(room)) do\n        if not hasExitLock(room, direction) and not visited[destRoom] then\n          --if the exit+roomweight is higher than 1 (the default, for 1 room weight + 0 exit weight), then do a room weight subroutine\n          if\n            (((weights[direction] or 0) + getRoomWeight(destRoom)) > 1) and not roomLocked(destRoom)\n          then\n            addWeighted(destRoom, (weights[direction] or 0) + getRoomWeight(destRoom))\n          else\n            --add it to visited, so it doesn't double back on it in the future.\n            visited[destRoom] = true\n            --if it's not locked, add it to nextCheck, which are the rooms that it searches through next cycle.\n            --if it is locked, just ignore it.\n            if not roomLocked(destRoom) then\n              nextCheck[destRoom] = true\n            end\n          end\n        end\n      end\n      --same as above loop, but for specialExits\n      for destRoom, specialExits in pairs(getSpecialExits(room)) do\n        for specialExit, locked in pairs(specialExits) do\n          if locked == \"0\" and not visited[destRoom] then\n            if\n              (((weights[direction] or 0) + getRoomWeight(destRoom)) > 1) and\n              not roomLocked(destRoom)\n            then\n              addWeighted(destRoom, (weights[direction] or 0) + getRoomWeight(destRoom))\n            else\n              visited[destRoom] = true\n            end\n            if not roomLocked(destRoom) then\n              nextCheck[destRoom] = true\n            end\n          end\n        end\n      end\n    end\n    --replaces checking with the next set of rooms to check, and clears nextCheck.\n    checking, nextCheck = nextCheck, {}\n    reduceWeights()\n    --if no rooms on checking and weightedRooms, exits out.\n    --If no rooms in checking but there are rooms in weightedRooms, it will iterate down the weights until something is in checking.\n    if not next(checking) then\n      if next(weightedRooms) then\n        while next(weightedRooms) and not next(checking) do\n          reduceWeights()\n        end\n      else\n        return\n      end\n    end\n  end\nend\n\n--does the actual linking and stuff. Mostly copied over from the main wings script.\n--however, half of the checks have been removed because they were already done in the process\n--of searching for a valid outdoors room.\n\nlocal function linkWingsRemote(room)\n  local function getcmd(word)\n    return\n      mmp.settings.removewings and\n      string.format(\n        [[script:sendAll(\"wear wings\", \"say *%s %s\", \"remove wings\", false)]],\n        (mmp.settings.winglanguage and mmp.settings.winglanguage or \"\"),\n        word\n      ) or\n      string.format(\n        [[script:send(\"say *%s %s\", false)]],\n        (mmp.settings.winglanguage and mmp.settings.winglanguage or \"\"),\n        word\n      )\n  end\n\n  --decided to pull this out and set it as a local variable instead of calling it 20x throughout the script.\n  local area = getRoomArea(room)\n  --sarapis wings\n  if (mmp.settings.duanathar or mmp.settings.duanatharan or mmp.settings.duantahar) then\n    if mmp.oncontinent(area, \"Main\") then\n      if mmp.settings.duanatharan then\n        mmp.tempSpecialExit(room, 4882, getcmd(\"duanatharan\"))\n        mmp.tempSpecialExit(room, 3885, getcmd(\"duanathar\"))\n      elseif mmp.settings.duantahar then\n        mmp.tempSpecialExit(room, 42319, getcmd(\"duanathar\"))\n        mmp.tempSpecialExit(room, 4882, getcmd(\"duanatharan\"))\n      else\n        mmp.tempSpecialExit(room, 3885, getcmd(\"duanathar\"))\n      end\n      --Meropis Wings\n    elseif mmp.oncontinent(area, \"Meropis\") then\n      if mmp.settings.duanatharan then\n        mmp.tempSpecialExit(room, 51603, getcmd(\"duanatharan\"))\n        mmp.tempSpecialExit(room, 51188, getcmd(\"duanathar\"))\n      elseif mmp.settings.duantahar then\n        mmp.tempSpecialExit(room, 42319, getcmd(\"duanathar\"))\n        mmp.tempSpecialExit(room, 51603, getcmd(\"duanatharan\"))\n      else\n        mmp.tempSpecialExit(room, 51188, getcmd(\"duanathar\"))\n      end\n    end\n  end\n  --island wings\n  if\n    mmp.settings.duanatharic and\n    (\n      mmp.oncontinent(area, \"Main\") or\n      mmp.oncontinent(area, \"Arcadia\") or\n      mmp.oncontinent(area, \"Outer\") or\n      mmp.oncontinent(area, \"Meropis\") or\n      mmp.oncontinent(area, \"Island\") or\n      mmp.oncontinent(area, \"North\")\n    )\n  then\n    mmp.tempSpecialExit(room, 47571, getcmd(\"duanatharic\"))\n  end\n  if mmp.settings.harness then\n    -- eastern isles\n    if mmp.oncontinent(area, \"Eastern_Isles\") then\n      mmp.tempSpecialExit(room, 54231, \"Shake Harness\")\n      -- northern isles\n    elseif mmp.oncontinent(area, \"Northen_Isles\") then\n      mmp.tempSpecialExit(room, 48719, \"Shake Harness\")\n      -- western isles\n    elseif mmp.oncontinent(area, \"Western_Isles\") then\n      mmp.tempSpecialExit(room, 54632, \"Shake Harness\")\n    end\n  end\n  if mmp.settings.soar then\n    --Sarapis soar.\n    if mmp.oncontinent(area, \"Main\") then\n      if\n        gmcp.Char.Status.class == \"air Elemental Lord\" or\n        gmcp.Char.Status.class == \"air Elemental Lady\"\n      then\n        mmp.tempSpecialExit(room, 4882, \"aero soar high\", 10)\n        -- duanatharan\n        mmp.tempSpecialExit(room, 3885, \"aero soar low\", 10)\n        -- duanathar\n        mmp.tempSpecialExit(room, 54173, \"aero soar stratosphere\", 10)\n        -- Stratosphere!\n      end\n      --Meropis soar\n    elseif mmp.oncontinent(area, \"Meropis\") then\n      if\n        gmcp.Char.Status.class == \"air Elemental Lord\" or\n        gmcp.Char.Status.class == \"air Elemental Lady\"\n      then\n        mmp.tempSpecialExit(room, 51603, \"aero soar high\", 10)\n        -- duanatharan\n        mmp.tempSpecialExit(room, 51188, \"aero soar low\", 10)\n        -- duanathar\n        mmp.tempSpecialExit(room, 54173, \"aero soar stratosphere\", 10)\n        -- Stratosphere!\n      end\n    end\n  end\n  mmp.clearpathcache()\nend\n\n--is called when you do pathfinding.\n\nfunction mmp.achaeaBetterWings()\n  --if you're not on achaea, or the crowdmap is not enabled, or the room you're in is flagged as outdoors, exit out.\n  if\n    (mmp.game ~= \"achaea\") or\n    (not mmp.settings.betterwings) or\n    (not mmp.settings.crowdmap) or\n    (getRoomUserData(mmp.currentroom, \"outdoors\") == \"y\" and orbedBlackList()(mmp.currentroom))\n  then\n    return\n  end\n  --if none of the shortcut items are enabled, return.\n  if\n    not (\n      mmp.settings.duanathar or\n      mmp.settings.duantahar or\n      mmp.settings.duanatharan or\n      mmp.settings.soar or\n      mmp.settings.harness or\n      mmp.settings.duanatharic\n    )\n  then\n    return\n  end\n  --find closest room, if that function returned something useful, call above function to create temporary remote special exits depending on settings.\n  local closestRoom = closestOutdoors(mmp.currentroom)\n  if closestRoom then\n    if mmp.debug then\n      mmp.echo(\"Closest outdoors room found at \"..closestRoom)\n    end\n    linkWingsRemote(closestRoom)\n  end\nend\n\nregisterAnonymousEventHandler(\"mmp link externals\", \"mmp.achaeaBetterWings\")",
    "eventHandlerList": null
}