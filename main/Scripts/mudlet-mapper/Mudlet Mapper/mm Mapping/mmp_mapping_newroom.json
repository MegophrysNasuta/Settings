{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "mmp_mapping_newroom",
    "packageName": null,
    "script": "--mmp_mapping_newroom\n\nlocal function makeroom(oldid, newid, x, y, z)\n  assert(x and y and z, \"makeroom: need all 3 coordinates\")\n  addRoom(newid)\n  setRoomCoordinates(newid, x, y, z)\n  setRoomArea(newid, getRoomArea(oldid))\n  local fgr, fgg, fgb = unpack(color_table.red)\n  local bgr, bgg, bgb = unpack(color_table.blue)\n  highlightRoom(newid, fgr, fgg, fgb, bgr, bgg, bgb, 1, 100, 100)\n  if mmp.envids[gmcp.Room.Info.environment] then\n    setRoomEnv(newid, mmp.envids[gmcp.Room.Info.environment])\n  else\n    setRoomEnv(newid, getRoomEnv(oldid))\n  end\n  return string.format(\"Created new room %d at %dx,%dy,%dz.\", newid, x, y, z)\nend\n\n-- gives the reverse shifted coordinates, ie asking for the sw exit + coords will give the coords at ne\n\nlocal function getshiftedcoords(original, ox, oy, oz)\n  local x, y, z\n  local has = table.contains\n  -- reverse the exit\n  w = mmp.ranytolong(original)\n  if has({\"west\", \"left\", \"w\", \"l\"}, w) then\n    x = (x or ox) - 1\n    y = (y or oy)\n    z = (z or oz)\n  elseif has({\"east\", \"right\", \"e\", \"r\"}, w) then\n    x = (x or ox) + 1\n    y = (y or oy)\n    z = (z or oz)\n  elseif has({\"north\", \"top\", \"n\", \"t\"}, w) then\n    x = (x or ox)\n    y = (y or oy) + 1\n    z = (z or oz)\n  elseif has({\"south\", \"bottom\", \"s\", \"b\"}, w) then\n    x = (x or ox)\n    y = (y or oy) - 1\n    z = (z or oz)\n  elseif has({\"northwest\", \"topleft\", \"nw\", \"tl\"}, w) then\n    x = (x or ox) - 1\n    y = (y or oy) + 1\n    z = (z or oz)\n  elseif has({\"northeast\", \"topright\", \"ne\", \"tr\"}, w) then\n    x = (x or ox) + 1\n    y = (y or oy) + 1\n    z = (z or oz)\n  elseif has({\"southeast\", \"bottomright\", \"se\", \"br\"}, w) then\n    x = (x or ox) + 1\n    y = (y or oy) - 1\n    z = (z or oz)\n  elseif has({\"southwest\", \"bottomleft\", \"sw\", \"bl\"}, w) then\n    x = (x or ox) - 1\n    y = (y or oy) - 1\n    z = (z or oz)\n  elseif has({\"up\", \"u\"}, w) then\n    x = (x or ox)\n    y = (y or oy)\n    z = (z or oz) + 1\n  elseif has({\"down\", \"d\"}, w) then\n    x = (x or ox)\n    y = (y or oy)\n    z = (z or oz) - 1\n  elseif has({\"in\", \"i\"}, w) then\n    x = (x or ox)\n    y = (y or oy)\n    z = (z or oz) - 1\n  elseif has({\"out\", \"o\"}, w) then\n    x = (x or ox)\n    y = (y or oy)\n    z = (z or oz) + 1\n  else\n    mmp.echo(\n      \"Don't know where to shift the coordinates for a \" ..\n      tostring(w) ..\n      \" (\" ..\n      tostring(original) ..\n      \") exit.\"\n    )\n  end\n  return x, y, z\nend\n\nfunction mmp_mapping_newroom(_, num)\n  local s, m =\n    xpcall(\n      function()\n        if not mmp.editing then\n          return\n        end\n        if not gmcp.Room then\n          mmp.echo(\n            \"You need to have GMCP turned on (see preferences on a recent Mudlet) for mapping stuff.\"\n          )\n          return\n        end\n        -- wilderness mapping right now is UNFINISHED! It does not handle the grid breakup. So, please don't try it, and please won't whine about it.\n\n        local function inwilderness()\n          return (gmcp.Room.Info.coords == \"\" and gmcp.Room.Info.area == \"\")\n        end\n\n        local getRoomName, getRoomCoordinates, getRoomsByPosition =\n          getRoomName, getRoomCoordinates, getRoomsByPosition\n        local num = tonumber(num) or tonumber(gmcp.Room.Info.num)\n        local currentexits = gmcp.Room.Info.exits\n        local s = \"\"\n        if not mmp.roomexists(num) then\n          -- see if we can create and link this room with an existing one\n          -- wilderness and non-wilderness rooms require different methods of calculating relative coordinates\n          if not inwilderness() then\n            for exit, id in pairs(currentexits) do\n              if mmp.roomexists(id) then\n                s = makeroom(id, num, getshiftedcoords(exit, getRoomCoordinates(id)))\n              end\n            end\n          else\n            local x, y = tostring(num):match(\".-(%d%d%d)(%d%d%d)$\")\n            -- Achaea's coordinates seem to be in the 4th quadrant, while Mudlets 0,0 is in the middle of the map. Invert y so going north-south looks alright\n            s = makeroom(mmp.previousroom, num, x, y * -1, 0)\n          end\n        end\n        -- if we created it, and some data could be filled in\n        if mmp.roomexists(num) then\n          -- cleanup the room name\n          local rootroomname = mmp.cleanroomname(gmcp.Room.Info.name)\n          -- match exact case, so mappers alertness' works properly\n          if getRoomName(num) ~= rootroomname then\n            setRoomName(num, rootroomname)\n            unHighlightRoom(num)\n            s = s .. (#s > 0 and \" \" or \"\") .. \"Updated room name to '\" .. rootroomname .. \"'.\"\n          end\n          -- autolink exits\n          if not inwilderness() then\n            local x = getRoomExits(num) or {}\n            -- check for missing exits\n            for exit, id in pairs(currentexits) do\n              if id == 0 then\n                s =\n                  s ..\n                  (#s > 0 and \" \" or \"\") ..\n                  \"Can't link to the \" ..\n                  exit ..\n                  \", it leads to a room with ID 0 (and that's not supported yet).\"\n              else\n                if not x[mmp.anytolong(exit)] then\n                  if not mmp.roomexists(id) then\n                    s =\n                      makeroom(\n                        num, id, getshiftedcoords(mmp.ranytolong(exit), getRoomCoordinates(num))\n                      )\n                  end\n                  if setExit(num, id, exit) then\n                    s =\n                      s ..\n                      (#s > 0 and \" \" or \"\") ..\n                      \"Added missing exit \" ..\n                      exit ..\n                      \" to \" ..\n                      (getRoomName(id) ~= \"\" and getRoomName(id) or \"''\") ..\n                      \" (\" ..\n                      id ..\n                      \").\"\n                  else\n                    s =\n                      s ..\n                      (#s > 0 and \" \" or \"\") ..\n                      string.format(\n                        \"Failed to link %d with %d via %s exit for some reason :/\", num, id, exit\n                      )\n                  end\n                end\n              end\n            end\n          else\n            local function getshiftedcoords(direction, ox, oy, oz)\n              if direction == 'n' then\n                return ox, oy + 1, oz\n              elseif direction == 'e' then\n                return ox + 1, oy, oz\n              elseif direction == 's' then\n                return ox, oy - 1, oz\n              elseif direction == 'w' then\n                return ox - 1, oy, oz\n              elseif direction == 'ne' then\n                return ox + 1, oy + 1, oz\n              elseif direction == 'se' then\n                return ox + 1, oy - 1, oz\n              elseif direction == 'sw' then\n                return ox - 1, oy - 1, oz\n              elseif direction == 'nw' then\n                return ox - 1, oy + 1, oz\n              else\n                error(\"getshiftedcoords: direction \" .. direction .. \" isn't supported yet.\")\n              end\n            end\n\n            local x, y, z = getRoomCoordinates(num)\n            local currentexits = getRoomExits(num) or {}\n            for _, exit in ipairs({'n', 'e', 's', 'w', 'ne', 'se', 'sw', 'nw'}) do\n              local roomatdir =\n                getRoomsByPosition(getRoomArea(num), getshiftedcoords(exit, x, y, z))\n              if roomatdir[0] then\n                local id = roomatdir[0]\n                if not currentexits[mmp.anytolong(exit)] then\n                  if setExit(num, id, exit) then\n                    s =\n                      s ..\n                      (#s > 0 and \" \" or \"\") ..\n                      \"Added missing exit \" ..\n                      exit ..\n                      \" to \" ..\n                      (getRoomName(id) ~= \"\" and getRoomName(id) or \"''\") ..\n                      \" (\" ..\n                      id ..\n                      \").\"\n                  else\n                    s =\n                      s ..\n                      (#s > 0 and \" \" or \"\") ..\n                      string.format(\n                        \"Failed to link %d with %d via %s exit for some reason :/\", num, id, exit\n                      )\n                  end\n                  local exit = mmp.anytoshort(mmp.ranytolong(exit))\n                  if setExit(id, num, exit) then\n                    s =\n                      s ..\n                      (#s > 0 and \" \" or \"\") ..\n                      \"Added missing exit \" ..\n                      exit ..\n                      \" to \" ..\n                      (getRoomName(id) ~= \"\" and getRoomName(id) or \"''\") ..\n                      \" (\" ..\n                      id ..\n                      \").\"\n                  else\n                    s =\n                      s ..\n                      (#s > 0 and \" \" or \"\") ..\n                      string.format(\n                        \"Failed to link %d with %d via %s exit for some reason :/\", num, id, exit\n                      )\n                  end\n                end\n              end\n            end\n          end\n          -- check for unexisting exits\n          if mmp.settings[\"autoclear\"] then\n            for exit, id in pairs(getRoomExits(num)) do\n              if not currentexits[mmp.anytoshort(exit)] then\n                setExit(num, -1, exit)\n                s =\n                  s ..\n                  (#s > 0 and \" \" or \"\") ..\n                  exit ..\n                  \" exit to \" ..\n                  id ..\n                  \" doesn't actually exist, removed it.\"\n              end\n            end\n          end\n          -- check for environment update, if we have environments mapped out\n          if\n            mmp.envids[gmcp.Room.Info.environment] and\n            mmp.envids[gmcp.Room.Info.environment] ~= getRoomEnv(num)\n          then\n            setRoomEnv(num, mmp.envids[gmcp.Room.Info.environment])\n            s =\n              s ..\n              (#s > 0 and \" \" or \"\") ..\n              \"Updated environment name to \" ..\n              gmcp.Room.Info.environment ..\n              \".\"\n          end\n          -- check indoors status\n          if mmp.game ~= \"asteria\" then\n            local indoors = table.contains(gmcp.Room.Info.details, \"indoors\")\n            if indoors and (getRoomUserData(num, \"indoors\") == '' or getRoomUserData(num,\"outdoors\") ~= '') then\n            setRoomUserData(num, \"indoors\", \"y\")\n            clearRoomUserDataItem(num, \"outdoors\")\n            s = s .. (#s > 0 and \" \" or \"\") .. \"Updated room to be indoors.\"\n          elseif not indoors and (getRoomUserData(num, \"indoors\") ~= '' or getRoomUserData(num, \"outdoors\") == '') then\n            clearRoomUserDataItem(num, \"indoors\")\n            setRoomUserData(num, \"outdoors\", \"y\")\n            s = s .. (#s > 0 and \" \" or \"\") .. \"Updated room to be outdoors.\"\n          end\n        end\n\n          -- check server area name (Achaea only for now)\n          if mmp.game == \"achaea\" then\n            local serverArea = gmcp.Room.Info.area\n            if serverArea ~= getRoomUserData(num, \"Game Area\") then\n              setRoomUserData(num, \"Game Area\", serverArea)\n              s = s .. (#s > 0 and \" \" or \"\") .. \"Updated game area to \" .. serverArea .. \".\"\n            end\n          end\n          -- check for wilderness exits\n          if getRoomChar(num) ~= \"W\" and table.contains(gmcp.Room.Info.details, \"wilderness\") then\n            setRoomChar(num, \"W\")\n            s = s .. (#s > 0 and \" \" or \"\") .. \"Added the wilderness mark.\"\n          end\n        end\n        if #s > 0 then\n          mmp.echo(s)\n          centerview(mmp.currentroom)\n        end\n      end,\n      function(error)\n        mmp.echo(\"Oops! Has a small problem (\" .. error .. \").\")\n        echo(\"  \")\n        echoLink(\n          \"view steps\",\n          'echo[[' .. debug.traceback() .. ']]',\n          \"View steps of code that led up to it\"\n        )\n      end\n    )\n  if not s then\n    mmp.echo(m)\n  end\nend",
    "eventHandlerList": "\n\t\t\t\t\t\t\t"
}