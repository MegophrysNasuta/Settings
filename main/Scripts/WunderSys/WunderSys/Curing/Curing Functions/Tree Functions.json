{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Tree Functions",
    "packageName": null,
    "script": "function wsys.tree()\n\tif not wsys.timer.treedelay then \n\t-- Bit of a hack. Calling queue add touch tree twice will touch it once, then again after \n\t-- regaining tree balance, by which point you really no longer need to touch it. \n\t\tsend(\"curing queue remove touch tree\")\n\t\tsend(\"curing queue add touch tree\")\n\t\twsys.timer.treedelay = tempTimer( 4, function() wsys.timer.treedelay = nil end  )\n\tend\nend -- func\n\nif wsys.events.tree_para_check then killAnonymousEventHandler( wsys.events.tree_para_check ) end\nwsys.events.tree_para_check = registerAnonymousEventHandler( \"got aff\",\n  function(event, affliction)\n\t\tif wsys.timer.treedelay and event == \"got aff\" and affliction == \"paralysis\" then\n\t\t\tkillTimer( wsys.timer.treedelay )\n\t\t\twsys.timer.treedelay = nil\n\t\t\tsend(\"curing queue remove touch tree\")\n\t\tend\n\tend)\n\nlocal treeprompt = false\n\nfunction wsys.treed(empty)\nif (wsys.timer.treewait or forced or wsys.timer.snap) and not wsys.lifevision then\n wsys.timer.treewait = nil\n wsys.treesub()\n if wsys.aff.slimeobscure then\n   wsys.lostBal(\"tree\", wsys.settings.treebaltime + 10)\n else\n   wsys.lostBal(\"tree\", wsys.settings.treebaltime)\n end\n if not empty then\n  wsys.cure = \"tree\"\n  if treeprompt then killTrigger(tostring(treeprompt)) end\n  if not wsys.aff.blackout then\n   if not wsys.timer.snap then\n    treeprompt = tempLineTrigger(1,1, [[if isPrompt() then wsys.emptytree() end]])\n   end -- if\n  end -- if\n end -- if\n if wsys.timer.snap then\n  killTimer(tostring(wsys.timer.snap))\n  wsys.timer.snap = nil\n end -- if\nend -- if\nend -- func\n\nfunction wsys.treebal(event, bal)\n  if event == \"got bal\" and bal == \"tree\" then\n    cecho(\"\\n<green>You may TREE again\\n\")\n    wsys.lockqueue()\n  end\nend\n\nregisterAnonymousEventHandler(\"got bal\", \"wsys.treebal\")\n\nfunction wsys.emptytree()\n for k,v in pairs(wsys.tb.cures.tree) do\n   wsys.predicted[v] = nil\n   if wsysf.affs[v] then\n     wsysf.core.debug.print(2, \"Empty tree should clear \".. v..\"?\")\n   end\n  disableTrigger(string.title(v) .. \" -\")\n end -- for\n wsys.pairscheck(\"tree\")\n wsys.cure = nil\nend -- func\n\nfunction wsys.treeAffs()\n  local c = 0\n\t\n\tfor _,aff in ipairs(wsys.tb.cures.tree) do\n\t\tc = c + wsysf.affv[aff]\n\tend\n\n  return c\nend",
    "eventHandlerList": null
}