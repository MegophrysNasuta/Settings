{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Prompt Tags and Tag Colours",
    "packageName": null,
    "script": "-- Table of default prompt tags\nwsys.prompttags = wsys.prompttags or {} \n\nwsys.prompttags[\"health\"] = function() return wsys.stats.h end\nwsys.prompttags[\"percenthealth\"] = function() return math.floor(wsys.stats.h / wsys.stats.maxh * 100) end\nwsys.prompttags[\"mana\"] = function() return wsys.stats.m end\nwsys.prompttags[\"percentmana\"] = function() return math.floor(wsys.stats.m / wsys.stats.maxm * 100) end\nwsys.prompttags[\"endurance\"] = function() return wsys.stats.e end\nwsys.prompttags[\"percentendurance\"] = function() return math.floor(wsys.stats.e / wsys.stats.maxe * 100) end\nwsys.prompttags[\"willpower\"] = function() return wsys.stats.w end\nwsys.prompttags[\"percentwillpower\"] = function() return math.floor(wsys.stats.w / wsys.stats.maxw * 100) end\nwsys.prompttags[\"bal\"] = function() if wsys.bals.b then return \"X\" else return \"\" end end\nwsys.prompttags[\"eq\"] = function() if wsys.bals.e then return \"E\" else return \"\" end end\nwsys.prompttags[\"lbal\"] = function() if wsys.bals.b then return \"x\" else return \"\" end end\nwsys.prompttags[\"leq\"] = function() if wsys.bals.e then return \"e\" else return \"\" end end\nwsys.prompttags[\"target\"] = function() if target then return target else return \"\" end end\nwsys.prompttags[\"paused\"] = function() if wsys.paused then return \"(PP)\" else return \"\" end end\nwsys.prompttags[\"softpaused\"] = function() if wsys.softpaused then return \"(sP)\" else return \"\" end end\nwsys.prompttags[\"phase\"] = function() if wsys.def.phased or wsys.def.blackwind or wsys.def.astralform then return \"@\" else return \"\" end end\nwsys.prompttags[\"retardation\"] = function() if wsys.retard then return \"[RET]\" else return \"\" end end\nwsys.prompttags[\"kai\"] = function() if wsys.def.kaitrance then return wsys.stats.kai ..\" \" else return \"\" end end\nwsys.prompttags[\"shin\"] = function() if wsys.def.shintrance then return wsys.stats.shin..\" \" else return \"\" end end\nwsys.prompttags[\"warning\"] = function() return wsys.prefixWarning end\nwsys.prompttags[\"mw\"] = function() if wsys.def.metawake then return \"MW\" else return \"\" end end\nwsys.prompttags[\"breathing\"] = function() if wsys.def.breathing then return \"br\" else return \"\" end end\nwsys.prompttags[\"xp\"] = function() return gmcp.Char.Vitals.nl end\nwsys.prompttags[\"affs\"] = function() return wsys.affTags( wsysf.affs, true ) .. wsys.affTags( wsys.predicted, false ) end\nwsys.prompttags[\"timestamp\"] = function() return getTimestamp(getLineCount()):gsub(\"^%s*(.-)%s*$\", \"%1\") end\nwsys.prompttags[\"rage\"] = function() if wsys.stats.rage > 0 then return wsys.stats.rage..\" \" else return \"\" end end\n\nwsys.prompttags[\"diffhealth\"] = function()\n  if wsys.stats.h < wsys.stats.oh then \n    return(\"<red> (-\"..wsys.stats.oh - wsys.stats.h .. \"h, \" .. string.format(\"%.1f\", ((wsys.stats.oh - wsys.stats.h) / wsys.stats.maxh) * 100) .. \"%)\")\n  elseif wsys.stats.h > wsys.stats.oh then \n    return(\"<green> (+\"..wsys.stats.h - wsys.stats.oh .. \"h, \" .. string.format(\"%.1f\", ((wsys.stats.h - wsys.stats.oh) / wsys.stats.maxh) * 100) .. \"%)\") \n  else\n    return \"\"\n  end -- if\nend\n\nwsys.prompttags[\"diffmana\"] = function()\n  if wsys.stats.m < wsys.stats.om then \n    return(\"<slate_blue> (-\"..wsys.stats.om - wsys.stats.m .. \"m, \" .. string.format(\"%.1f\", ((wsys.stats.om - wsys.stats.m) / wsys.stats.maxm) * 100) .. \"%)\")\n  elseif wsys.stats.m > wsys.stats.om then \n    return(\"<purple> (+\".. wsys.stats.m - wsys.stats.om .. \"m, \" .. string.format(\"%.1f\", ((wsys.stats.m - wsys.stats.om) / wsys.stats.maxm) * 100) .. \"%)\") \n  else\n    return \"\"\n  end -- if\nend\n\nwsys.prompttags[\"def\"] = function() \n  local defstring = \"\"\n  if wsys.def.blindness then\n    defstring = defstring .. \"<SeaGreen>B \"\n  end\n  if wsys.def.deafness then\n    defstring = defstring .. \"<SeaGreen>D \"\n  end\n  if wsys.def.cloak then\n    defstring = defstring .. \"<deep_sky_blue>C \"\n  end\n  if wsys.def.kola then\n    defstring = defstring .. \"<yellow>K \"\n  end\n  if wsys.def.density then\n    defstring = defstring .. \"<maroon>M \"\n  end -- if\n  if wsys.def.heldbreath then\n    defstring = defstring .. \"<light_grey>br\"\n  end --if\n  return defstring\nend\n\nwsys.prompttags[\"invdef\"] = function() \n  local invdefstring = \"\"\n  if not wsys.def.blindness then\n    invdefstring = invdefstring .. \"<SeaGreen>B \"\n  end\n  if not wsys.def.deafness then\n    invdefstring = invdefstring .. \"<SeaGreen>D \"\n  end\n  if not wsys.def.cloak then\n    invdefstring = invdefstring .. \"<deep_sky_blue>C \"\n  end\n  if not wsys.def.kola then\n    invdefstring = invdefstring .. \"<yellow>K \"\n  end\n  if not wsys.def.density then\n    invdefstring = invdefstring .. \"<maroon>M \"\n  end -- if\n  if wsys.def.heldbreath then\n    invdefstring = invdefstring .. \"<light_grey>br\"\n  end --if\n  return invdefstring\nend\n\nwsys.prompttags[\"npchp\"] = function()\n  if gmcp.IRE.Target then         \n    if gmcp.IRE.Target.Set == \"\" or gmcp.IRE.Target.Info.id == \"-1\" then\n      return \"\"\n    elseif gmcp.IRE.Target then\n      return tonumber(string.findPattern(gmcp.IRE.Target.Info.hpperc, \"%d+\"))\n    end\n  else\n    return \"\"\n  end\nend\n\nwsys.prompttags.mylimbs = function()\n\tlocal str = \"\"\n\t\n\tlocal limbs = {\n\t\"left leg\",\n\t\"right leg\",\n\t\"left arm\",\n\t\"right arm\",\n\t\"torso\",\n\t\"head\",\n}\n\tlocal colors = { \n\t\t{ c = \"<dark_slate_gray>\", val = 0 },\n\t\t{ c = \"<grey>\", val = 1 },\n\t\t{ c = \"<brown>\", val = 4 },\n\t\t{ c = \"<orange>\", val = 7 },\n\t\t{ c = \"<red>\", val = 10 },\n\t\t}\n\n\tlocal first = true\n\tfor _,limb in pairs(limbs) do\n\t\tif not first then\n\t\t\tstr = str..\"<dark_slate_gray>|\"\n\t\tend\n\t\tlocal d = tonumber(wsys.tb.selflimbdamage[limb].damage)\n\t\tlocal color = colors[0] \n\t\td = math.floor(d+0.5)\n\t\tfor _,t in ipairs( colors ) do\n\t\t\tif d >= t.val then\n\t\t\t\tcolor = t.c\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\n\t\tstr = str.. color..d\n\t\tfirst = false\n\tend\n\treturn str\nend\n\n--table of default prompt tag colors\nwsys.prompttagcolors = wsys.prompttagcolors or {} \n  \nwsys.prompttagcolors[\"hcolour\"] = function()\n  if wsys.stats.h >= (wsys.stats.maxh * 0.75) then\n    return \"sea_green\"\n  elseif wsys.stats.h >= (wsys.stats.maxh * 0.33) then\n    return \"gold\"\n  else\n    return \"red\"\n  end --if\nend\n\nwsys.prompttagcolors[\"mcolour\"] = function()\n  if wsys.stats.m >= (wsys.stats.maxm * .75) then\n    return \"sea_green\"\n  elseif wsys.stats.m >= (wsys.stats.maxm * .50) then\n    return \"gold\"\n  else\n    return \"red\"\n  end -- if\nend\n\nwsys.prompttagcolors[\"wcolour\"] = function()\n  if wsys.stats.w >= (wsys.stats.maxw * .66) then\n    return \"sea_green\"\n  elseif wsys.stats.w >= (wsys.stats.maxw * .50) then\n    return \"gold\"\n  else\n    return \"red\"\n  end -- if\nend\n\nwsys.prompttagcolors[\"ecolour\"] = function()\n  if wsys.stats.e >= (wsys.stats.maxe * .66) then\n    return \"sea_green\"\n  elseif wsys.stats.e >= (wsys.stats.maxe * .50) then\n    return \"gold\"\n  else\n    return \"red\"\n  end -- if\nend\n\nwsys.prompttagcolors[\"kaicolour\"] = function()\n  if wsys.stats.kai < 10 then\n    --can't even choke\n    return \"red\"\n  elseif wsys.stats.kai < 21 then\n    --can't heal\n    return \"firebrick\"\n  elseif wsys.stats.kai < 41 then\n    --can't cripple\n    return \"dark_orange\"\n  elseif wsys.stats.kai < 61 then\n    --can't enfeeble\n    return \"yellow\"\n  elseif wsys.stats.kai >= 61 then\n    --can do anything\n    return \"green\"\n  end\nend\n                  \nwsys.prompttagcolors[\"shincolour\"] = function()\n  if wsys.stats.shin < 4 then\n    --can't even infuse\n    return \"red\"\n  elseif wsys.stats.shin < 14 then\n    --can't fist\n    return \"firebrick\"\n  elseif wsys.stats.shin < 29 then\n    --can't blizzard\n    return \"dark_orange\"\n  elseif wsys.stats.shin < 39 then\n    --can't annihilate\n    return \"yellow\"\n  else\n    --can do anything\n    return \"green\"\n  end\nend",
    "eventHandlerList": null
}