{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "Backtracking",
    "packageName": null,
    "script": "function backtrack(aff)\n  if not tarAff(aff) then\n    for k, v in pairs(lastcured) do\n      if v == aff and (curetime[k] + 3 >= getEpoch()) then\n        Cure(k)\n        break\n      end\n    end\n    Tragedy.noshowAdd(aff)\n  end\nend\n\ncmethods =\n  {\n    [\"asthma\"] = {\"tree\", \"kelp\"},\n    [\"anorexia\"] = {\"focus\", \"tree\"},\n    [\"slickness\"] = {\"tree\", \"bloodroot\", \"smoke\"},\n    [\"impatience\"] = {\"tree\", \"goldenseal\"},\n    [\"guilt\"] = {\"lobelia\", \"tree\"},\n    [\"spiritburn\"] = {\"lobelia\", \"tree\"},\n    [\"tenderskin\"] = {\"lobelia\", \"tree\"},\n    [\"stupidity\"] = {\"goldenseal\", \"tree\", \"focus\"},\n  }\n\t\nfunction backtrack2(aff)\n  local method = highestcuremethod(aff) --run that aff (from the above table) through a function that determines the most recently used possible curemethod for that aff\n  if tarAff(aff) then --if the target has that aff\n    if lastcured[method] ~= aff then --and the last thing cured by that method wasn't the aff (i.e. maybe I reapplied between things)\n      if not tarAff(lastcured[method]) then --and target doesn't have the last thing I thought that method cured\n        if curetime[method] then\t--if that method was actually used to cure since I reset tracking\n          if getEpoch() - 1 <= curetime[method] then\t--if it happened within 1 second\n            Tragedy.noshowAdd(lastcured[method])\t--add what I assumed had been cured by the method\n          end\n        end\n      end\n    end\n    Tragedy.curedaff(aff)\t--cure the specific aff they can't have (ano/slick/whatever lock aff that can be tracked as cured by symptom)\n  end\nend\n\n\nfunction highestcuremethod(aff)\n  local m = {0, 0}\n  for k, v in pairs(cmethods[aff]) do\n    if curetime[v] then\n      if m[1] < curetime[v] then\n        m[1] = curetime[v]\n        m[2] = v\n      end\n    end\n  end\n  return m[2]\nend\n\nfunction highestcuretime()--returns kelp or ash or w/e as index so that lastcured[highestcuretime] will return an affname\n  local m = {0, 0}\n  for k, v in pairs(curetime) do\n    if not tarAff(lastcured[k]) then\n      if m[1] < v then\n        m[1] = v\n        m[2] = k\n      end\n    end\n  end\n  return m[2]\nend",
    "eventHandlerList": null
}