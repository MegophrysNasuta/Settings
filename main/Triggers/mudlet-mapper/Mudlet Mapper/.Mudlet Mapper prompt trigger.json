{
    "attribs": {
        "isActive": "no",
        "isFolder": "no",
        "isTempTrigger": "no",
        "isMultiline": "no",
        "isPerlSlashGOption": "no",
        "isColorizerTrigger": "no",
        "isFilterTrigger": "no",
        "isSoundTrigger": "no",
        "isColorTrigger": "no",
        "isColorTriggerFg": "no",
        "isColorTriggerBg": "no"
    },
    "type": "trigger",
    "name": "Mudlet Mapper prompt trigger",
    "script": "-- to be enabled by functions that need it and disabled after it's done. Sort of like a cheap prompttrigger from Svo.\nmmp.firstAlert = false\n-- handle alertness\nif mmp.alertness and next(mmp.alertness) then\n\n  local dirs = {}\n  for direction, _ in pairs(mmp.alertness) do dirs[#dirs+1] = direction end\n  local people = select(2, next(mmp.alertness)) or {}\n\n  moveCursor(0, getLineNumber())\n\n  if ndb then\n    local getcolor = ndb.getcolor\n    for i = 1, #people do\n      people[i] = getcolor(people[i])..people[i]\n    end\n  end\n\n  cinsertText(\"<red>[<cyan>\" .. table.concat(dirs, ', ') .. \" <red>-\"..(#dirs > 1 and (\"\\n  \") or '')..\" <white>\" .. ((svo and svo.concatand) and svo.concatand(people) or table.concat(people, ', ')) .. \"<cyan> (\"..#people..\")<red>]\\n\")\n\n  moveCursorEnd()\n\n  mmp.alertness = nil\n\n  raiseEvent(\"mmapper updated pdb\")\nend\n\n-- reset names we last seen, so scripts can be efficient\n-- not finished yet\n--if next(mmp.pdb_lastupdate) then\n--  mmp.pdb_lastupdate = {}\n--end\n\ndisableTrigger\"Mudlet Mapper prompt trigger\"",
    "triggerType": "0",
    "conditonLineDelta": "0",
    "mStayOpen": "0",
    "mCommand": null,
    "packageName": null,
    "mFgColor": "#ff0000",
    "mBgColor": "#ffff00",
    "mSoundFile": null,
    "colorTriggerFgColor": "#000000",
    "colorTriggerBgColor": "#000000",
    "regexCodeList": "\n\t\t\t\t\t\t",
    "regexCodePropertyList": "\n\t\t\t\t\t\t",
    "matches": [
        [
            null,
            "7"
        ]
    ]
}