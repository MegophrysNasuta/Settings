<MudletPackage version="1.001"><TriggerPackage><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName>Talisman</packageName><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman Trade In</name><script>talisman.highlight()
local talismankey = talisman.getkey(multimatches[2][4])
if talismankey then
	talisman.announce(talismankey, tonumber(multimatches[2][3]))
	talisman.add(talismankey, tonumber(multimatches[2][3]), 1)
end
if layout then
	layout.chatAppend("&lt;CadetBlue&gt;"..line.."\n")
end
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>has traded the level</string><string>^(\w+) has traded the level (\d+) piece '(.+)' to you\.$</string></regexCodeList><regexCodePropertyList>
						<integer>0</integer><integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman Market Item</name><script>cecho(string.format("  &lt;yellow&gt;(%s)", math.round(tonumber(matches[2])/13500, 1)))
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>^\d+\s+\w \w+\s+\d+\s+\w+\s+(\d+)\s+\d+\s+(No|Yes)$</string></regexCodeList><regexCodePropertyList>
						<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Stocking Talisman (same as normal but no gate)</name><script>local talismankey = talisman.getkey(matches[2])
if refinedtalisman then
  talisman.add(talismankey, 1, 1, talisman.types.refine)
else
  talisman.add(talismankey, 1, 1, talisman.types.promo)
end
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>^You have been awarded with (.+) talisman piece\!$</string></regexCodeList><regexCodePropertyList>
						<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman Trade Out</name><script>-- NOTE: this trigger does not remove pieces.. We assume you used the trade alias, which removed them
-- This means you should not manually trade or it will lose track of pieces.
talisman.highlight()
local talismankey = talisman.getkey(multimatches[2][3])
if talismankey then
	talisman.announce(talismankey, 0)
end
if layout then
	layout.chatAppend("&lt;CadetBlue&gt;"..line.."\n", true)
end

</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>You trade the level </string><string>^You trade the level (\d+) piece (.+) to (\w+)\.$</string></regexCodeList><regexCodePropertyList>
						<integer>2</integer><integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman Found</name><script>talisman.highlight()
local talismankey = talisman.getkey(multimatches[2][2])
if talismankey then
	local initcount = talisman.getcount(talismankey)
	talisman.announce(talismankey, tonumber(multimatches[2][3]))
	talisman.add(talismankey, tonumber(multimatches[2][3]), 1)
	if layout then
		layout.chatAppend(string.format("&lt;CadetBlue&gt;%s (%d)(%s)\n", line, talisman.getcount(talismankey), (Denizen or "?")), true)
	end
elseif layout then
	layout.chatAppend(string.format("&lt;CadetBlue&gt;%s (unknown?)\n", line))
end
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>You have found </string><string>^You have found (.+) \(level (\d+)\) talisman piece!$</string></regexCodeList><regexCodePropertyList>
						<integer>2</integer><integer>1</integer></regexCodePropertyList></Trigger><TriggerGroup isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman Cache Opened</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>10</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						</regexCodeList><regexCodePropertyList>
						</regexCodePropertyList><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>End of Cache</name><script>setTriggerStayOpen("Talisman List", 0)
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>return isPrompt()</string></regexCodeList><regexCodePropertyList>
							<integer>4</integer></regexCodePropertyList></Trigger><Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>New Talisman Piece</name><script>local talismankey = talisman.getkey(matches[2])
talisman.add(talismankey, 1, 1, talisman.types.promo)

</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>^You have been awarded with (.+) talisman piece\!$</string></regexCodeList><regexCodePropertyList>
							<integer>1</integer></regexCodePropertyList></Trigger></TriggerGroup><TriggerGroup isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Refined Something</name><script>refinedtalisman=true</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>100</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						</regexCodeList><regexCodePropertyList>
						</regexCodePropertyList><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Refined Prompt</name><script>refinedtalisman=false
setTriggerStayOpen("Refined Something", 0)

</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string /></regexCodeList><regexCodePropertyList>
							<integer>7</integer></regexCodePropertyList></Trigger></TriggerGroup><TriggerGroup isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman List</name><script>talisman.more = 0
talisman.reset()
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>999</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						</regexCodeList><regexCodePropertyList>
						</regexCodePropertyList><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman Item</name><script>talisman.add(matches[5], matches[4], tonumber(matches[3]), matches[2])
talisman.deleteLineP()
-- 1 a Blue Dragon's claw                   5     Dragon     bluedragonclaw

</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>^(P|Q|B|F|R)?\s*(\d+) .+\s+(\d+)\s+(?:\w+\s+)?(\w+)</string></regexCodeList><regexCodePropertyList>
							<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman Prompt</name><script>if talisman.more==1 then
	send("more")
	talisman.more = 2
elseif talisman.more==0 then
	setTriggerStayOpen("Talisman List", 0)
end
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>return isPrompt()</string></regexCodeList><regexCodePropertyList>
							<integer>4</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman More</name><script>talisman.more = 1
talisman.deleteLineP()
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>[Type MORE if you wish to continue reading.</string></regexCodeList><regexCodePropertyList>
							<integer>2</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Talisman Continued</name><script>talisman.more = 0
talisman.deleteLineP()
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>[File continued via MORE]</string></regexCodeList><regexCodePropertyList>
							<integer>3</integer></regexCodePropertyList></Trigger></TriggerGroup></TriggerGroup></TriggerGroup><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Forager Status Report</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName>Forager Status Report</packageName><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Custom Stuff</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>foraging abundant</name><script>forageArea = matches[2]
forageStatus = "abundant"
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>^Your foragers report back to you with much vigour\, claiming an abundance of resources to be gathered in (.+)\.$</string></regexCodeList><regexCodePropertyList>
						<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Band Report</name><script>send("writelog erc Foraging Status: " ..forageArea.. " - " ..forageStatus.. " prospects with " ..matches[2].. " bands present")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>^Your scouts report that there appears to be approximately (\d+) bands of individuals already gathering\.$</string><string>^Your scouts report that there appears to be approximately (\d+) bands of individuals already gathering resources in this locale\.$</string></regexCodeList><regexCodePropertyList>
						<integer>1</integer><integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>foraging devoid</name><script>forageArea = matches[2]
forageStatus = "devoid"
--send("writelog erc Foraging Status: " ..matches[2].. " - devoid with " ..matches[3].. " bands present")

</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>^Your foragers report back to you, noting that the (.+) seems devoid of resources\.$</string></regexCodeList><regexCodePropertyList>
						<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>foraging positive</name><script>forageArea = matches[2]
forageStatus = "positive"
--send("writelog erc Foraging Status: " ..matches[2].. " - positive prospects with " ..matches[3].. " bands present")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>^Your foragers report back to you\, seeming positive about the potential prospects of a full expedition to the (.+)\.$</string></regexCodeList><regexCodePropertyList>
						<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Band report 2</name><script>send("writelog erc Foraging Status: " ..forageArea.. " - " ..forageStatus.. " prospects with 0 bands present")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>Your scouts report that there doesn't seem to be anyone actively scouring this locale for resources at the present.</string></regexCodeList><regexCodePropertyList>
						<integer>0</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>foraging scant</name><script>forageArea = matches[2]
forageStatus = "scant"
--send("writelog erc Foraging Status: " ..matches[2].. " - scant prospects with " ..matches[3].. " bands present")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>^Your foragers report back to you, unenthusiastically reporting that there are some scant resources to be gathered in the (.+)\.$</string></regexCodeList><regexCodePropertyList>
						<integer>1</integer></regexCodePropertyList></Trigger></TriggerGroup></TriggerGroup><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>cdb 1.1</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName>cdb 1.1</packageName><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>cdb (triggers)</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no"><name>city enemies</name><script>if multimatches[2][1]:find("City of") and cdb.gettingenemies then
  cdb.enemies = {}
  for _, n in pairs(string.split(multimatches[4][1], ",")) do
    cdb.enemies[n:trim()] = true
  end
  echo("\n")
  cdb.echo("Updated &lt;orange&gt;city enemies &lt;white&gt;list.")
  cdb.gettingenemies = false
  cdb.save()
end
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#00b300</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						<string>Enemies of the </string><string>FG6BG2</string><string>1</string><string>.+</string><string>1</string><string>Total:</string></regexCodeList><regexCodePropertyList>
						<integer>2</integer><integer>6</integer><integer>5</integer><integer>1</integer><integer>5</integer><integer>2</integer></regexCodePropertyList></Trigger><TriggerGroup isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>honors get city</name><script>cdb.honors.title = matches[2]
cdb.honors.city = "(none)"</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>20</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
						</regexCodeList><regexCodePropertyList>
						</regexCodePropertyList><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>prompt end honors</name><script>setTriggerStayOpen("honors get city", 0)
cdb.honorsupdate()
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string /></regexCodeList><regexCodePropertyList>
							<integer>7</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>get city</name><script>cdb.honors.city = matches[2]:lower()
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>^(?:She|He) is an? \w+ in (\w+)\.$</string></regexCodeList><regexCodePropertyList>
							<integer>1</integer></regexCodePropertyList></Trigger></TriggerGroup></TriggerGroup></TriggerGroup><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Chat</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName>Chat</packageName><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>tabbed chat2</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName>tabbed chat2</packageName><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Tabbed Chat</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>House</name><script>demonnic.chat:append("House")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>(Thralls):</string><string>(Legates):</string><string>(Hellions):</string><string>(Vanguard):</string><string>&lt;&lt;Vanguard&gt;&gt;:</string></regexCodeList><regexCodePropertyList>
							<integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Tells</name><script>demonnic.chat:append("Tells")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>^\w+ tells you</string><string>You tell</string><string>^\w+ (.+) tells you</string><string>You (.+) tell</string><string>The Divine voice of</string><string>You (\w+) tell</string><string>^\w+ (\w+) tells you</string><string>With sharp, crackling tones, you tell</string><string>Your voice burns with heat as you</string><string>Your voice sizzles as you tell</string><string>Your voice quietly thrums</string></regexCodeList><regexCodePropertyList>
							<integer>1</integer><integer>2</integer><integer>1</integer><integer>2</integer><integer>1</integer><integer>1</integer><integer>1</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>City</name><script>demonnic.chat:append("City")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>(Mhaldor):</string><string>(Newbie):</string><string>(Ashtan):</string><string>(Targossas):</string><string>(Eleusis):</string><string>(Hashan):</string><string>(Cyrene):</string></regexCodeList><regexCodePropertyList>
							<integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Order</name><script>demonnic.chat:append("Order")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>(Order):</string></regexCodeList><regexCodePropertyList>
							<integer>2</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Combat</name><script>demonnic.chat:append("Combat")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>^(\w+) tells (\w+)\: (.+)\.$</string><string>^(\w+) tells (\w+)\: (.+)\?$</string><string>^(\w+) tells (\w+)\: (.+)\!$</string></regexCodeList><regexCodePropertyList>
							<integer>1</integer><integer>1</integer><integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Clans</name><script>demonnic.chat:append("Clans")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>(The Midnight Crew):</string><string>(Project 9):</string><string>(Mudlet Clan):</string><string>(Antlion's Den):</string><string>(Davey Jones' Locker):</string><string>(The al'Dejan family):</string><string>(Jester's Carousal):</string><string>(Mischief 101):</string><string>(Pirates of Meropis):</string><string>(The Soaring Sodality):</string><string>(Jin's Gin Joint):</string><string>(The Dread Navy of Ashtan):</string><string>(Ashuran Academy):</string><string>(The Warriors of Sapience):</string><string>(The Batcave):</string><string>(Colloquium Iniquus):</string><string>(WunderSys):</string><string>(The Mera'din):</string><string>(Flawless Victoly):</string><string>(Military Institute of Baelgrim):</string><string>(The Knights of Three Moons):</string><string>(Gleamius Phallus):</string><string>(Disciples of Ruin):</string><string>(Thug Life):</string><string>(Ashtani Ambassador Coalition):</string><string>(Ashtan Culture Ministry):</string><string>(The Hunting Gang):</string><string>(NFL Fan Clan):</string><string>(Al'Jafri):</string><string>(The Spider's Web):</string><string>(The Parthren Gare):</string><string>(Market):</string></regexCodeList><regexCodePropertyList>
							<integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer><integer>2</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Party</name><script>demonnic.chat:append("Party")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>(Party):</string><string>(Group):</string></regexCodeList><regexCodePropertyList>
							<integer>2</integer><integer>2</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Says</name><script>demonnic.chat:append("Says")
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>^.* says in</string><string>You say</string><string>^\w+ says with a</string><string>You smile and say</string><string>^.* says,</string><string>^.* says to you,</string><string>^(([a-zA-Z ,'^_-]+) (?:scream|mutter|chant|sing|whine|exclaim|snarl|say)s?[a-zA-Z ,'-]*, ".+")$.</string><string>^.* says to</string><string>^.* (.+) says,</string><string>^.* (.+) says to</string><string>^.* (.+) says to you,</string></regexCodeList><regexCodePropertyList>
							<integer>1</integer><integer>2</integer><integer>1</integer><integer>2</integer><integer>0</integer><integer>1</integer><integer>1</integer><integer>1</integer><integer>0</integer><integer>1</integer><integer>1</integer></regexCodePropertyList></Trigger></TriggerGroup></TriggerGroup></TriggerGroup><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Prospector</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName>Prospector</packageName><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>prospectingtriggers</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName>prospectingtriggers</packageName><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Prospecting</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Stronghold found</name><script>strongholdowner=matches[2]

strongholdtable[gmcp.Room.Info.num] = {strongholdowner, gmcp.Room.Info.name, gmcp.Room.Info.area}
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>This stronghold is controlled by (\w+).</string></regexCodeList><regexCodePropertyList>
							<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Lode found</name><script>lodesize = matches[2]
lodetype = matches[3]
if lodesize == "small" or lodesize == "medium" or lodesize == "tiny" then

else
mmp.stop() --Mudlet mapper command
prospecting = 0
killTimer(tostring(prospectingtimer))
send("clan erc tell " ..lodetype .. " found at " .. gmcp.Room.Info.name.. " (" ..gmcp.Room.Info.num.. ") SIZE: " ..lodesize)
end


lodetable[gmcp.Room.Info.num] = {lodesize, lodetype, gmcp.Room.Info.name, gmcp.Room.Info.area}

</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ffff00</mFgColor><mBgColor>#ff55ff</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>^You determine that there is a (\w+) lode of (.*) here.</string></regexCodeList><regexCodePropertyList>
							<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Mine sign</name><script>mineowner = matches[2]

if minetable[minetype] == nil then
	minetable[minetype] = {}
end

loderoom[gmcp.Room.Info.num] = {osminesize, mineowner, minelode, mineprogress, gmcp.Room.Info.name, gmcp.Room.Info.area}
table.insert(minetable[minetype], loderoom)
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>This (?:.*) mine is owned by (\w+).</string></regexCodeList><regexCodePropertyList>
							<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>Mine found</name><script>loderoom = {}
minesize = matches[2]
minetype = matches[3]
minelode = matches[4]
mineprogress = matches[5]*1




--minetable[loderoom] = {minetype, minelode, mineprogress}
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
							<string>^There is a (\w+) (.*) mine here on a (\w+) lode that you'd guess is approximately (\w+)% mined out\.$</string></regexCodeList><regexCodePropertyList>
							<integer>1</integer></regexCodePropertyList></Trigger></TriggerGroup></TriggerGroup></TriggerGroup><TriggerGroup isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>cart setup</name><script>local vialID = matches[2]
echoLink('\nAdd to Cart (50gp)',
         function() send('cart price '.. vialID ..' 50') end,
         '')</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
				</regexCodeList><regexCodePropertyList>
				</regexCodePropertyList></TriggerGroup><TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>OpSec</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList /><regexCodePropertyList /><Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>opsec_grossshitonground</name><script>opsec.wait = true
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
					<string>Your movement is slowed as you move through the decimated remains.</string></regexCodeList><regexCodePropertyList>
					<integer>3</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>opsec_nowormhole</name><script /><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ebe591</mFgColor><mBgColor>#000000</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
					<string>You sense no wormhole here.</string></regexCodeList><regexCodePropertyList>
					<integer>3</integer></regexCodePropertyList></Trigger><Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>opsec_yeswormhole</name><script>opsec.wormholes = (opsec.wormholes or {})

opsec.wormholes[gmcp.Room.Info.num] = matches[2]
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
					<string>^You sense a wormhole leading to (.*)\.$</string></regexCodeList><regexCodePropertyList>
					<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>opsec_checktotem_loyalty</name><script>totem_target = matches[2]
if totem_target ~= 'enemies of the City of '.. gmcp.Room.Info.area then
  cecho('\n&lt;cyan&gt;TOTEM SETUP WARNING: Tune '..
        'against enemies of '.. gmcp.Room.Info.area ..
        ', not '.. totem_target ..'.')
  opsec.checkedSlots[7] = totem_target
else cecho('\t\t&lt;cyan&gt;OK.') end
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
					<string>^It is tuned against (.+)\.$</string></regexCodeList><regexCodePropertyList>
					<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>opsec_checktotem_empower</name><script>opsec.totem_empowered = 1
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
					<string>The totem is currently empowered and will warn of attempts to defile it.</string></regexCodeList><regexCodePropertyList>
					<integer>3</integer></regexCodePropertyList></Trigger><Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>opsec_checktotem_runes</name><script>local rune = matches[3]
local slot = matches[4]

if (gmcp.Room.Info.area == 'Targossas') then
  if ((slot == '3') and (rune ~= 'a butterfly')) then
    cecho('\n&lt;cyan&gt;TOTEM SETUP WARNING: Slot 3 is usually nairat.')
  elseif (((slot == '1') or (slot == '2')) and (rune ~= 'an open eye')) then
    cecho('\n&lt;cyan&gt;TOTEM SETUP WARNING: Slots 1 &amp; 2 are usually wunjo.')
  elseif (((slot == '4') or (slot == '5') or (slot == '6')) and (rune ~= 'a closed eye')) then
    cecho('\n&lt;cyan&gt;TOTEM SETUP WARNING: Slots 4 - 6 are usually fehu.')
  else
    if (slot ~= '3') then cecho('\t') end
    cecho('\t\t&lt;cyan&gt;OK.')
    opsec.checkedSlots[slot] = 'OK'
  end
elseif (gmcp.Room.Info.area == 'Hashan' or gmcp.Room.Info.area == 'Mhaldor') then
  if ((slot == '1') and (rune ~= 'an open eye')) then
    cecho('\n&lt;cyan&gt;TOTEM SETUP WARNING: Slot 1 is usually wunjo.')
  elseif ((slot == '2') and ((rune ~= 'a bell') and (rune ~= 'an open eye'))) then
    cecho('\n&lt;cyan&gt;TOTEM SETUP WARNING: Slot 2 is usually wunjo or mannaz.')
  elseif ((slot == '3') and ((rune ~= 'a butterfly') and
          (rune ~= 'an open eye') and (rune ~= 'a nail'))) then
    cecho('\n&lt;cyan&gt;TOTEM SETUP WARNING: Slot 3 is usually nairat, wunjo, or sowulu.')
  elseif (((slot == '4') or (slot == '5') or (slot == '6')) and
          ((rune ~= 'a butterfly') and (rune ~= 'a closed eye') and
           (rune ~= 'a nail'))) then
    cecho('\n&lt;cyan&gt;TOTEM SETUP WARNING: Slots 4 - 6 are usually nairat, fehu, or sowulu.')
  else
    if ((rune == 'an open eye') or (rune == 'a bell') or
        ((rune ~= 'a butterfly') and (rune ~= 'a nail') and
            ((slot == '4') or (slot =='5') or (slot == '6')))) then cecho('\t') end
    cecho('\t\t&lt;cyan&gt;OK.')
    opsec.checkedSlots[slot] = 'OK'
  end
end

if opsec.checkedSlots[slot] ~= 'OK' then
  opsec.checkedSlots[slot] = rune
end
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#aaffff</mFgColor><mBgColor>#0000ff</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
					<string>^A rune (like|resembling|that looks like|shaped like) (.+) is sketched in slot (\d{1}).$</string></regexCodeList><regexCodePropertyList>
					<integer>1</integer></regexCodePropertyList></Trigger><Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>opsec_checkmono_flame</name><script>opsec.flame_rune_found = 1
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
					<string>There is a flame-shaped sigil attached.</string></regexCodeList><regexCodePropertyList>
					<integer>2</integer></regexCodePropertyList></Trigger><Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>opsec_missing_item</name><script>cecho('\n&lt;red&gt;Monolith sigil or totem is missing at '.. gmcp.Room.Info.name ..'!')
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>0</mStayOpen><mCommand /><packageName /><mFgColor>#00aaff</mFgColor><mBgColor>#000000</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
					<string>What do you wish to examine?</string></regexCodeList><regexCodePropertyList>
					<integer>3</integer></regexCodePropertyList></Trigger><Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no"><name>opsec_keeppose</name><script>local fullname = gmcp.Char.Name.fullname:gsub('%.', '%%.'):gsub('%-', '%%-')
local pose = matches[1]:gsub('Your current pose is: ', ''):gsub(fullname, '^')
opsec = (opsec or {})
opsec.lastPose = pose
</script><triggerType>0</triggerType><conditionLineDelta /><mStayOpen>1</mStayOpen><mCommand /><packageName /><mFgColor>#ff0000</mFgColor><mBgColor>#ffff00</mBgColor><mSoundFile /><colorTriggerFgColor>#000000</colorTriggerFgColor><colorTriggerBgColor>#000000</colorTriggerBgColor><regexCodeList>
					<string>^Your current pose is: .*</string></regexCodeList><regexCodePropertyList>
					<integer>1</integer></regexCodePropertyList></Trigger></TriggerGroup></TriggerPackage><TimerPackage /><AliasPackage><AliasGroup isActive="yes" isFolder="yes"><name>TargetCallTables</name><script /><command /><packageName /><regex /><Alias isActive="yes" isFolder="no"><name>Show Current Target Prio List</name><script>cecho('\n&lt;'.. TargetCallTables.Config.EchoColor ..'&gt;Current target prios:\n')
for prio, tgt in pairs(TargetCallTables.targetPrios) do
  cecho(('&lt;'.. TargetCallTables.Config.EchoColor ..'&gt;'.. tostring(prio) ..': '
         .. tgt ..'\n'))
end
</script><command /><packageName /><regex>^stlist$</regex></Alias><Alias isActive="yes" isFolder="no"><name>Set Target N</name><script>local num = matches[2]
local tar = matches[4]

if tar ~= nil then
  TargetCallTables.addTarget(num, tar)
else
  TargetCallTables.callTarget(num)
end
</script><command /><packageName /><regex>^st(\d+)( (\w+))?$</regex></Alias><Alias isActive="yes" isFolder="no"><name>Next Target</name><script>TargetCallTables.nextTarget()
</script><command /><packageName /><regex>^nt$</regex></Alias><Alias isActive="yes" isFolder="no"><name>Set List of Targets</name><script>local targets = {}
local targetList = string.gsub(matches[1], "^st ", "")
for t in string.gmatch(targetList, "%w+") do
  if t ~= "and" then
    targets[#targets + 1] = t
  end
end

if #targets == 1 then
  target = targets[1]:lower():title()
  sendAll('st '.. targets[1], 'pt Target: '.. targets[1])
else
  TargetCallTables.setTargets(targets)
end
</script><command /><packageName /><regex>^st (\w+[, ]*)*\.?$</regex></Alias></AliasGroup><AliasGroup isActive="yes" isFolder="yes"><name>OpSec Private</name><script /><command /><packageName /><regex /><Alias isActive="yes" isFolder="no"><name>Targossas Opsec Path</name><script>-- fun fact: this is backwards because it's the only efficient way to pop in lua
local commands = {
  -- Veil's end
  'goto 40513', 'ne', 'n', 'w', 'n', 'goto 40975',
  'e', 'se', 's', 'sw', 'se', 'ne', 'ne', 's', 'goto 6848', 'goto 6850',
  'sw', 'goto 4715', 'goto 4883', 'goto 4888', 'goto 5243', 'e', 'e', 'goto 2656',
  'sw', 'e', 'se', 'e', 'se', 'se', 'w', 'goto 40370',
  -- Eusian Falls
  'up', 'n', 'up', 'up', 's', 's', 'up', 'n', 'n', 'up', 's', 'goto 40490',
  -- Shornwall
  'goto 40403', 'w', 's',' w', 'n', 'goto 40235', 'n', 'e',
  'goto 40739', 'goto 4309', 'goto 42', 'goto 40372', 'n', 'se', 'sw', 'goto 3687',
  'goto 5515', 'goto 6844', 'goto 40435', 'goto 5403', 'goto 4462',
  'sw', 'sw', 'w', 'goto 40218', 'goto 40766',
  's', 'se', 'se', 'e', 'nw', 'goto 20797',
  -- Anost
  'n', 'n', 'se', 'ne', 'goto 40154',
  's', 'e', 'e', 'goto 40090', 's', 'se', 'goto 40069',
  -- Duskmere
  'sw', 's', 'goto 40431',
  's', 'sw', 's', 'ne', 'e', 'goto 2353', 'e', 'sw',
  'w', 'w', 'sw', 'n', 'nw', 'w', 'ne', 'e', 'e', 'se', 'goto 22107',
  'goto 6856', 'e', 'nw', 'down', 'goto 40346', 'goto 4220', 'goto 5494',
  'goto 3725', 'goto 6862', 'nw', 'n', 'e', 'e', 'e', 'goto 38928',
  -- Blackstone Quarter
  'n', 'down', 'e', 'down', 'down', 'down', 'ne', 'e', 'goto 51853',
  'n', 'e', 'se', 'e', 'down', 's', 'ne', 'n', 'n', 'n', 'goto 39933',
  'up', 'up', 'goto 40461', 'w', 's', 's', 'sw', 'goto 40387',
  -- Averrone
  's', 'se', 'se', 'ne', 'goto 41814', 'up', 'goto 41095', 'up', 'se', 'goto 40776',
  -- Sundown &amp; Mirror Isles
  'e', 'e', 'e', 'goto 35083', 'goto 35279', 'goto 42079', 'goto 4431', 'goto 42678',
  'sw', 'w', 'sw', 'se', 'goto 41322', 'w', 'sw', 'w', 'goto 36883',
  -- Acacia Isle
  'goto 38903', 'goto 40785', 'up',
  'n', 'ne', 'ne', 'e', 'n', 'n', 'w', 'w', 'w', 's', 's', 'se', 's', 'goto 32098',
  'sw', 'se', 'goto 3852', 'goto 6854', 'goto 3551',
  'nw', 'sw', 'e', 'goto 3722', 's', 'w', 'goto 3831', 'goto 40684',
  -- Greathorn
  'nw', 'w', 'w', 'sw', 'w', 'goto 39992',
  'sw', 'goto 42233', 'goto 41251', 'n', 'goto 40906', 'goto 40026', 'goto 40755', 'w', 'n', 'nw', 'nw',
  -- Pillars of the Morning
  'goto 40031', 'n', 'w', 'w', 'n', 'goto 40349',
  'up', 'up', 'in', 'se', 's', 's', 'goto 40356',
  'up', 'up', 'in', 'ne', 'e', 'e', 'e', 'n', 'n', 'goto 40243',
  -- Western Brighthold &amp; Isle of Ram
  'w', 'n', 'n', 'se', 'goto 45442', 'goto 41550', 'goto 41283', 'goto 22269',
  'goto 41259', 'goto 42146', 'se', 'n', 'goto 41351', 'goto 40367',
  'nw', 'w', 'goto 40359', 's', 's', 'goto 40192', 's', 's', 'goto 40190',
  -- Square and Temples
  'goto 40256', 'goto 40409', 'goto 40415',
  'w', 's', 'w', 'goto 40265', 'goto 40379', 'goto 40374', 'e', 'n', 'w', 'n',
  -- Terrace of the Dawn
  'goto 40257', 'e', 'e', 'e', 'n',
  'goto 40505', 'e', 'n', 'goto 40514', 'e', 'n', 'n', 'goto 40520', 'n', 'w', 'w',
  'goto 40527', 'e', 'e', 's', 'goto 40557', 'goto 40586', 's', 'e', 'n', 'n',
  'goto 40558', 's', 'e', 'goto 40599', 'n', 'e', 'n', 'd'
}

expandAlias('opsec reset')
expandAlias('goto 40609')
opsec.checkWormholes = false

tempTimer(6, [[ echo('\nStarting opsec run in 4...\n') ]])
tempTimer(7, [[ echo('3...\n') ]])
tempTimer(8, [[ echo('2...\n') ]])
tempTimer(9, [[ echo('1...\n') ]])
opsec.runTimer = tempTimer(10, function() opsec.doCommand(commands) end)
</script><command /><packageName /><regex>^checktarg$</regex></Alias><Alias isActive="yes" isFolder="no"><name>Hashan Opsec Path</name><script>-- fun fact: this is backwards because it's the only efficient way to pop in lua
local commands = {
  -- Bazaar &amp; Porta Aquila
  'goto 4639', 's', 'se', 'se', 'e', 'goto 4646',
  'goto 7654', 'sw', 'nw', 'nw', 'n', 'e', 'ne',
  'goto 4650', 'goto 4655', 'n', 'n', 'n', 'goto 4487', 'goto 4674',
  'ne', 'w', 's', 's', 'sw', 's', 's', 's', 's', 'goto 4482',
  'n', 'n', 'n', 'goto 6135', 'n', 'n', 'n', 'goto 5008',
  'n', 'n', 'goto 4543', 'sw', 's', 'se', 'e', 'goto 4538',
  -- Northwestern Corner
  'goto 5930', 'down', 'w', 'goto 31398', 's', 's', 'e', 'se',
  'ne', 'n', 'n', 'nw', 'goto 4531', 'goto 36167', 'goto 4728',
  's', 's', 'nw', 'w', 'goto 4528', 'goto 35274', 'n', 'nw', 'n', 'n', 'sw', 'w',
  'goto 4525', 'goto 36098', 's', 's', 'w', 'sw', 'nw', 'n',
  -- Eventide Alehouse &amp; Serpentis Blvd
  'w', 'w', 'goto 20202', 's', 's', 'goto 6840', 's', 's', 'goto 6830',
  's', 's', 'goto 6836', 'goto 4673', 'n', 'e', 'goto 5487',
  'n', 'e', 'e', 'goto 4516', 'goto 15758', 'out', 's', 's',
  -- Old Quarter
  'ne', 'e', 'se', 'e', 'se', 'goto 4522', 'n', 'e', 'e', 'se', 'goto 1380',
  'w', 'n', 'e', 'goto 4973', 'w', 'w', 'goto 1396', 'e', 'goto 1389',
  'goto 1391', 'w', 'up', 'n', 'goto 1387', 'e', 'n', 'nw', 'nw', 'goto 1395',
  'n', 'w', 'out', 'goto 1332', 'goto 5450', 's', 'goto 1336', 'goto 5553',
  'ne', 's', 'goto 1339', 'w', 'w', 'n', 'goto 6419',
  'ne', 's', 'goto 1373', 'goto 5460', 'goto 1342',
  'se', 'sw', 'w', 'n', 'goto 1404', 'up', 'e', 'n', 'n', 'w',
  -- Coliseum, Obelisk, and Port
  'goto 4493', 'n', 'sw', 'w', 'sw', 'goto 4466', 'up', 'n', 'goto 25811',
  's', 's', 's', 's', 'sw', 's', 'goto 4484', 'goto 4467', 'goto 4508', 'n',
  'w', 'nw', 'w', 'goto 4495', 'n', 'w', 'w', 's', 'se', 's',
  -- Shopping Centre by Crossroads
  'goto 4471', 'se', 'se', 'goto 4399',
  's', 's', 'goto 6822', 's', 's', 'goto 6842',
  'goto 6866', 'up', 'n', 'n', 'w', 'sw', 'n', 'goto 6864',
  -- Court &amp; Seneschal's Complex
  'goto 4564', 'goto 10582', 'goto 19673', 'w', 'n', 'goto 4560',
  'goto 4559', 's', 'nw', 'n', 'w', 'goto 4558', 'goto 5523', 'nw', 'w',
  'goto 5526', 'w', 'sw', 's', 'e', 'goto 5524', 'e', 'ne', 'goto 5520',
  'w', 'sw', 's', 's', 'w', 's', 'goto 6816', 'n', 'sw', 's', 'goto 6824',
  -- Ereptor St &amp; Prospero Ave
  'goto 4599',
  'w', 'goto 39237', 'goto 39331', 'e', 'n', 'in', 'n', 'goto 4601', 'goto 4607',
  'w', 'nw', 'ne', 'e', 's', 'e', 'n', 'goto 4602', 'goto 4613', 'goto 59114',
  'goto 59649', 'n', 'n', 'w', 'w', 'sw', 'se', 'goto 4614', 'goto 6132', 'w', 'up',
  'w', 'w', 's', 'sw', 'goto 4612', 'goto 9988', 'e', 'e', 'se',
  'goto 4622', 'up', 'w', 'se', 'se', 'goto 4619', 'in', 's', 'sw',
  -- Menagerie &amp; Park
  'goto 4599', 'goto 4573', 'nw', 's', 's', 'nw', 'n', 'sw', 'se', 's', 'se',
  'goto 4589', 'goto 4579', 'goto 4584', 'w', 'w', 's', 's', 'e', 'e', 'n', 'e',
  'ne', 'nw', 'w', 'w', 'w', 'sw', 'w', 'sw', 's', 'goto 4569',
  -- Black Lotus Monastery &amp; Porta Nemorosus
  'e', 'se', 'e', 's', 's', 'goto 4630', 'goto 4634', 'goto 1319', 'goto 30359',
  'n', 'e', 'e', 'e', 's', 'se', 'w', 's', 'e', 's', 's',
  -- Planetarium
  'sw', 'sw', 'se', 'e', 'goto 41032', 'goto 27754', 'goto 27769',
  'goto 27759', 'e', 'ne', 'w', 'w', 'w', 'sw', 'e', 'se',
  'd', 's', 'd','d', 'd', 'ne', 'd', 'd', 'sw', 'd', 'd',
}

expandAlias('opsec reset')
expandAlias('goto 26639')
opsec.checkWormholes = false

tempTimer(12, [[ echo('\nStarting opsec run in 4...\n') ]])
tempTimer(13, [[ echo('3...\n') ]])
tempTimer(14, [[ echo('2...\n') ]])
tempTimer(15, [[ echo('1...\n') ]])
opsec.runTimer = tempTimer(16, function() opsec.doCommand(commands) end)
</script><command /><packageName /><regex>^checkhash$</regex></Alias><Alias isActive="yes" isFolder="no"><name>Mhaldor Opsec Path</name><script>-- fun fact: this is backwards because it's the only efficient way to pop in lua
local commands = {
  -- More Balegrim Fortress
  'goto 11090', 'goto 10713', 'up', 'w', 'sw', 's', 's', 'se',
  'e', 'e', 'ne', 'n', 'n', 'nw', 'goto 10717', 'up', 'up', 'goto 10710',
  'goto 10672', 'goto 10671', 'goto 60202', 'goto 60887', 'goto 60998',
  -- Spire of Malevolance
  'goto 60439', 'in', 'out', 'up', 'goto 60369', 'goto 61310', 'goto 61186', 'nw',
  -- Mhaldor Road &amp; Baelgrim Fortress
  'goto 60676', 'goto 31686', 'goto 60202',
  'n', 'n', 'goto 10702', 'e', 'e', 'goto 61716', 'w', 'up',
  'up', 'e', 'goto 10693', 'goto 13436', 'w', 's', 'e', 'e', 'goto 10664',
  'n', 'sw', 's', 'goto 28778', 'nw', 'goto 14314', 'goto 10660',
  'd', 'n', 'n', 'n', 'n', 'up', 'up', 'up', 'up',
  -- Gatehouse &amp; lab
  'goto 11095', 'goto 10577', 'goto 30958', 'w', 's', 
  'goto 11089', 'goto 11142', 'w', 'se', 'goto 11142', 'goto 40330',
  'n', 'e', 'se', 'se', 's', 'goto 11134', 'e', 's', 'goto 11130',
  -- Red Square
  'goto 55665', 'goto 4423', 'goto 11933', 'sw', 's', 'w', 'w', 'nw', 'n',
  'goto 12475', 'goto 52963', 'goto 48909', 'goto 52103', 'goto 9802',
  'goto 9805', 'goto 9766', 'nw', 'e', 'n', 'n', 'nw', 'goto 12479',
  -- Museum &amp; Surrounding
  'goto 46930', 'n', 'in', 'w', 'w', 'goto 12483', 's', 's', 'e', 'n',
  'goto 27425', 'w', 'w', 'n', 'e', 'e', 'ne', 's', 's', 's',
  'goto 27479', 's', 's', 'w', 'sw', 'sw', 'goto 12470',
  'e', 'e', 'goto 18255', 'goto 9843', 'goto 18235', 'goto 16838',
  -- Circle of Damnation &amp; Slave Market
  'e', 'goto 12664', 'goto 13619', 'goto 8374', 'goto 12817',
  'goto 14018', 'goto 13518', 'goto 8396', 'goto 14302',
  'goto 16447', 'goto 15163', 'goto 15045', 'ne', 's', 'se', 'se',
  'goto 12460', 'goto 53384', 'w', 'n', 'e', 'e', 'ne', 'd',
  -- Vault, Blood Gulch, Tavern
  'goto 11127', 'goto 12500', 'goto 12497', 'goto 12515',
  'w', 'up', 'n', 'n', 'w', 'sw', 'd', 'd', 'goto 11145', 's',
  -- Post Office, Lab, Warehouses
  'nw', 'sw', 'goto 13147', 'goto 22328', 'goto 22531', 'goto 12478',
  's', 'sw', 'nw', 'goto 11116', 'goto 11826', 'n', 'e', 'n', 'w',
  -- Belltower &amp; Outer
  's', 's', 's', 'e', 's', 'goto 21698',
  'goto 19972', 'goto 23343', 'n', 'up', 'n', 'w', 'up', 's', 'e',
  -- Cathedral Upper Level
  'goto 21583', 's', 'out', 'goto 23324', 'goto 23318', 'e', 'sw', 'goto 23315',
  'goto 23310', 'n', 'se', 'e', 'goto 23340', 'goto 23309', 'n', 'se',
  'goto 23306', 'n', 'e', 'goto 23303', 'goto 23302', 'w', 'ne',
  'goto 23300', 'goto 23296', 'goto 23295', 'sw', 'n', 'up', 'goto 21920',
  -- Cathedral
  'goto 20460', 'goto 20539', 'goto 21640', 'se', 's', 'sw', 'goto 21536',
  'goto 21666', 'goto 22103', 'up', 'n', 'ne', 'n', 'nw', 'n', 'n',
  'n', 'w', 's', 'e', 's', 'goto 22500', 'n', 'w', 's'
}

expandAlias('opsec reset')
expandAlias('goto 23294')
opsec.checkWormholes = false

tempTimer(12, [[ echo('\nStarting opsec run in 4...\n') ]])
tempTimer(13, [[ echo('3...\n') ]])
tempTimer(14, [[ echo('2...\n') ]])
tempTimer(15, [[ echo('1...\n') ]])
opsec.runTimer = tempTimer(16, function() opsec.doCommand(commands) end)
</script><command /><packageName /><regex>^checkmhal$</regex></Alias></AliasGroup><AliasGroup isActive="yes" isFolder="yes"><name>Talisman</name><script /><command /><packageName>Talisman</packageName><regex /><AliasGroup isActive="yes" isFolder="yes"><name>Talisman</name><script /><command /><packageName /><regex /><Alias isActive="yes" isFolder="no"><name>Talisman market buy</name><script>local source = matches[4] or "P"
if source == "P" then
  source = "promo"
else
  source = "refine"
end
queue.inject(string.format("open pack265875|get %s coins from pack265875|Talisman market buy 1 %s level 1 %s %s|agree|put coins in pack265875|close pack265875", matches[3], matches[2], source, matches[3]))
</script><command /><packageName /><regex>^tbuy (\w+) (\d+)(?: (P|R))?$</regex></Alias><Alias isActive="yes" isFolder="no"><name>Talisman Trade Help</name><script>talisman.help()
</script><command /><packageName /><regex>^(?:ttrade|thelp)$</regex></Alias><Alias isActive="yes" isFolder="no"><name>Talisman Trade</name><script>if matches[2]:lower()=="set" then
	talisman.tradeset(matches[3], matches[4], matches[6])
elseif matches[2]:lower()=="talisman" then
	talisman.tradetalisman(matches[3], matches[4], matches[6])
else
	talisman.trade(matches[3], matches[4], (tonumber(matches[5]) or 1), matches[6])
end

</script><command /><packageName /><regex>^(?:ttrade|TTRADE)(?: (set|SET|talisman|TALISMAN))? (\w+) (\w+)(?: (\d+))?(?: (R|P))?$</regex></Alias><Alias isActive="yes" isFolder="no"><name>Talisman Complete</name><script>talisman.complete(matches[2])
</script><command /><packageName /><regex>^tcomplete (\w+)$</regex></Alias><Alias isActive="yes" isFolder="no"><name>Summary</name><script>talisman.summary(matches[2])
</script><command /><packageName /><regex>^(?:tlist|TLIST)(?: (\w+))?$</regex></Alias></AliasGroup></AliasGroup><AliasGroup isActive="yes" isFolder="yes"><name>cdb 1.1</name><script /><command /><packageName>cdb 1.1</packageName><regex /><AliasGroup isActive="yes" isFolder="yes"><name>cdb (aliases)</name><script /><command /><packageName>cdb</packageName><regex /><Alias isActive="yes" isFolder="no"><name>cdb - manual lookup</name><script>cdb.lookup(matches[2])
cdb.echo("Retrieving &lt;orange&gt;" .. matches[2]:lower():title() .. "'s &lt;white&gt;data...")
cdb.looking = matches[2]:lower():title()
</script><command /><packageName /><regex>^cdb (\w+)$</regex></Alias><Alias isActive="yes" isFolder="no"><name>get city enemies</name><script>cdb.gettingenemies = true
tempTimer(5, [[cdb.gettingenemies = false]])
send("city enemies", false)
</script><command /><packageName /><regex>^city enemies$</regex></Alias><Alias isActive="yes" isFolder="no"><name>anon - players in need of manual honors</name><script>cdb.anons()
</script><command /><packageName /><regex>^anons?$</regex></Alias><Alias isActive="yes" isFolder="no"><name>qwg - get info from qw</name><script>cdb.echo("Getting CDB information for everyone online...")
cdb.getwho()
</script><command /><packageName /><regex>^qwg$</regex></Alias><Alias isActive="yes" isFolder="no"><name>getm - get members of class</name><script>cdb.getmembers(matches[2]:trim():lower())
</script><command /><packageName /><regex>^getm (.+)$</regex></Alias><Alias isActive="yes" isFolder="no"><name>h - honours</name><script>send("honours " .. matches[2]) 

 
                                    -- z   $b$$F
                                   -- F"  4$$P"
                                    -- r *$$$".c...
                                    -- %-4$$$$$$$$"
                                     -- J$*$$$$$$P
                                    -- ^r4$$$$$$"
                                      -- *f*$$*"
                                    -- ".4 *$$$$$$.                 HONOURS IS SPELT WITH A U!
                              -- 4ee%.e.  .$$$$$$$$r
                             -- 4$$$$$$b  P$**)$$$$b                   THE SUN NEVER SETS ON THE
                          -- e..4$$$$$$$"     $$$$$$c.                    BRITISH EMPIRE!!!!
                          -- 3$$$$$$$$*"   "  ^"$$$$$$c
                         -- *$$$$$$$$$.        *$$$$$$$.
                          -- ..$$$$$$$L    c ..J$$$$$$$b
                          -- d"$$$$$$$F   .@$$$$$$$$$$$P"..
                       -- ..$$$$$$$$$$      d$$$$$$$$$$$$$$$
                       -- =$$$$$$P"" "    .e$$$$$$$$$$$$$$$$
                         -- *""          $**$$$$$$$$$$$$$$*
                                          -- "".$$$$$$$$$C .
                                       -- .z$$$$$$$$$$$$$$""
                                      -- .$$$*"^**"  "
                                    -- =P"  "
</script><command /><packageName /><regex>^h (\w+)$</regex></Alias><Alias isActive="yes" isFolder="no"><name>qwa - qw for each city</name><script>local cities = {"rogue", "targossas", "mhaldor", "hashan", "ashtan", "eleusis", "cyrene"}
send("qw " .. table.concat(cities, cdb.cs .. "qw "))
</script><command /><packageName /><regex>^qwa$</regex></Alias><Alias isActive="yes" isFolder="no"><name>wi - display info</name><script>cdb.display(matches[2], true)
</script><command /><packageName /><regex>^wi (\w+)$</regex></Alias><Alias isActive="yes" isFolder="no"><name>cla - get current class</name><script>cdb.classcheck(matches[2])
</script><command /><packageName /><regex>^cla (\w+)$</regex></Alias></AliasGroup></AliasGroup><AliasGroup isActive="yes" isFolder="yes"><name>Prospector</name><script /><command /><packageName>Prospector</packageName><regex /><AliasGroup isActive="yes" isFolder="yes"><name>prospectingaliases</name><script /><command /><packageName>prospectingaliases</packageName><regex /><AliasGroup isActive="yes" isFolder="yes"><name>Prospecting</name><script /><command /><packageName /><regex /><Alias isActive="yes" isFolder="no"><name>continue prospecting</name><script>expandAlias("goto "..ProspectList[1])
prospecting=1
</script><command /><packageName /><regex>^cprospect$</regex></Alias><Alias isActive="yes" isFolder="no"><name>OMG STOP</name><script>mmp.stop()
killTimer(tostring(prospectingtimer))
gotopactive = false
send("stop")
prospecting = 0
</script><command /><packageName /><regex>^pstop$</regex></Alias><Alias isActive="yes" isFolder="no"><name>showmines</name><script>mineowners = {}
counter= 0
for k,v in pairs(minetable) do 

cecho("\n\nMaterial type: " ..k)

for m,n in pairs(v) do 
  for p,o in pairs(n) do

    cecho("\nRoom number: " ..p.. "\n")


    for b,r in pairs(o) do
      echo(b..": "..r..",  ")
		if b == 2 then
				mineowners[counter] = r
				counter = counter+1
		end
    end
  end

end

end


cecho("\n\n--STRONGHOLDS--\n")
for k,v in pairs(strongholdtable) do

cecho("\n Room number: " ..k.. "\n ")
	for m,n in pairs(v) do
		cecho(m.. ": " ..n.. ", ")
	end

end
</script><command /><packageName /><regex>^showmines$</regex></Alias><Alias isActive="yes" isFolder="no"><name>Prospecting</name><script>ProspectList = { 
--Mhojave Desert
"330", "331", "335", "334", "333", "343", "347", "348", "352", "6587", "6629", "348", "45863", "344", "345", "346", "350", "354", "358", "357", "356", "355", "1236", "1235"
,"1247", "1246", "1249", "1250", "1244", "1243", "1251", "1245", "1237", "316", "318", "312", "311", "317", "315", "310", "314", "308", "307", "303", "301", "309"
,"302", "300", "304", "14790", "6164", "13778", "306", "305"
--Dakhota Hills
,"1079", "1080", "1077", "1081", "1083", "1094", "1084", "1089", "1088", "1090", "1091", "1093", "1092", "1095", "1103", "1102", "1115", "1118", "1119", "1121"
,"1123", "1112", "1113", "1114", "1111", "1104", "1105", "1106", "1096", "1097", "1098", "1082", "1100", "1101", "1125", "1127", "1126", "1133", "1136", "1137", "1138"
,"1139", "1132", "1128", "1131", "1130", "1108", "1107"
-- Dun valley
, "3812", "3797", "3796", "3799", "3801", "3802", "3805", "3804", "3800", "3821", "3798", "3795", "5036", "5035", "5034", "5033", "5032"
-- Vashnar Mountains
,"2019", "2018", "2017", "2010", "2011", "2012", "2013", "2015", "2016", "2014", "2009", "2008", "2007"
--Southern Vashnars
,"10226", "10247", "10224", "10502", "10381", "10458", "10241", "10295", "38162", "35601", "35193", "10280", "10311", "10235", "13553", "10342", "10299"
,"10250", "10448", "10218", "10219", "10429", "10412", "10567", "10203", "10202", "10195", "10712", "10196", "10194", "10240", "10184", "10186", "10182", "10185"
,"10189", "10193", "10187", "10192", "10190", "10409", "10181", "10206", "10222"
-- Pash valley
,"1726", "1725", "1724", "1723", "1722", "1721", "1720", "1717", "1716", "1714", "5585", "4315", "1715", "1713", "1718", "1719", "1712", "1711", "1710", "1705", "1702", "1706", "1709", "1708", "1707", "1697", "1619", "1728", "1490"
,"1729", "1727", "1686", "1685", "1683", "1634", "1633", "1635", "1631", "1628", "1627", "1626", "1433", "1434", "1432", "1431", "1435"
,"1428", "1430", "1427", "1423", "1425", "1424", "1426", "1429", "3018", "3017", "3019", "3020", "3390", "3389", "28632", "3016", "3015", "2997", "2991", "2990", "2977"
-- Siroccian hills
,"2979", "2980", "2981", "3420", "3421", "3422", "3424", "3423", "2982", "2983", "2984", "2985", "2986", "2987", "2988"
--granite hills 1
,"9067", "9068", "9069", "9075", "9074", "9073", "9070", "9071", "9072", "9146", "19004", "11693", "11657", "18634", "7626", "7154", "7153", "7155", "7156", "7226", "7625", "9139", "9140", "9141", "9142", "9143", "9144", "9145"
-- granite hills 2
,"9086", "9088", "9089", "9090", "9091", "9092", "9093", "9096", "9094", "9095", "9138", "9147", "9097", "9098", "9099", "9100", "9101", "9102", "9103", "9131", "9130", "9105", "9104", "40513"
}

expandAlias("goto "..ProspectList[1])
--send("clan tug tell Beginning prospecting run!")
prospecting=1
lastminetable = minetable
minetable = {}
lodetable = {}
strongholdtable = {}
</script><command /><packageName /><regex>^prospectall$</regex></Alias></AliasGroup></AliasGroup></AliasGroup><AliasGroup isActive="yes" isFolder="yes"><name>OpSec</name><script /><command /><packageName /><regex /><Alias isActive="yes" isFolder="no"><name>Stop Checks!</name><script>killTimer(opsec.runTimer)
cecho('\n&lt;red&gt;Stopping opsec run!\n')
if opsec.lastPose then send('pose '.. opsec.lastPose) end
opsec.posed = false
</script><command /><packageName /><regex>^stopcheck$</regex></Alias><Alias isActive="yes" isFolder="no"><name>Check Room Security</name><script>opsec = (opsec or {})
opsec.checkWormholesAlways = false
opsec.checkedRooms = (opsec.checkedRooms or {})
opsec.checkedSlots = {}

opsec.doCommand = function(cmds)
  if opsec.wait then
    cecho('Pausing opsec run temporarily...')
    opsec.wait = false
    local wait_for = 8
    if not opsec.checkWormholes and not opsec.checkWormholesAlways then
      wait_for = 4
    end
    opsec.runTimer = tempTimer(wait_for, function() opsec.doCommand(cmds) end)
  else
    if table.is_empty(cmds) then
      killTimer(opsec.runTimer)
      cecho('\nOpsec run finished!\n')
      expandAlias('opsec display')
      opsec.checkWormholes = true
      if opsec.lastPose then send('pose '.. opsec.lastPose) end
      opsec.posed = false
      return
    end
    if not opsec.posed then
      send('pose')
      send('pose Scribbling notes, ^ is here, eyeing the totem '..
           'up and down and tut-tutting.')
      opsec.posed = true
    end
    if gmcp.Room.Players and #gmcp.Room.Players &gt; 1 then
      send('em scribbles some notes while glancing at a totem, '..
           'before busily hurrying off.')
    end
    expandAlias('opsec')
    local timer_in = 3.5
    if cmds[#cmds]:starts('goto') then
      expandAlias(cmds[#cmds])
      timer_in = 5
    else
      send(cmds[#cmds])
    end
    table.remove(cmds, #cmds)
    if not opsec.checkWormholes and not opsec.checkWormholesAlways then
      if timer_in == 5 then timer_in = 2.75 else timer_in = 1.75 end
    end
    opsec.runTimer = tempTimer(timer_in, function() opsec.doCommand(cmds) end)
  end
end

if matches[2] == 'display' then
  for roomID, info in pairs(opsec.checkedRooms) do
    cecho('\nAt '.. info.name ..' ('.. roomID ..'):\n')
    for _, problem in pairs(info.report) do
      cecho('\t'.. problem ..'\n')
    end
  end
  cecho('\nWormholes found:\n')
  display(opsec.wormholes)
elseif matches[2] == 'logreport' then
  local report = 'Totems damaged at: '
  if #opsec.checkedRooms then
    for roomID, info in pairs(opsec.checkedRooms) do
      report = report .. info.name .. ' ('.. roomID ..'); '
    end
    --cecho('\n'.. report ..'\n')
    send('writelog '.. gmcp.Char.Status.city:lower() ..' '.. report)
  end
elseif matches[2] == 'reset' then
  opsec.checkedRooms = {}
  opsec.wormholes = {}
  cecho('\n&lt;cyan&gt;opsec.checkedRooms and opsec.wormholes reset\n')
else  
  enableTrigger('opsec_checktotem_runes')
  enableTrigger('opsec_checktotem_loyalty')
  enableTrigger('opsec_checktotem_empower')
  enableTrigger('opsec_checkmono_flame')
  enableTrigger('opsec_missing_item')
  enableTrigger('opsec_grossshitonground')
  enableTrigger('opsec_yeswormhole')
  
  opsec.totem_empowered = 0
  opsec.flame_rune_found = 0
  
  sendAll('p totem', 'p monolith')
  if opsec.checkWormholes or opsec.checkWormholesAlways then
    send('wormholes')
  end
  
  tempTimer(.75, function()
    local roomId = gmcp.Room.Info.num
    local report = {}
    if (opsec.flame_rune_found == 0) then
      cecho('\n&lt;red&gt;Monolith sigil at '.. gmcp.Room.Info.name ..' missing flame rune!')
    end
    disableTrigger('opsec_checktotem_runes')
    disableTrigger('opsec_checktotem_loyalty')
    disableTrigger('opsec_checktotem_empower')
    disableTrigger('opsec_checkmono_flame')
    disableTrigger('opsec_missing_item')
    disableTrigger('opsec_grossshitonground')
    disableTrigger('opsec_yeswormhole')
    local checkSlot = 1
    while checkSlot &lt;= 6 do 
      local slotVal = opsec.checkedSlots[tostring(checkSlot)]
      if slotVal ~= 'OK' then
        report[checkSlot] = 'slot '.. tostring(checkSlot) ..' has '.. (slotVal or 'been smudged')
      end
      checkSlot = checkSlot + 1
    end
    
    if (opsec.totem_empowered == 0) then
      cecho('&lt;cyan&gt;TOTEM SETUP WARNING: Totem not empowered.')
      --report[#report + 1] = "Totem not empowered"
    end
    
    if #report &gt; 0 then
      opsec.checkedRooms[roomId] = {
        name = gmcp.Room.Info.name,
        report = report
      }
    end
  end)
end

if not (opsec.checkWormholes == true or opsec.checkWormholes == false) then
  opsec.checkWormholes = true
end
</script><command /><packageName /><regex>^opsec(?: (display|reset|logreport))?$</regex></Alias></AliasGroup></AliasPackage><ActionPackage /><ScriptPackage><ScriptGroup isActive="yes" isFolder="yes"><name>TargetCallTables</name><packageName /><script /><eventHandlerList /><Script isActive="yes" isFolder="no"><name>OPTIONS</name><packageName /><script>TargetCallTables = (TargetCallTables or {})
TargetCallTables.Config = (TargetCallTables.Config or {})
TargetCallTables.targetPrios = (TargetCallTables.targetPrios or {})

-- == -- == -- == CONFIG OPTIONS == -- == -- == --
TargetCallTables.Config.EchoColor = 'cyan'
TargetCallTables.Config.ShowEchoes = true

TargetCallTables.Config.UI = true
TargetCallTables.Config.UITableCols = 2
TargetCallTables.Config.UITableRows = 10
TargetCallTables.Config.UIFontSize = 11
TargetCallTables.Config.UIXPos = "40%"
TargetCallTables.Config.UIYPos = "0px"
TargetCallTables.Config.UIWidth= "350px"
TargetCallTables.Config.UIColor = 'cyan'
-- == -- END OF CONFIG: DO NOT EDIT BELOW -- == --

TargetCallTables.echo = function(msg)
  if not TargetCallTables.Config.ShowEchoes then return end
  local color = TargetCallTables.Config.EchoColor
  cecho('\n&lt;'.. color ..'&gt;'.. msg ..'\n')
end

TargetCallTables.addTarget = function(index, tar)
  TargetCallTables.echo('Setting target '.. tostring(index) ..' to '.. tar)
  TargetCallTables.targetPrios[tonumber(index)] = tostring(tar):lower():title()
  TargetCallTables.showTable()
end

TargetCallTables.callTarget = function(index)
  local num = tonumber(index)
  local tar = TargetCallTables.targetPrios[num]
  if tar == nil then
    cecho('\n&lt;red&gt;No target in slot '.. tostring(index) ..'!\n')
    return
  end
  TargetCallTables.lastTargetIndex = num
  target = tar
  sendAll('st '.. tar, 'pt Target: '.. tar)
end

TargetCallTables.nextTarget = function()
  local lastTargetIndex = (TargetCallTables.lastTargetIndex or 0)
  if lastTargetIndex == #TargetCallTables.targetPrios then
    cecho('\n&lt;orange&gt;WARNING: Looping to beginning of call table (out of targets).')
    cecho('\n&lt;orange&gt;=============================================================')
    cecho('\n&lt;orange&gt;REPEAT THE COMMAND TO CALL TARGET #1')
    TargetCallTables.lastTargetIndex = 0
    return
  end
  TargetCallTables.callTarget(lastTargetIndex + 1)
end

TargetCallTables.setTargets = function(tarTable)
  TargetCallTables.targetPrios = {}
  for index, target in pairs(tarTable) do
    TargetCallTables.addTarget(index, target)
  end
end

TargetCallTables.showTable = function()
  if not TargetCallTables.Config.UI then return end
  
  local tbl = '&lt;table width="100%"&gt;'
  local row = 0
  while row &lt; TargetCallTables.Config.UITableRows do
    row = row + 1
    local col = 0
    tbl = tbl ..'&lt;tr&gt;'
    while col &lt; TargetCallTables.Config.UITableCols do
      local idx = (col * 10) + row
      local t = TargetCallTables.targetPrios[idx] or "&amp;nbsp;"
      tbl = tbl ..'&lt;td&gt;'.. tostring(idx) ..'. '.. t ..'&lt;/td&gt;'
      col = col + 1
    end
    tbl = tbl ..'&lt;/tr&gt;'
  end
  tbl = tbl ..'&lt;/table&gt;'

  TargetCallTables.UITable = Geyser.Label:new({
    name="TargetCallTables_UITable",
    x=TargetCallTables.Config.UIXPos, y=TargetCallTables.Config.UIYPos,
    width=TargetCallTables.Config.UIWidth,
    height=(TargetCallTables.Config.UIFontSize + 10) * TargetCallTables.Config.UITableRows,
    bgColor="black", fgColor=TargetCallTables.Config.UIColor,
    message = "&lt;center&gt;".. tbl .."&lt;/center&gt;"
  })
  TargetCallTables.UITable:setFontSize(TargetCallTables.Config.UIFontSize)
end
</script><eventHandlerList /></Script></ScriptGroup><ScriptGroup isActive="yes" isFolder="yes"><name>Talisman</name><packageName>Talisman</packageName><script /><eventHandlerList /><ScriptGroup isActive="yes" isFolder="yes"><name>Talisman</name><packageName /><script /><eventHandlerList /><Script isActive="yes" isFolder="no"><name>Talisman Data</name><packageName /><script>-- dreadpilar 6
-- yggdrasiltablet 18
-- shapingtome 25
-- firecrystal 37
-- nexuscube 37
-- snakeskin 125
-- criersbell 200

talisman = talisman or {}

talisman.setorder = {"dragon", "azatlan", "wonders", "miscellane", "historical", "conclave", "marks", "seafaring", "death", "blackwave", "races", "forays", "cities", "monks", "elemental", "yggdrasil", "contenders", "underworld", "renegades", "invasion", "war", "planes", "eldergod"}

-- Order is optional, if not present it will be a random order as the talisman.info tables is unsorted.
talisman.setformat = {
	dragon = {titlewidth = 7, cellwidth = 7},
	azatlan = {titlewidth = 10, cellwidth = 6, order = {"eagleheaddress", "coati", "kinkajou", "quetzal", "transoceanic", "atlatl", "azatlanknife"}},
	wonders = {titlewidth = 10, cellwidth = 7, order = {"baitbucket", "dragonskinpack", "platinumwhistle", "ramshorn", "monocle", "globe"}},
	miscellane = {titlewidth = 15, cellwidth = 7, order = {"hookah", "tapestry", "vaultkey", "negationsphere", "clayfigurine"}},
	historical = {titlewidth = 15, cellwidth = 7, order = {"window", "mantle", "icicle", "helmet", "disc", "votive", "whisperstone", "lily", "ozhera", "turtle", "mongoose", "hellcat"}},
	conclave = {titlewidth = 10, cellwidth = 7, value = true, order = {"tophat", "hourglass", "tempestbrooch", "elementsprite", "lesservault", "flyingring", "celerity", "buckawns", "adaptgrimoire", "stygianpendant", "grandmagi", "atavianwings"}},
	marks = {titlewidth = 10, cellwidth = 7, value = true, order = {"ivoryatlantia", "ivoryspyglass", "ivorypennon", "ivorydummy", "ivorymedallion", "ivoryarmband", "ivorytower", "ivorywarhorn", "ivorybowstring", "quisalisderillin", "quisalislookingglass", "quisalismedallion", "quisalisdummy", "quisalisbone", "quisalisarmband", "quisalistombstone", "quisalismask", "quisalisdagger", "quisaliscloak"}},
	seafaring = {titlewidth = 15, cellwidth = 10, order = {"cloverbox", "maelstrom", "islandwings", "frostpail", "neatpail", "shipchit", "xpplaque", "monstermap", "crossbow", "glassbottle", "seaweedpail", "smokeflare"}},
	death = {titlewidth = 10, cellwidth = 7, value = true, order = {"mortalcoil", "vulturetalon", "deathcandle", "deathdummy", "gravestone", "crucible", "deathscall", "deathcape"}},
	blackwave = {titlewidth = 10, cellwidth = 7, value = true, order = {"taper", "finalityring", "grievouskeyring", "goblin", "blackspigot", "sunlesshope", "blackcirclet", "guise", "jewel", "canopic", "apperceptionstone", "blackgrimoire", "suremekh'neina"}},
	races = {titlewidth = 10, cellwidth = 7, value = true, order = {"lodestone", "arachnideye", "panpipes", "chitin", "rattle", "whispercloth", "sirensong", "demolitionsphere", "catapult", "dalamyrrclaws", "frogskin", "mayafigurine"}},
	forays = {titlewidth = 10, cellwidth = 6, order = {"arankeshfeather", "icossemirror", "ogrebroth", "boulder", "margamwheel", "foraymap"}},
	cities = {titlewidth = 10, cellwidth = 7, value = true, order = {"biscuit", "tumbleweed", "celescope", "musicbox", "wraithshackles", "alabasterurn"}},
	monks = {titlewidth = 10, cellwidth = 7, value = true, order = {"monkdummy", "odysseantongue", "monkheadband", "talonedring", "cranepennon", "monkbanner", "ashstaff", "olivebranch"}},
	elemental = {titlewidth = 10, cellwidth = 7, value = true, order = {"airelement", "airbrooch", "firependant", "jawbone", "seatears", "earthenshovel", "garashshackle", "mudbomb", "searedglyph", "firetank", "sceptre", "harness"}},
	yggdrasil = {titlewidth = 13, cellwidth = 7, order = {"dreadpilar", "squargon", "yggdrasiltablet", "valdblom", "earthshapingtome", "nexuscube", "firecrystal", "planarmote", "goldensnakeskin", "yggdrasilbranch", "criersbell"}},
	contenders = {titlewidth = 10, cellwidth = 7, value = true, order = {"contenderspig", "contendersjug", "contendersbouquet", "contendersfigurine", "contendersglass", "contendersjournal", "contendersstud", "contendersribbon"}},
	underworld = {titlewidth = 10, cellwidth = 7, value = true, order = {"cryptworm", "psychesplinter", "sanityskein", "custodytalisman", "unlifetotem", "soulsliver", "funeralshroud", "cullingblade"}},
	renegades = {titlewidth = 13, cellwidth = 7, value = true, order = {"mercenarychalk", "elementalinjunction", "moppet", "turncoatscoat", "shadowcloak", "betrayersmantle", "turncoatsmasque", "sunderedpennon"}},
	invasion = {titlewidth = 13, cellwidth = 7, value = true, order = {"darkearthfigrine", "batteringram", "caltrop", "cauldron", "shadowshackle", "hagseye", "icebrick", "scoutingmap"}},
	planes = {titlewidth = 13, cellwidth = 7, value = true, order = {"cowculator", "golemgateway", "hollowbook", "brainjar", "faemirror", "celestialcoronet", "chaosclaw", "iconstatuette", "kris", "crystalsword"}},
	war = {titlewidth = 10, cellwidth = 6, value = true, order = {"rottingremains", "gildedbit", "pigeon", "warcloud", "portalhoop", "observantsigil"}},
	eldergod = {titlewidth = 10, cellwidth = 6, value = true, order = {"gaia", "lorielan", "vulnurana", "twilight", "phaestus", "scarlatti", "prospero", "aegis", "vastar"}},
}

talisman.sets = {
	eldergod = {
		gaia = {short = "blossom", order = {"cherryblossomstem", "cherryblossomflower", "cherryblossomstamen", "cherryblossomscent"}, redeem = 12, tradein = 66},
		lorielan = {short = "filter", order = {"filtercrystal", "filterbronze", "filterfitting", "filterpolish"}, redeem = 31, tradein = 166},
		vulnurana = {short = "sache", order = {"sachetcloth", "sachetherbs", "sachetstring", "sachetscent"}, redeem = 37, tradein = 200},
		twilight = {short = "hound", order = {"houndcarvingeyes", "houndcarvinglegs", "houndcarvingfangs", "houndcarvingobsidian"}, redeem = 43, tradein = 233},
		phaestus = {short = "hammer", order = {"finishinghammerhead", "finishinghammerrunes", "finishinghammerhandle", "finishinghammergrip"}, redeem = 50, tradein = 266},
		scarlatti = {short = "citole", order = {"citolestrings", "citolebody", "citolebase", "citoletune"}, redeem = 62, tradein = 333},
		prospero = {short = "pan", order = {"batteredpanhandle", "batteredpandish", "batteredpangrip", "batteredpanspell"}, redeem = 150, tradein = 800},
		aegis = {short = "declaration", order = {"declarationpaper", "declarationtext", "declarationsignature", "declarationseal"}, redeem = 187, tradein = 1000},
		vastar = {short = "wings", order = {"vastarwingfeathers", "vastarwingstraps", "vastarwingspan", "vastarwinglightning"}, redeem = 250, tradein = 1333},
	},
	dragon = {
		blackdragon = {short = "black", color = "white", order = {"blackdragonbone", "blackdragonclaw", "blackdragoneye", "blackdragonheart", "blackdragonleather", "blackdragonscale", "blackdragontooth", "blackdragonsac"}}, 
		reddragon = {short = "red", color = "red", order = {"reddragonbone", "reddragonclaw", "reddragoneye", "reddragonheart", "reddragonleather", "reddragonscale", "reddragontooth", "reddragonbelly"}}, 
		bluedragon = {short = "blue", color = "blue", order = {"bluedragonbone", "bluedragonclaw", "bluedragoneye", "bluedragonheart", "bluedragonleather", "bluedragonscale", "bluedragontooth", "bluedragonlung"}}, 
		greendragon = {short = "green", color = "green", order = {"greendragonbone", "greendragonclaw", "greendragoneye", "greendragonheart", "greendragonleather", "greendragonscale", "greendragontooth", "greendragonsac"}}, 
		golddragon = {short = "gold", color = "gold", order = {"golddragonbone", "golddragonclaw", "golddragoneye", "golddragonheart", "golddragonleather", "golddragonscale", "golddragontooth", "golddragonstem"}}, 
		silverdragon = {short = "silver", color = "LightSlateGray", order = {"silverdragonbone", "silverdragonclaw", "silverdragoneye", "silverdragonheart", "silverdragonleather", "silverdragonscale", "silverdragontooth", "silverdragonlarynx"}},
	},
	azatlan = {
		eagleheaddress = {short = "eagle", order = {"bluefeather", "greenfeather", "redfeather", "yellowfeather", "orangefeather", "purplefeather", "blackfeather"}},
		atlatl = {short = "atlatl", order = {"atlatlshaft", "atlatlcup", "atlatlspear"}},
		transoceanic = {short = "orb", order = {"orbleft", "orbright", "orbcenter"}},
		azatlanknife = {short = "knife", order = {"knifebladetop", "knifebladebottom", "knifeleather"}},
		quetzal = {short = "quetzal", order = {"quetzalbluefeather", "quetzalgreenfeather", "quetzalredfeather", "quetzalcage", "quetzaltalon", "quetzalegg"}},
		kinkajou = {short = "kinkajou", order = {"kinkajoutooth", "kinkajoucollar", "kinkajoubait", "kinkajouclaw", "kinkajoupaw", "kinkajoutail"}},
		coati = {short = "coati", order = {"coatibait", "coaticlaw", "coaticollar", "coatipaw", "coatitooth", "coatitail"}},
	},
	wonders = {
		baitbucket = {short = "bucket", order = {"buckethandle", "bucketleft", "bucketright", "bucketbase", "bucketwater"}},
		dragonskinpack = {short = "pack", order = {"packscales", "packstraps", "packlining", "packthread", "packleather"}},
		platinumwhistle = {short = "whistle", order = {"whistlemouth", "whistleflue", "whistlereed", "whistletoppipe", "whistlelowpipe"}},
		ramshorn = {short = "horn", order = {"ramshorn", "hornmouth", "hornleftstrap", "hornrightstrap", "hornfastener"}},
		monocle = {short = "monocle", order = {"monotop", "monobottom", "monoframe", "monocatch", "monoclasp"}},
		globe = {short = "globe", order = {"globetop", "globemiddle", "globebottom"}},
	},
	miscellane = {
		hookah = {short = "hookah", order = {"hookahbase", "hookahbowl", "hookahhood", "hookahchain", "hookahhoses", "hookahstem", "hookahplate"}},
		tapestry = {short = "tapestry", order = {"tapestryroller", "tapestryonyx", "tapestryvellum", "tapestryclaw"}},
		vaultkey = {short = "vaultkey", order = {"keyfragment"}},
		negationsphere = {short = "negsphere", order = {"spherefragment"}},
		clayfigurine = {short = "clayfigurine", order = {"clayfigurinebody", "clayfigurinehead", "clayfigurinelegs", "clayfigurinearms"}},
	},
	historical = {
		window = {short = "window", order = {"windowframe", "windowpane", "windowjamb", "windowshutters", "windowgrid"}},
		mantle = {short = "mantle", order = {"mantlecloth", "mantlethread", "mantlecentre", "mantlegems"}}, 
		icicle = {short = "icicle", order = {"icicletop", "iciclemiddle", "iciclebase", "icicletip", "iciclerunes"}},
		helmet = {short = "helmet", order = {"helmetskull", "helmetnose", "helmetstrap"}},
		disc = {short = "disc", order = {"disctop", "discside", "discmiddle", "discbottom", "discrunes", "disccentre"}},
		votive = {short = "votive", order = {"votivebase", "votivewick", "votivewax"}},
		whisperstone = {short = "whisperstone", order = {"stonetop", "stonebottom", "stonemiddle", "stoneside", "stonecore", "stoneemitter"}},
		lily =  {short = "lily", order = {"lilypetals", "lilystem", "lilystamen", "lilybulb", "lilypistil"}},
		ozhera =  {short = "ozhera", order = {"ozherabait", "ozheracollar", "ozheraegg", "ozheraclaw", "ozherabeak", "ozheranest"}},
		turtle =  {short = "turtle", order = {"turtleshell", "turtlebait", "turtlecollar", "turtletail", "turtlefoot", "turtletongue"}},
		mongoose =  {short = "mongoose", order = {"mongoosebait", "mongoosecollar", "mongoosetail", "mongoosepaw", "mongooseclaw", "mongoosefang"}},
		hellcat = {short = "hellcat", order = {"hellcatbait", "hellcatcollar", "hellcatclaw", "hellcatfang", "hellcattail", "hellcatpaw"}},
	},
	conclave = {
		tophat = {short = "tophat", order = {"tophatlining", "tophatbrim", "tophatthread", "tophatband"}, redeem = 3, tradein = 16},
		hourglass = {short = "hourglass", order = {"hourglasstop", "hourglassbottom", "hourglasssand", "hourglassbulb"}, redeem = 12, tradein = 66},
		tempestbrooch = {short = "brooch", order = {"broochgem", "broochclasp", "broochmetal", "broochhook"}, redeem = 18, tradein = 100},
		elementsprite = {short = "sprite", order = {"spritelegs", "spritearms", "spritetorso", "spritehead"}, redeem = 28, tradein = 150},
		lesservault = {short = "vault", order = {"vaultdoor", "vaulthinge", "vaulthandle", "vaultgems"}, redeem = 43, tradein = 233},
		flyingring = {short = "RoF", order = {"ringtop", "ringbottom", "ringinside", "ringoutside"}, redeem = 50, tradein = 266},
		celerity = {short = "celerity", order = {"armbandtop", "armbandbottom", "armbandinside", "armbandoutside"}, redeem = 62, tradein = 333},
		buckawns = {short = "buckawns", order = {"amuletthread", "amuletchain", "amuletball", "amuletclasp"}, redeem = 100, tradein = 533},
		adaptgrimoire = {short = "grimoire", order = {"grimoireleather", "grimoirepaper", "grimoiregems", "grimoirelock"}, redeem = 125, tradein = 666},
		stygianpendant = {short = "stygian", order = {"pendantbase", "pendantclasp", "pendantpearl", "pendanthook"}, redeem = 150, tradein = 800},
		grandmagi = {short = "grandmagi", order = {"robesthread", "robesneedle", "robestrim", "robesfabric"}, redeem = 312, tradein = 3000},
		atavianwings = {short = "wings", order = {"wingsthread", "wingsleft", "wingsright", "wingsfeathers"}, redeem = 250, tradein = 1333},
	},
	marks = {
		ivorywarhorn = {short = "warhorn", order = {"ivoryhornmouthpiece", "ivoryhornfittings", "ivoryhornleft", "ivoryhornright"}, redeem = 100, tradein = 533},
		ivorymedallion = {short = "ivory med", order = {"ivorymedalliondisc", "ivorymedallionclasp", "ivorymedallionaccent", "ivorymedallionribbon"}, redeem = 43, tradein = 233},
		ivoryspyglass = {short = "spyglass", order = {"ivoryspyglasslens", "ivoryspyglasseyepiece", "ivoryspyglassbody", "ivoryspyglassstrap"}, redeem = 18, tradein = 100},
		ivorypennon = {short = "pennon", order = {"ivorypennonsilk", "ivorypennonribbon", "ivorypennonthread", "ivorypennondye"}, redeem = 31, tradein = 166},
		ivoryarmband = {short = "iarmband", order = {"ivoryarmbandaccent", "ivoryarmbandouter", "ivoryarmbandinner", "ivoryarmbandclasp"}, redeem = 75, tradein = 400},
		ivoryatlantia = {short = "atlantia", order = {"ivoryatlantiabody", "ivoryatlantialegs", "ivoryatlantiahead", "ivoryatlantiaarms"}, redeem = 12, tradein = 66},
		ivorydummy = {short = "idummy", order = {"ivorydummylimbs", "ivorydummytorso", "ivorydummyclothing", "ivorydummyarmour"}, redeem = 37, tradein = 200},
		ivorytower = {short = "tower", order = {"ivorytowerbase", "ivorytowerlower", "ivorytowerupper", "ivorytowerlacquer"}, redeem = 81, tradein = 433},
		ivorybowstring = {short = "bowstring", order = {"ivorybowstringcore", "ivorybowstringwrapping", "ivorybowstringeyelet", "ivorybowstringenchant"}, redeem = 125, tradein = 666},

		quisalisdagger = {short = "anima", order = {"quisaisdaggerhilt", "quisalisdaggerblade", "quisalisdaggerpommel", "quisalisdaggergrip"}, redeem = 150, tradein = 800},
		quisalisbone = {short = "bone", order = {"quisalisbonelower", "quisalisboneupper", "quisalisbonerope", "quisalisbonestain"}, redeem = 43, tradein = 233},
		quisalismedallion = {short = "quis med", order = {"quisalismedallionchain", "quisalismedalliontop", "quisalismedallionbottom", "quisalismedallionclasp"}, redeem = 31, tradein = 166},
		quisalislookingglass = {short = "lookglass", order = {"quisalisglasscase", "quisalisglasslens", "quisalisglassiris", "quisalisglasseyepiece"}, redeem = 18, tradein = 100},
		quisalisderillin = {short = "derillin", order = {"quisalisderillinhair", "quisalisderillinclothing", "quisalisderillintorso", "quisalisderillinhead"}, redeem = 12, tradein = 66},
		quisalisdummy = {short = "qdummy", order = {"quisalisdummylimbs", "quisalisdummytorso", "quisalisdummyrobes", "quisalisdummytargets"}, redeem = 37, tradein = 200},
		quisalistombstone = {short = "tombstone", order = {"quisalistombstonetop", "quisalistombstonemiddle", "quisalistombstonebase", "quisalistombstonescript"}, redeem = 81, tradein = 433},
		quisalisarmband = {short = "qarmband", order = {"quisalisarmbandserpent", "quisalisarmbandeyes", "quisalisarmbandtop", "quisalisarmbandbottom"}, redeem = 75, tradein = 400},
		quisaliscloak = {short = "cloak", order = {"quisaliscloakcloth", "quisaliscloakembroidery", "quisaliscloaklining", "quisaliscloakhood"}, redeem = 187, tradein = 1000},
		quisalismask = {short = "deathmask", order = {"quisalismaskbone", "quisalismaskwire", "quisalismaskteeth", "quisalismaskrunes"}, redeem = 100, tradein = 533},
	},
	seafaring = {
		cloverbox = {short = "cloverbox", order = {"cloverboxclovers", "cloverboxsides", "cloverboxlid", "cloverboxbase"}},
		maelstrom = {short = "maelstrom", order = {"maelstromarms", "maelstromlegs", "maelstromhead", "maelstromtorso"}},
		islandwings = {short = "islandwings", order = {"islandwingsleft", "islandwingsright", "islandwingsthread", "islandwingsstraps"}},
		frostpail = {short = "frostpail", order = {"frostpailhandle", "frostpailleft", "frostpailright", "frostpailbase"}},
		neatpail = {short = "neatpail", order = {"neatpailhandle", "neatpailleft", "neatpailright", "neatpailbase"}},
		shipchit = {short = "shipchit", order = {"shipchittop", "shipchitbottom", "shipchitink", "shipchitseal"}},
		xpplaque = {short = "xpplaque", order = {"xpplaquemount", "xpplaquefascia", "xpplaquelacquer", "xpplaquelettering"}},
		monstermap = {short = "monstermap", order = {"monstermapink", "monstermapparchment", "monstermapcompass", "monstermapenchant"}},
		crossbow = {short = "crossbow", order = {"crossbowmount", "crossbowarms", "crossbowstring", "crossbowcrank"}},
		glassbottle = {short = "glassbottle", order = {"glassbottleneck", "glassbottlemiddle", "glassbottlebase", "glassbottleenchant"}},
		seaweedpail = {short = "seaweedpail", order = {"seaweedpailhandle", "seaweedpailleft", "seaweedpailright", "seaweedpailbase"}},
		smokeflare = {short = "flare", order = {"smokeflareshell", "smokeflarefins", "smokeflarelid", "smokeflarechamber"}},
	},
	death = {
		mortalcoil = {short = "coil", order = {"coiltop", "coilbottom", "coilstrand", "coilbinding"}, redeem = 10, tradein = 66},
		vulturetalon = {short = "talon", order = {"talontip", "talonstem", "talonbase", "talonpoison"}, redeem = 10, tradein = 66},
		deathcandle = {short = "candle", order = {"candlewax", "candleflame", "candlebase", "candlestring"}, redeem = 10, tradein = 66},
		deathdummy = {short = "dummy", order = {"deathdummyhead", "deathdummyarms", "deathdummytorso", "deathdummylegs"}, redeem = 10, tradein = 33},
		gravestone = {short = "gravestone", order = {"gravestonetop", "gravestonebottom", "gravestoneinscription", "gravestonelichen"}, redeem = 10, tradein = 264},
		crucible = {short = "crucible", order = {"cruciblebase", "cruciblehandle", "cruciblebowl", "crucibleflame"}, redeem = 10, tradein = 396},
		deathscall = {short = "call", order = {"deathscallmouth", "deathscallhorn", "deathscalltassels", "deathscallcoil"}, redeem = 10, tradein = 792},
		deathcape = {short = "cape", order = {"capebrocade", "capethread", "capeenchantment", "capevelvet"}, redeem = 10, tradein = 990},
	},
	blackwave = {
		taper = {short = "taper", order = {"tapertop", "taperbottom", "taperwax", "taperstring"}, redeem = 6, tradein = 33},
		finalityring = {short = "finality", order = {"signetband", "signetbezel", "signetcarving", "signetmarks"}, redeem = 6, tradein = 33},
		grievouskeyring = {short = "keyring", order = {"keyringlizard", "keyringtiger", "keyringslate", "keyringhoop"}, redeem = 12, tradein = 66},
		goblin = {short = "goblin", order = {"goblinlegs", "goblinarms", "goblinhead", "goblintorso"}, redeem = 16, tradein = 86},
		blackspigot = {short = "spigot", order = {"spigottop", "spigotbottom", "spigotstem", "spigottip"}, redeem = 50, tradein = 266},
		sunlesshope = {short = "sunless", order = {"sunlessband", "sunlessstone", "sunlessbinding", "sunlessenchantment"}, redeem = 75, tradein = 400},
		blackcirclet = {short = "circlet", order = {"circletfur", "circletblades", "circletband", "circletbinding"}, redeem = 106, tradein = 566},
		jewel = {short = "jewel", order = {"sanguinestone", "sanguineaura", "sanguineteardrop", "taintedblood"}, redeem = 125, tradein = 666},
		canopic = {short = "canopic", order = {"canopiclid", "canopicfluid", "canopicbase", "canopicpot"}, redeem = 125, tradein = 666},
		apperceptionstone = {short = "stone", order = {"crystalshard", "crystalbinding", "crystalportal", "crystalbase"}, redeem = 125, tradein = 666},
		guise = {short = "guise", order = {"guiseenchantment", "guisethread", "guisesmile", "guiseleather"}, redeem = 150, tradein = 800},
		blackgrimoire = {short = "grimoire", order = {"grimoiregut", "grimoirescroll", "grimoirecover", "grimoirebinding"}, redeem = 250, tradein = 1333},
		["suremekh'neina"] = {short = "mantle", order = {"mantleenchant", "mantleclasp", "mantlelining", "mantlefabric"}, redeem = 250, tradein = 1333},
	},
	races = {
		lodestone = {short = "lodestone", order = {"lodestonetop", "lodestonebase", "lodestoneright", "lodestoneleft"}, redeem = 12, tradein = 66},		-- 100
		arachnideye = {short = "arachnid", order = {"arachnidlens", "arachnideyeball", "arachnidenchantment", "arachnidcolour"}, redeem = 12, tradein = 66},		-- 100
		panpipes = {short = "panpipes", order = {"panpipepipes", "panpipefeathers", "panpipehair", "panpipeflutes"}, redeem = 35, tradein = 186},		-- 280
		chitin = {short = "chitin", order = {"chitincolour", "chitinname", "chitincarving", "chitinfragment"}, redeem = 37, tradein = 200},				-- 300
		rattle = {short = "rattle", order = {"rattlebones", "rattleantlers", "rattlerunes", "rattlestaff"}, redeem = 37, tradein = 200},				-- 300
		whispercloth = {short = "cloth", order = {"clothenchantment", "clothbinding", "clothblood", "whispersilk"}, redeem = 50, tradein = 266},		-- 400
		demolitionsphere = {short = "sphere", order = {"sphereglass", "spherefire", "spherespark", "sphererunes"}, redeem = 62, tradein = 333},	-- 500
		sirensong = {short = "sirensong", order = {"sirenglass", "sirenvoice", "sirencork", "sirensmoke"}, redeem = 62, tradein = 333},		-- 500
		catapult = {short = "catapult", order = {"catapultframe", "catapultbolts", "catapultwheel", "catapultarm"}, redeem = 75, tradein = 400},		-- 600
		dalamyrrclaws = {short = "claws", order = {"clawstraps", "clawbase", "clawpoints", "clawbarbs"}, redeem = 87, tradein = 466},		-- 700
		frogskin = {short = "frogskin", order = {"froghead", "frogcord", "frogbody", "frogfeet"}, redeem = 100, tradein = 533},		-- 800
		mayafigurine = {short = "maya", order = {"figurinehead", "figurinearms", "figurinetorso", "figurinelegs"}, redeem = 187, tradein = 1000},		-- 1500
	},
	forays = {
		arankeshfeather = {short = "feather", order = {"arankeshfeatherspine", "arankeshfeatherdown", "arankeshfeathercolour", "arankeshfeatheredge"}},
		icossemirror = {short = "mirror", order = {"goldmirrorframe", "mirrorglass", "mirrorcurse", "mirrorinscription"}},
		ogrebroth = {short = "broth", order = {"brothbowl", "brothbroth", "brothseasoning", "brothspice"}},
		boulder = {short = "boulder", order = {"boulderchipping", "bouldershell", "bouldercore", "boulderstone"}},
		margamwheel = {short = "wheel", order = {"margamwheelweeds", "margamwheelbolts", "margamwheelwood", "margamwheelcentre"}},
		foraymap = {short = "map", order = {"mapfragmenttop", "mapfragmentbottom", "mapfragmentleft", "mapfragmentright"}},
	},
	cities = {
		musicbox = {short = "musicbox", order = {"musicboxsong", "musicboxmechanism", "musicboxframe", "musicboxcrank"}, redeem = 10, tradein = 333},
		biscuit = {short = "biscuit", order = {"biscuitbase", "biscuitspecial", "biscuitsugar", "biscuitsalt"}, redeem = 10, tradein = 50},
		wraithshackles = {short = "wraith", order = {"wraithshacklesmoke", "wraithshacklechain", "wraithshacklemanacles", "wraithshacklelock"}, redeem = 10, tradein = 533},
		tumbleweed = {short = "tumbleweed", order = {"tumbleweedroots", "tumbleweedtendrils", "tumbleweedvines", "tumbleweedstem"}, redeem = 10, tradein = 100},
		alabasterurn = {short = "urn", order = {"alabasterurnlid", "alabasterurnpot", "alabasterurninscription", "alabasterurnash"}, redeem = 10, tradein = 600},
		celescope = {short = "celescope", order = {"celescopeglobe", "celescopecylinders", "celescopeeyepiece", "celescopeingraving"}, redeem = 10, tradein = 333},
	},
	monks = {
		monkdummy = {short = "dummy", order = {"monkdummyhead", "monkdummyarms", "monkdummytorso", "monkdummylegs"}, redeem = 6, tradein = 33},		-- 50
		odysseantongue = {short = "tongue", order = {"tongueflesh", "tonguecasing", "tonguepolish", "tonguecurse"}, redeem = 18, tradein = 100},		-- 150
		monkheadband = {short = "headband", order = {"monkheadbandthreads", "monkheadbandamethyst", "monkheadbandenchantment", "monkheadbandsupport"}, redeem = 25, tradein = 133},		-- 200
		talonedring = {short = "talonring", order = {"crimsonsteelband", "quartzsetting", "ringsteelclaws", "talonedringbinding"}, redeem = 50, tradein = 266},		-- 400
		cranepennon = {short = "pennon", order = {"pennoncloth", "pennoncranes", "pennonstaff", "pennonthread"}, redeem = 87, tradein = 466},		-- 700 			???
		monkbanner = {short = "banner", order = {"monkbannerflag", "monkbannerembroidery", "monkbannerspear", "monkbannerthread"}, redeem = 200, tradein = 1066},		-- 1600
		ashstaff = {short = "staff", order = {"ashstaffstave", "ashstaffstrapping", "ashstaffcap", "ashstaffshoe"}, redeem = 218, tradein = 1166},		-- 1750
		olivebranch = {short = "branch", order = {"olivewood", "olivebranchshoots", "oliveleaves", "olivebranchenchantment"}, redeem = 137, tradein = 733},		-- 1100
	},
	elemental = {
		airelement = {short = "pet", order = {"airelementalcyclone", "airelementalessence", "airelementalbinding", "airelementallightning"}, redeem = 7, tradein = 40},		-- 60
		airbrooch = {short = "brooch", order = {"airbroochclasp", "airbroochgem", "airbroochsetting", "airbroochenchantment"}, redeem = 18, tradein = 100},		-- 150
		firependant = {short = "pendant", order = {"firependantchain", "firependantflame", "firependantsetting", "firependantjewel"}, redeem = 25, tradein = 133},		-- 200
		jawbone = {short = "jawbone", order = {"jawboneteeth", "jawbonemandibles", "jawbonebone", "jawbonehinge"}, redeem = 25, tradein = 133},		-- 200
		earthenshovel = {short = "shovel", order = {"earthshovelwood", "earthshovelblade", "earthshovelbinding", "earthshovelminerals"}, redeem = 46, tradein = 250},		-- 375
		garashshackle = {short = "shackle", order = {"garashshacklelinks", "garashshackleorbs", "garashshackleenchantment", "garashshacklechains"}, redeem = 75, tradein = 400},		-- 600
		seatears = {short = "tears", order = {"seatearsphial", "seatearsstopper", "seatearspaint", "seatearstears"}, redeem = 37, tradein = 200},		-- 300
		mudbomb = {short = "mudbomb", order = {"mudbombbinding", "mudbombmud"}, redeem = 87, tradein = 466},		-- 700
		searedglyph = {short = "glyph", order = {"searedglyphplaque", "searedglyphemblem", "searedglyphtendrils", "searedglyphflame"}, redeem = 106, tradein = 566},		-- 850
		firetank = {short = "tank", order = {"firetankframe", "firetankflame", "firetankinsignia", "firetanklinks"}, redeem = 168, tradein = 900},		-- 1350
		sceptre = {short = "sceptre", order = {"sceptrescript", "sceptreenchantment", "sceptreheart", "sceptretusk"}, redeem = 250, tradein = 1333},		-- 2000
		harness = {short = "harness", order = {"airharnessstraps", "airharnessglyphs", "airharnessenchantment", "airharnessbuckles"}, redeem = 212, tradein = 1133},		-- 1133
	},
	yggdrasil = {
		dreadpilar = {short = "dreadpilar", order = {"dreadpilarplates", "dreadpilarbody", "dreadpilarhead", "dreadpilarlegs"}},
		squargon = {short = "squargon", order = {"squargonbody", "squargonhead", "squargonlegs", "squargonfangs"}},
		yggdrasiltablet = {short = "tablet", order = {"tabletwax", "tabletwood", "tabletstylus", "tablettwine"}},
		valdblom = {short = "valdblom", order = {"valdblomstem", "valdblomleaves", "valdblomessence", "valdblomroot"}},
		earthshapingtome = {short = "shapingtome", order = {"shapingtomeclay", "shapingtomgranite", "shapingtomeplates", "shapingtominsignia"}},
		nexuscube = {short = "nexuscube", order = {"nexuscubegold", "nexuscubeglass", "nexuscubemote", "nexuscubescript"}},
		firecrystal = {short = "firecrystal", order = {"firecrystalenchantment", "firecrystalstone", "firecrystalflame", "firecrystalspark"}},
		planarmote = {short = "planarmote", order = {"moteflame", "moteaura", "motebinding", "moteenchantment"}},
		goldensnakeskin = {short = "snakeskin", order = {"goldenscales", "goldenskin", "goldencolouring", "goldenenchantment"}},
		yggdrasilbranch = {short = "branch", order = {"yggdrasilbranchwood", "yggdrasilbranchmosaic", "yggdrasilbranchline", "yggdrasilbranchhook"}},
		criersbell = {short = "bell", order = {"criersshell", "criershandle", "crierschime", "crierscurse"}},
	},	
	contenders = {
		contenderspig = {short = "pig", order = {"pigclay", "pigears", "pigbelly", "pigtail"}, redeem = 7, tradein = 40},		-- 60
		contendersjug = {short = "jug", order = {"juglip", "jugbase", "jugbowl", "jughandle"}, redeem = 12, tradein = 66},		-- 100
		contendersbouquet = {short = "bouquet", order = {"bouquetstring", "bouquetknot", "bouquetbloom", "bouquetstem"}, redeem = 18, tradein = 100},		-- 150
		contendersfigurine = {short = "figurine", order = {"contenderfigurinehead", "contenderfigurinearms", "contenderfigurinelegs", "contenderfigurinebody"}, redeem = 31, tradein = 166},		-- 250
		contendersglass = {short = "glass", order = {"glasshandle", "glasspane", "glassfocus", "glassframe"}, redeem = 37, tradein = 200},		-- 300
		contendersjournal = {short = "journal", order = {"journalbinding", "journalpage", "journalcover", "journalindex"}, redeem = 62, tradein = 333},		-- 500
		contendersstud = {short = "stud", order = {"studgleam", "studpost", "studgem", "studback"}, redeem = 125, tradein = 666},		-- 1000
		contendersribbon = {short = "ribbon", order = {"ribbongilding", "ribbonpin", "ribbonstripe", "ribbonfold"}, redeem = 175, tradein = 933},		-- 1400
	},
	underworld = {
		cryptworm = {short = "worm", order = {"cryptwormhead", "cryptwormbody", "cryptwormfangs", "cryptwormbinding"}, redeem = 10, tradein = 40}, -- no tradein
		psychesplinter = {short = "splinter", order = {"psychesplinterchain", "psychesplinterframe", "psychesplinterlength", "psychesplintercurse"}, redeem = 10, tradein = 120}, -- 180
		sanityskein = {short = "skein", order = {"sanityskeinthread", "sanityskeincoil", "sanityskeincurse", "sanityskeinbinding"}, redeem = 10, tradein = 146}, -- 220
		custodytalisman = {short = "custody", order = {"custodyleft", "custodyright", "custodycentre", "custodybinding"}, redeem = 10, tradein = 266}, -- 400
		unlifetotem = {short = "totem", order = {"unlifetotembase", "unlifetotemwood", "unlifetotemskull", "unlifetotemtendrils"}, redeem = 10, tradein = 333}, -- 500
		soulsliver = {short = "sliver", order = {"soulsliverobsidian", "soulsliverfog", "soulsliversouls", "soulslivercurse"}, redeem = 10, tradein = 533}, -- 800
		cullingblade = {short = "blade", order = {"cullingbladehilt", "cullingbladeedge", "cullingblademetal", "cullingbladecurse"}, redeem = 10, tradein = 1000}, -- 1500
		funeralshroud = {short = "shroud", order = {"funeralshroudcloth", "funeralshroudthread", "funeralshroudbenediction", "funeralshroudclasp"}, redeem = 10, tradein = 1333}, -- 2000
	},
	renegades = {
		mercenarychalk = {short = "chalk", order = {"mercenarychalkbinding", "mercenarychalkchalk", "mercenarychalkdust", "mercenarychalkstick"}, redeem = 8 , tradein = 42}, -- 65 
		elementalinjunction = {short = "injunction", order = {"injunctionscript", "injunctionpaper", "injunctionseal", "injunctionsignature"}, redeem = 7 , tradein = 36}, -- 60
		moppet = {short = "moppet", order = {"moppetcloth", "moppeteyes", "moppetthread", "moppetbuttons"}, redeem = 25 , tradein = 132}, -- 200
		turncoatscoat = {short = "coat", order = {"turncoatscoatcloth", "turncoatscoatbinding", "turncoatscoatthread", "turncoatscoatbuttons"}, redeem = 43, tradein = 231}, -- 350
		shadowcloak = {short = "shadowcloak", order = {"shadowcloakcloth", "shadowcloakclasp", "shadowcloakthread", "shadowcloakcurse"}, redeem = 75, tradein = 396}, -- 600
		betrayersmantle = {short = "betrayers", order = {"betrayersmantlecloth", "betrayersmantlethread", "betrayersmantlestraps", "betrayersmantlecurse"}, redeem = 100, tradein = 528}, -- 800
		turncoatsmasque = {short = "masque", order = {"turncoatsmasquestone", "turncoatsmasqueetchings", "turncoatsmasquecurse", "turncoatsmasqueeyes"}, redeem = 125, tradein = 660}, -- 1000
		sunderedpennon = {short = "sundered", order = {"sunderedpennoncloth", "sunderedpennonthread", "sunderedpennonstaff", "sunderedpennonbinding"}, redeem = 200, tradein = 1056}, -- 1600
	},
	invasion = {
		darkearthfigrine = {short = "darkearth", order = {"darkearthhead", "darkearthtorso", "darkeartharms", "darkearthlegs"}, redeem = 6, tradein = 33}, --50
		batteringram = {short = "batteringram", order = {"batteringramwheels", "batteringramram", "batteringramgrips", "batteringrambolts"}, redeem = 25, tradein = 132}, --200
		caltrop = {short = "caltrop", order = {"caltropspikes", "caltropball", "caltropbinding", "caltropbarbs"}, redeem = 43, tradein = 233}, -- 350
		cauldron = {short = "cauldron", order = {"cauldronpot", "cauldronoil", "cauldronhandle", "cauldronbase"}, redeem = 50, tradein = 264}, --400
		shadowshackle = {short = "shadowshackle", order = {"shadowshacklelink", "shadowshacklemetal", "shadowshackleenchantment", "shadowshackleshadow"}, redeem = 75, tradein = 400}, -- 600
		hagseye = {short = "hagseye", order = {"hagseyelid", "hagseyeball", "hagseyefluid", "hagseyeenchantment"}, redeem = 87, tradein = 466}, -- 700
		icebrick = {short = "icebrick", order = {"magicice", "repeatingspell", "icebinding", "iceenchantment"}, redeem = 112, tradein = 600}, -- 900
		scoutingmap = {short = "scoutingmap", order = {"scoutingmapenchantment", "scoutingmapicons", "scoutingmapink", "scoutingmapvellum"}, redeem = 150, tradein = 800}, -- 1200
	},
	war = {
		rottingremains = {short = "remains", order = {"remainsbones", "remainsmuscles", "remainsblood", "remainsflesh"}, redeem = 10, tradein = 80},
		gildedbit = {short = "bit", order = {"bitpatterns", "bitgilding", "bitchain", "bitbar"}, redeem = 10, tradein = 80},
		pigeon = {short = "pigeon", order = {"pigeonhead", "pigeonbody", "pigeonlegs", "pigeonwings"}, redeem = 10, tradein = 80},
		warcloud = {short = "warcloud", order = {"warcloudfog", "warcloudstench", "warcloudcurse", "warcloudbinding"}, redeem = 10, tradein = 80},
		portalhoop = {short = "portalhoop", order = {"portalhoopsteel", "portalhooplight", "portalhoopenchantment", "portalhoopbinding"}, redeem = 10, tradein = 80},
		observantsigil = {short = "sigil", order = {"observantsigilmetal", "observantsigilstar", "observantsigileye", "observantsigillatice"}, redeem = 10, tradein = 80},
	},
  planes = {
    cowculator = {short = "cow", order = {"cowculatorwood", "cowculatornumbers", "cowculatorpaint", "cowculatorspectacles"}, redeem = 12, tradein = 66},
    golemgateway = {short = "golem", order = {"gatewayemblem", "gatewaygates", "gatewayframe", "gatewaybars"}, redeem = 31, tradein = 166},
    hollowbook = {short = "book", order = {"hollowbookcovers", "hollowbookeye", "hollowbookglyphs", "hollowbookscream"}, redeem = 37, tradein = 200},
    brainjar = {short = "brainjar", order = {"brainjarpot", "brainjarbrains", "brainjarpreserves", "brainjarlabel"}, redeem = 50, tradein = 266},
    faemirror = {short = "mirror", order = {"faemirrorglass", "faemirrorcrystal", "faemirrorhandle", "faemirrorscript"}, redeem = 56, tradein = 300},
    celestialcoronet = {short = "coronet", order = {"coronetband", "coronetangels", "coronetspheres", "coronetengravings"}, redeem = 87, tradein = 466},
    chaosclaw = {short = "claw", order = {"chaosclawedge", "chaosclawtip", "chaosclawcorruption", "chaosclawspan"}, redeem = 100, tradein = 533},
    iconstatuette = {short = "icon", order = {"statuetteglobe", "statuettesigils", "statuetteshards", "statuetteicon"}, redeem = 125, tradein = 666},
    kris = {short = "kris", order = {"krisblade", "krishaft", "krisrunes", "krissteel"}, redeem = 1, tradein = 1},
    crystalsword = {short = "sword", order = {"crystalswordhilt", "crystalswordguard", "crystalswordblade", "crystalswordgem"}, redeem = 250, tradein = 1333},
  },

}


-- Require this to map the line when you find a talisman back to the short name
talisman.names = {

-- Elder Gods
  ["the stem for a cherry blossom"] = "cherryblossomstem",
  ["the flower for a cherry blossom"] = "cherryblossomflower",
  ["the stamen for a cherry blossom"] = "cherryblossomstamen",
  ["the scent for a cherry blossom"] = "cherryblossomscent",
  
  ["the crystal for a translucent filter"] = "filtercrystal",
  ["the bronze for a translucent filter"] = "filterbronze",
  ["the fitting for a translucent filter"] = "filterfitting",
  ["the polish for a translucent filter"] = "filterpolish", 
  
  ["the cloth for a sachet"] = "sachetcloth",
  ["the herbs for a sachet"] = "sachetherbs",
  ["the string for a sachet"] = "sachetstring",
  ["the scent for a sachet"] = "sachetscent", 
  
  ["the eyes for an obsidian hound carving"] = "houndcarvingeyes",
  ["the legs for an obsidian hound carving"] = "houndcarvinglegs",
  ["the fangs for an obsidian hound carving"] = "houndcarvingfangs",
  ["the obsidian for a hound carving"] = "houndcarvingobsidian",
  
  ["the head for a finishing hammer"] = "finishinghammerhead",
  ["the runes for a finishing hammer"] = "finishinghammerrunes",
  ["the handle for a finishing hammer"] = "finishinghammerhandle",
  ["the grip for a finishing hammer"] = "finishinghammergrip", 
  
  ["the strings for a citole"] = "citolestrings",
  ["the body for a citole"] = "citolebody",
  ["the base for a citole"] = "citolebase",
  ["the tune for a citole"] = "citoletune",
  
  ["the handle for a battered pan"] = "batteredpanhandle",
  ["the dish for a battered pan"] = "batteredpandish",
  ["the grip for a battered pan"] = "batteredpangrip",
  ["the spell for a battered pan"] = "batteredpanspell",
  
  ["the paper for a declaration of hostility"] = "declarationpaper",
  ["the text for a declaration of hostility"] = "declarationtext",
  ["the signature for a declaration of hostility"] = "declarationsignature",
  ["the seal for a declaration of hostility"] = "declarationseal",
  
  ["the feathers for a set of stormforged wings"] = "vastarwingfeathers",
  ["the straps for a set of stormforged wings"] = "vastarwingstraps",
  ["the span for a set of stormforged wings"] = "vastarwingspan",
  ["the lightning for a set of stormforged wings"] = "vastarwinglightning",

--Planes

  ["the wood for a cowculator carving"] = "cowculatorwood",
  ["the numbers for a cowculator carving"] = "cowculatornumbers",
  ["the paint for a cowculator carving"] = "cowculatorpaint",
  ["the spectacles for a cowculator carving"] = "cowculatorspectacles",

  ["the emblem for an iron gateway"] = "gatewayemblem",
  ["a set of iron gates"] = "gatewaygates",
  ["the frame for an iron gateway"] = "gatewayframe",
  ["the bars for an iron gateway"] = "gatewaybars",
    
  ["the pot for a jar of withered brains"] = "brainjarpot",
  ["the contents of a jar of withered brains"] = "brainjarbrains",
  ["the preserves for a jar of withered brains"] = "brainjarpreserves",
  ["the label for a jar of withered brains"] = "brainjarlabel",

  ["the covers for an empty book"] = "hollowbookcovers",
  ["the eye for an empty book"] = "hollowbookeye",
  ["the glyphs for an empty book"] = "hollowbookglyphs",
  ["the scream for an empty book"] = "hollowbookscream",

  ["the glass for a mirror of fae perception"] = "faemirrorglass",
  ["the crystal for a mirror of fae perception"] = "faemirrorcrystal",
  ["the handle for a mirror of fae perception"] = "faemirrorhandle",
  ["the script for a mirror of fae perception"] = "faemirrorscript",

  ["the band for a celestial coronet"] = "coronetband",
  ["the angels for a celestial coronet"] = "coronetangels",
  ["the spheres for a celestial coronet"] = "coronetspheres",
  ["the engravings for a celestial coronet"] = "coronetengravings",

  ["the edge for a jagged claw"] = "chaosclawedge",
  ["the tip for a jagged claw"] = "chaosclawtip",
  ["the corruption for a jagged claw"] = "chaosclawcorruption",
  ["the span for a jagged claw"] = "chaosclawspan",

  ["the globe for an icon statuette"] = "statuetteglobe",
  ["the sigils for an icon statuette"] = "statuettesigils",
  ["the shards for an icon statuette"] = "statuetteshards",
  ["the icon for a statuette"] = "statuetteicon",

  ["the blade for a sacrificial kris"] = "krisblade",
  ["the haft for a sacrificial kris"] = "krishaft",
  ["the runes for a sacrificial kris"] = "krisrunes",
  ["the steel for a sacrificial kris"] = "krissteel",

  ["the hilt for a crystal sword"] = "crystalswordhilt",
  ["the guard for a crystal sword"] = "crystalswordguard",
  ["the blade for a crystal sword"] = "crystalswordblade",
  ["the gem for a crystal sword"] = "crystalswordgem",
  
--Dragon

	["a Blue Dragon's claw"] = "bluedragonclaw",
	["Blue Dragon leather"] = "bluedragonleather",
	["a Blue Dragon's eye"] = "bluedragoneye",
	["a Blue Dragon's tooth"] = "bluedragontooth",
	["a Blue Dragon's heart"] = "bluedragonheart",
	["a Blue Dragon bone"] = "bluedragonbone",
	["a Blue Dragon's scale"] = "bluedragonscale",
	["a Blue Dragon's lung"] = "bluedragonlung",

	["a Red Dragon's claw"] = "reddragonclaw",
	["Red Dragon leather"] = "reddragonleather",
	["a Red Dragon's eye"] = "reddragoneye",
	["a Red Dragon's tooth"] = "reddragontooth",
	["a Red Dragon's heart"] = "reddragonheart",
	["a Red Dragon bone"] = "reddragonbone",
	["a Red Dragon's scale"] = "reddragonscale",
	["a Red Dragon's belly"] = "reddragonbelly",

	["a Black Dragon's claw"] = "blackdragonclaw",
	["Black Dragon leather"] = "blackdragonleather",
	["a Black Dragon's eye"] = "blackdragoneye",
	["a Black Dragon's tooth"] = "blackdragontooth",
	["a Black Dragon's heart"] = "blackdragonheart",
	["a Black Dragon bone"] = "blackdragonbone",
	["a Black Dragon's scale"] = "blackdragonscale",
	["a Black Dragon's acid sac"] = "blackdragonsac",

	["a Green Dragon's claw"] = "greendragonclaw",
	["Green Dragon leather"] = "greendragonleather",
	["a Green Dragon's eye"] = "greendragoneye",
	["a Green Dragon's tooth"] = "greendragontooth",
	["a Green Dragon's heart"] = "greendragonheart",
	["a Green Dragon bone"] = "greendragonbone",
	["a Green Dragon's scale"] = "greendragonscale",
	["a Green Dragon's poison sac"] = "greendragonsac",

	["a Gold Dragon's claw"] = "golddragonclaw",
	["Gold Dragon leather"] = "golddragonleather",
	["a Gold Dragon's eye"] = "golddragoneye",
	["a Gold Dragon's tooth"] = "golddragontooth",
	["a Gold Dragon's heart"] = "golddragonheart",
	["a Gold Dragon bone"] = "golddragonbone",
	["a Gold Dragon's scale"] = "golddragonscale",
	["a Gold Dragon's brain stem"] = "golddragonstem",

	["a Silver Dragon's claw"] = "silverdragonclaw",
	["Silver Dragon leather"] = "silverdragonleather",
	["a Silver Dragon's eye"] = "silverdragoneye",
	["a Silver Dragon's tooth"] = "silverdragontooth",
	["a Silver Dragon's heart"] = "silverdragonheart",
	["a Silver Dragon bone"] = "silverdragonbone",
	["a Silver Dragon's scale"] = "silverdragonscale",
	["a Silver Dragon's larynx"] = "silverdragonlarynx",
	
 --AZATLAN
  
	["a red eagle's feather"] = "redfeather",
	["a yellow eagle's feather"] = "yellowfeather",
	["a blue eagle's feather"] = "bluefeather",
	["a green eagle's feather"] = "greenfeather",
	["an orange eagle's feather"] = "orangefeather",
	["a purple eagle's feather"] = "purplefeather",
	["a black eagle's feather"] = "blackfeather",

	["a coati's tooth"] = "coatitooth",
	["a coati's collar"] = "coaticollar",
	["some coati bait"] = "coatibait",
	["a coati tail"] = "coatitail",
	["a coati's claw"] = "coaticlaw",
	["a coati's paw"] = "coatipaw",

	["a kinkajou's tooth"] = "kinkajoutooth",
	["a collar for a kinkajou"] = "kinkajoucollar",
	["some kinkajou bait"] = "kinkajoubait",
	["a kinkajou's tail"] = "kinkajoutail",
	["a kinkajou claw"] = "kinkajouclaw",
	["a kinkajou's paw"] = "kinkajoupaw",
	
	["a red quetzal feather"] = "quetzalredfeather",
	["a blue quetzal feather"] = "quetzalbluefeather",
	["a green quetzal feather"] = "quetzalgreenfeather",
	["a wooden quetzal cage"] = "quetzalcage",
	["a quetzal talon"] = "quetzaltalon",
	["a quetzal egg"] = "quetzalegg",

	["the left half of a Transoceanic Orb"] = "orbleft",
	["the right half of a Transoceanic Orb"] = "orbright",
	["the center of a Transoceanic Orb"] = "orbcenter",

	["the shaft of an atlatl"] = "atlatlshaft",
	["the cup of an atlatl"] = "atlatlcup",
	["a spear for an atlatl"] = "atlatlspear",

	["the broken tip of an obsidian knife"] = "knifebladetop",
	["the broken tang of an obsidian knife"] = "knifebladebottom",
	["some green leather"] = "knifeleather",
	
--Wonders

	["a bucket handle"] = "buckethandle",
	["a bucket's left side"] = "bucketleft",
	["a bucket's right side"] = "bucketright",
	["a bucket's base"] = "bucketbase",
	["a globe of enchanted water"] = "bucketwater",

	["blue Dragon scales"] = "packscales",
	["some backpack straps"] = "packstraps",
	["a backpack lining"] = "packlining",
	["backpack thread"] = "packthread",
	["backpack leather"] = "packleather",

	["a whistle mouthpiece"] = "whistlemouth",
	["a whistle's flue"] = "whistleflue",
	["a whistle reed"] = "whistlereed",
	["a whistle's top pipe"] = "whistletoppipe",
	["a whistle's bottom pipe"] = "whistlelowpipe",

	["a ram's horn"] = "ramshorn",
	["a horn mouthpiece"] = "hornmouth",
	["a left horn strap"] = "hornleftstrap",
	["a right horn strap"] = "hornrightstrap",
	["some fasteners"] = "hornfastener",

	["a lens top"] = "monotop",
	["a lens bottom"] = "monobottom",
	["a monocle frame"] = "monoframe",
	["a monocle's catch"] = "monocatch",
	["a monocle's clasp"] = "monoclasp",

	["a globe's top"] = "globetop",
	["a globe's middle"] = "globemiddle",
	["a globe's bottom"] = "globebottom",

--Misc
	
	["a hookah's base"] = "hookahbase",
	["a hookah's bowl"] = "hookahbowl",
	["a hookah's wind hood"] = "hookahhood",
	["a hookah's chain"] = "hookahchain",
	["a hookah's hoses"] = "hookahhoses",
	["a hookah's stem"] = "hookahstem",
	["a hookah's ash plate"] = "hookahplate",
	
	["the rollers for a tapestry"] = "tapestryroller",
	["an onyx pedestal"] = "tapestryonyx",
	["a piece of aged vellum"] = "tapestryvellum",	
	["the claw from a shadow dragon"] = "tapestryclaw",
	
	["the key to a vault"] = "keyfragment",
		
	["the fragment to a sphere"] = "spherefragment",
	
	["the body of a clay figurine"] = "clayfigurinebody",
	["the head of a clay figurine"] = "clayfigurinehead",
	["the legs of a clay figurine"] = "clayfigurinelegs",
	["the arms of a clay figurine"] = "clayfigurinearms",
	
--Historical

	["a Golden Window's frame"] = "windowframe",
	["a Golden Window's pane"] = "windowpane",
	["a Golden Window's jamb"] = "windowjamb",
	["a Golden Window's shutters"] = "windowshutters",
	["a Golden Window's grid"] = "windowgrid",
	
	["Mantle of Himalia cloth"] = "mantlecloth",
	["Mantle of Himalia thread"] = "mantlethread",
	["Mantle of Himalia centrepiece"] = "mantlecentre",
	["Mantle of Himalia gems"] = "mantlegems",
	
	
	[" an icicle's top"] = "icicletop",
	[" an icicle's middle"] = "iciclemiddle",
	[" an icicle's base"] = "iciclebase",
	[" an icicle's tip"] = "icicletip",
	["icicle runes"] = "iciclerunes",
	
	["an Ormyrr skull"] = "helmetskull",
	["a helmet nosepiece"] = "helmetnose",
	["a helmet strap"] = "helmetstrap",
	
	["a smooth piece of obsidian"] = "disctop",
	["a broken piece of obsidian"] = "discside",
	["a rough piece of obsidian"] = "discmiddle",
	["a smooth piece of obsidian"] = "discbottom",
	["obsidian runes"] = "discrunes",
	["a round piece of obsidian"] = "disccentre",
	
	["a votive's base"] = "votivebase",
	["a votive's wick"] = "votivewick",
	["votive wax"] = "votivewax",
	
	["a whisperstone top"] = "stonetop",
	["a whisperstone bottom"] = "stonebottom",
	["a rough whisperstone piece"] = "stonemiddle",
	["a jagged whisperstone piece"] = "stoneside",
	["a whisperstone core"] = "stonecore",
	["a whisperstone emitter"] = "stoneemitter",
	
	["glass lily petals"] = "lilypetals",
	["a glass lily stem"] = "lilystem",
	["a glass lily stamen"] = "lilystamen",
	["a glass lily bulb"] = "lilybulb",
	["a glass lily pistil"] = "lilypistil",
	
	["ozhera bait"] = "ozherabait",
	["an ozhera collar"] = "ozheracollar",
	["an ozhera egg"] = "ozheraegg",
	["an ozhera claw"] = "ozheraclaw",
	["an ozhera beak"] = "ozherabeak",
	["an ozhera nest"] = "ozheranest",
	
	["a polka-dotted turtle shell"] = "turtleshell",
	["turtle bait"] = "turtlebait",
	["a little turtle collar"] = "turtlecollar",
	["a polka-dot turtle tail"] = "turtletail",
	["a turtle foot"] = "turtlefoot",
	["a polka-dot turtle tongue"] = "turtletongue",
	
	["mongoose bait"] = "mongoosebait",
	["a mongoose collar"] = "mongoosecollar",
	["a mongoose claw"] = "mongooseclaw",
	["a mongoose paw"] = "mongoosepaw",
	["a mongoose tail"] = "mongoosetail",
	["a mongoose fang"] = "mongoosefang",
	
	["hellcat bait"] = "hellcatbait",
	["a hellcat collar"] = "hellcatcollar",
	["a hellcat claw"] = "hellcatclaw",
	["a hellcat fang"] = "hellcatfang",
	["a hellcat tail"] = "hellcattail",
	["a hellcat paw"] = "hellcatpaw",
	
--Conclave

	["a tophat's lining"] = "tophatlining",
	["a tophat's brim"] = "tophatbrim",
	["some thread"] = "tophatthread",
	["a tophat's hatband"] = "tophatband",

	["an hourglass's top"] = "hourglasstop",
	["an hourglass's bottom"] = "hourglassbottom",
	["hourglass sand"] = "hourglasssand",
	["an hourglass bulb"] = "hourglassbulb",

	["a beautiful gem"] = "broochgem",
	["a brooch's clasp"] = "broochclasp",
	["metal for a brooch"] = "broochmetal",
	["a brooch's hook"] = "broochhook",

	["an elemental sprite's legs"] = "spritelegs",
	["an elemental sprite's arms"] = "spritearms",
	["an elemental sprite's head"] = "spritehead",
	["an elemental sprite's torso"] = "spritetorso",

	["a vault's door"] = "vaultdoor",
	["a vault's hinge"] = "vaulthinge",
	["a vault's handle"] = "vaulthandle",
	["a vault's inlaid gems"] = "vaultgems",

	["a Ring of Flying's top"] = "ringtop",
	["a Ring of Flying's bottom"] = "ringbottom",
	["a Ring of Flying's inside"] = "ringinside",
	["a Ring of Flying's outside"] = "ringoutside",

	["the inside of an Armband of Celerity"] = "armbandinside",
	["the outside of an Armband of Celerity"] = "armbandoutside",
	["the top of an Armband of Celerity"] = "armbandtop",
	["the bottom of an Armband of Celerity"] = "armbandbottom",

	["a Buckawn Amulet's thread"] = "amuletthread",
	["A Buckawn Amulet's chain"] = "amuletchain",
	["a Buckawn Amulet's silver ball"] = "amuletball",
	["a Buckawn Amulet's thread"] = "amuletthread",

	["leather for a Grimoire of Adaptation"] = "grimoireleather",
	["paper for a Grimoire of Adaptation"] = "grimoirepaper",
	["gems for a Grimoire of Adaptation"] = "grimoiregems",
	["the lock for a Grimoire of Adaptation"] = "grimoirelock",

	["a Stygian Pendant's clasp"] = "pendantclasp",
	["a Stygian Pendant's pearl"] = "pendantpearl",
	["a Stygian Pendant's base"] = "pendantbase",
	["a Stygian Pendant's hook"] = "pendanthook",

	["thread for Grand Magi robes"] = "robesthread",
	["fabric for Grand Magi robes"] = "robesfabric",
	["trim for Grand Magi robes"] = "robestrim",
	["a needle for sewing Grand Magi robes"] = "robesneedle",

	["thread for Atavian wings"] = "wingsthread",
	["Atavian feathers"] = "wingsfeathers",
	["a left Atavian wing "] = "wingsleft",
	["a right Atavian wing"] = "wingsright",

--MARKS
  
	["a mouthpiece of a Warhorn of Heroes"] = "ivoryhornmouthpiece",
	["the fittings of a Warhorn of Heroes"] = "ivoryhornfittings",
	["the left side of a Warhorn of Heroes"] = "ivoryhornleft",
	["the right side of a Warhorn of Heroes"] = "ivoryhornright",

	["the disc of a Champion's medallion"] = "ivorymedalliondisc", 
	["the clasp of a Champion's medallion"] = "ivorymedallionclasp", 
	["the accent of a Champion's medallion"] = "ivorymedallionaccent", 
	["the ribbon of a Champion's medallion"] = "ivorymedallionribbon",
	
	["the lens of a Sangrean spyglass"] = "ivoryspyglasslens", 
	["the eye piece of a Sangrean spyglass"] = "ivoryspyglasseyepiece", 
	["the body of a Sangrean spyglass"] = "ivoryspyglassbody", 
	["the trap of a Sangrean spyglass"] = "ivoryspyglassstrap",

	["a piece of silk from an Ivory pennon"] = "ivorypennonsilk", 
	["a piece of ribbon from an Ivory pennon"] = "ivorypennonribbon", 
	["some thread from an Ivory pennon"] = "ivorypennonthread", 
	["some dye for an Ivory pennon"] = "ivorypennondye",

	[" the accent of an ivory armband"] = "ivoryarmbandaccent", 
	["the inner shell of a silver armband"] = "ivoryarmbandouter", 
	["the outer shell of a silver armband"] = "ivoryarmbandinner", 
	["a silver armband clasp"] = "ivoryarmbandclasp",
	
	["the body of an Atlantia dummy"] = "ivoryatlantiabody", 
	["the legs of an Atlantia dummy"] = "ivoryatlantialegs", 
	["the head of an Atlantia dummy"] = "ivoryatlantiahead", 
	["the arms of an Atlantia dummy"] = "ivoryatlantiaarms",

	["the limbs of a Champion's Training dummy"] = "ivorydummylimbs", 
	["the torso of a Champion's Training dummy"] = "ivorydummytorso", 
	["the clothing of a Champion's Training dummy"] = "ivorydummyclothing", 
	["the armour of a Champion's Training dummy"] = "ivorydummyarmour",
	
	["the base of a miniature ivory tower"] = "ivorytowerbase", 
	["the lower steps of a miniature ivory tower"] = "ivorytowerlower", 
	["the upper part of a miniature ivory tower"] = "ivorytowerupper", 
	["the laquer for a miniature ivory tower"] = "ivorytowerlacquer",

	["the core of an Atlantia bowstring"] = "ivorybowstringcore", 
	["the wrapping of an Atlantia bowstring"] = "ivorybowstringwrapping", 
	["the eyelet of an Atlantia bowstring"] = "ivorybowstringeyelet", 
	["the enchantment for an Atlantia bowstring"] = "ivorybowstringenchant",

	["the hilt of an Anima's Thirst"] = "quisaisdaggerhilt", 
	["the blade of an Anima's Thirst"] = "quisalisdaggerblade", 
	["the pommel of an Anima's Thirst"] = "quisalisdaggerpommel", 
	["the grip of an Anima's Thirst"] = "quisalisdaggergrip",

	["the lower fragment of a notched bone"] = "quisalisbonelower", 
	["the upper fragment of a notched bone"] = "quisalisboneupper", 
	["a piece of rope for a notched bone"] = "quisalisbonerope", 
	["the stain of a notched bone"] = "quisalisbonestain",

	["the chain of a Callibian medallion"] = "quisalismedallionchain", 
	["the top part of a Callibian medallion"] = "quisalismedalliontop", 
	["the bottom fragment of a Callibian medallion"] = "quisalismedallionbottom", 
	["the clasp of a Callibian medallion"] = "quisalismedallionclasp",

	["the case of the Grandmaster's looking glass"] = "quisalisglasscase", 
	["the lens of the Grandmaster's looking glass"] = "quisalisglasslens", 
	["the iris of the Grandmaster's looking glass"] = "quisalisglassiris", 
	["the eye piece of the Grandmaster's looking glass"] = "quisalisglasseyepiece",

	["the hair of a Derillin dummy"] = "quisalisderillinhair", 
	["the clothing of a Derillin dummy"] = "quisalisderillinclothing", 
	["the head of a Derillin dummy"] = "quisalisderillinhead", 
	["the torso of a Derillin dummy"] = "quisalisderillintorso",

	["the limbs of an Assassin's dummy"] = "quisalisdummylimbs", 
	["the torso of an Assassin's dummy"] = "quisalisdummytorso", 
	["the robes of an Assassin's dummy"] = "quisalisdummyrobes", 
	["the targets of an Assassin's dummy"] = "quisalisdummytargets",
	
	["the top of a Quisalis tombstone"] = "quisalistombstonetop", 
	["the middle of a Quisalis tombstone"] = "quisalistombstonemiddle", 
	["the base of a Quisalis tombstone"] = "quisalistombstonebase", 
	["the script of a Quisalis tombstone"] = "quisalistombstonescript",

	["the serpent insignia of a steel armband"] = "quisalisarmbandserpent", 
	["the eyes of a steel armband"] = "quisalisarmbandeyes", 
	["the top fragment of a steel armband"] = "quisalisarmbandtop", 
	["the bottom fragment of a steel armband"] = "quisalisarmbandbottom",

	["the cloth of a cloak of the Blood Maiden"] = "quisaliscloakcloth", 
	["the embroidery of a cloak of the Blood Maiden"] = "quisaliscloakembroidery", 
	["the lining of a cloak of the Blood Maiden"] = "quisaliscloaklining", 
	["the hood of a cloak of the Blood Maiden"] = "quisaliscloakhood",

	["the bone of a Death Keeper's mask"] = "quisalismaskbone", 
	["the wire of a Death Keeper's mask"] = "quisalismaskwire", 
	["the teeth of a Death Keeper's mask"] = "quisalismaskteeth", 
	["the runes of a Death Keeper's mask"] = "quisalismaskrunes",

-- SEAFARING

	["the contents of a cargo crate of clovers"] = "cloverboxclovers",
	["the sides from a cargo crate of clovers"] = "cloverboxsides",
	["the lid from a cargo crate of clovers"] = "cloverboxlid",
	["the base of a cargo crate of clovers"] = "cloverboxbase",
 
	["the arms of a figurine of Captain Maelstrom"] = "maelstromarms",
	["the legs of a figurine of Captain Maelstrom"] = "maelstromlegs",
	["the torso of a figurine of Captain Maelstrom"] = "maelstromtorso",
	["the head of a figurine of Captain Maelstrom"] = "maelstromhead",
 
	["the left wing of a scintillating pair of cascading wings"] = "islandwingsleft",
	["the right wing of a scintillating pair of cascading wings"] = "islandwingsright",
	["the binding thread of a scintillating pair of cascading wings"] = "islandwingsthread",
	["the shoulder straps of a scintillating pair of cascading wings"] = "islandwingsstraps",
 
	["the handle of a frosted pail of pitch"] = "frostpailhandle",
	["the left-hand side of a frosted pail of pitch"] = "frostpailleft",
	["the right-hand side of a frosted pail of pitch"] = "frostpailright",
	["the base of a frosted pail of pitch"] = "frostpailbase",
 
	["the handle of a neatly-appointed pail of pitch"] = "neatpailhandle",
	["the left-hand side of a neatly-appointed pail of pitch"] = "neatpailleft",
	["the right-hand side of a neatly-appointed pail of pitch"] = "neatpailright",
	["the base of a neatly-appointed pail of pitch"] = "neatpailbase",
 
	["the top half of a Shipwright's union chit"] = "shipchittop",
	["the bottom half of a Shipwright's union chit"] = "shipchitbottom",
	["the ink from a Shipwright's union chit"] = "shipchitink",
	["the official seal from a Shipwright's union chit"] = "shipchitseal",
 
	["the mounting plate for an etched and lacquered plaque"] = "xpplaquemount",
	["the fascia from an etched and lacquered plaque"] = "xpplaquefascia",
	["the lacquer for an etched and lacquered plaque"] = "xpplaquelacquer",
	["the lettering from an etched and lacquered plaque"] = "xpplaquelettering",
 
	["the ink from a stylised ocean map"] = "monstermapink",
	["the parchment from a stylised ocean map"] = "monstermapparchment",
	["the compass rose from a stylised ocean map"] = "monstermapcompass",
	["the magical enchantment from a stylised ocean map"] = "monstermapenchant",
 
	["the mounting plate of a crossbow of coconut lumber"] = "crossbowmount",
	["the draw arms of a crossbow of coconut lumber"] = "crossbowarms",
	["the string from a crossbow of coconut lumber"] = "crossbowstring",
	["the winding crank of a crossbow of coconut lumber"] = "crossbowcrank",
 
	["the neck from a polished green bottle"] = "glassbottleneck",
	["the main cylinder from a polished green bottle"] = "glassbottlemiddle",
	["the base of a polished green bottle"] = "glassbottlebase",
	["the magical enchantment from a polished green bottle"] = "glassbottleenchant",
 
	["the handle of an overgrown pail of pitch"] = "seaweedpailhandle",
	["the left-hand side of an overgrown pail of pitch"] = "seaweedpailleft",
	["the right-hand side of an overgrown pail of pitch"] = "seaweedpailright",
	["the base of an overgrown pail of pitch"] = "seaweedpailbase",
	
	["the shell of a smoke flare"] = "smokeflareshell",
	["the fins of a smoke flare"] = "smokeflarefins",
	["the lid of a smoke flare"] = "smokeflarelid",
	["the chamber of a smoke flare"] = "smokeflarechamber",
 
--Death

	["the top of a loop of mortal coil"] = "coiltop",
	["the bottom of a loop of mortal coil"] = "coilbottom",
	["a strand of mortal coil"] = "coilstrand",
	["the binding for a loop of mortal coil"] = "coilbinding",

	["the tip of a vulture's talon"] = "talontip",
	["the stem of a vulture's talon"] = "talonstem",
	["the base of a vulture's talon"] = "talonbase",
	["the poison for a vulture's talon"] = "talonpoison",

	["some candle wax"] = "candlewax",
	["the flame for a candle of cessation"] = "candleflame",
	["the base for a candle of cessation"] = "candlebase",
	["the string for a candle of cessation"] = "candlestring",
	
	["the head of a cowled dummy"] = "deathdummyhead",
	["the arms of a cowled dummy"] = "deathdummyarms",
	["the torso of a cowled dummy"] = "deathdummytorso",
	["the legs of a cowled dummy"] = "deathdummylegs",
	
	["the top of a gravestone"] = "gravestonetop",
	["the bottom of a gravestone"] = "gravestonebottom",
	["the inscription for a gravestone"] = "gravestoneinscription",
	["the lichen for a gravestone"] = "gravestonelichen",
	
	["the base of a soulfire crucible"] = "cruciblebase",
	["the handle of a soulfire crucible"] = "cruciblehandle",
	["the bowl of a soulfire crucible"] = "cruciblebowl",
	["the flame of a soulfire crucible"] = "crucibleflame",
	
	["the mouthpiece for death's call"] = "deathscallmouth",
	["the horn for death's call"] = "deathscallhorn",
	["the tassels for death's call"] = "deathscalltassels",
	["the coil for death's call"] = "deathscallcoil",
	
	["the brocade for a sycophantic shoulder cape"] = "capebrocade",
	["the thread for a sycophantic shoulder cape"] = "capethread",
	["the enchantment for a sycophantic shoulder cape"] = "capeenchantment",
	["the velvet for a sycophantic shoulder cape"] = "capevelvet",
	
--Blackwave

	["The top of a taper of eternity"] = "tapertop", 
	["The bottom of a taper of eternity"] = "taperbottom",
	["The wax for a taper of eternity"] = "taperwax",
	["The string for a taper of eternity"] = "taperstring",

	["The band for a ring of finality"] = "signetband",
	["The bezel for a ring of finality"] = "signetbezel",
	["The carving for a ring of finality"] = "signetcarving",
	["The marks for a ring of finality"] = "signetmarks",

	["The lizard for a grievous keyring"] = "keyringlizard",
	["The tiger for a grievous keyring"] = "keyringtiger",
	["The slate for a grievous keyring"] = "keyringslate",
	["The hoop for a grievous keyring"] = "keyringhoop",

	["The head of a goblin"] = "goblinhead",
	["The arms of a goblin"] = "goblinarms",
	["The torso of a goblin"] = "goblintorso",
	["The legs of a goblin"] = "goblinlegs",

	["The top of a subjectioner's spigot"] = "spigottop",
	["The bottom of a subjectioner's spigot"] = "spigotbottom",
	["The stem of a subjectioner's spigot"] = "spigotstem",
	["The tip of a subjectioner's spigot"] = "spigottip",

	["The band for sunless hope"] = "sunlessband",
	["The stone for sunless hope"] = "sunlessstone",
	["The binding for sunless hope"] = "sunlessbinding",
	["The enchantment for sunless hope"] = "sunlessenchantment",

	["The fur for Vakha's bribe"] = "circletfur",
	["The blades for Vakha's bribe"] = "circletblades",
	["The band for Vakha's bribe"] = "circletband",
	["The binding for Vakha's bribe"] = "circletbinding",

	["The stone for pedigree's jewel"] = "sanguinestone",
	["The aura for pedigree's jewel"] = "sanguineaura",
	["The teardrop for pedigree's jewel"] = "sanguineteardrop",
	["The blood for pedigree's jewel"] = "taintedblood",

	["The lid for a canopic jar"] = "canopiclid",
	["The fluid for a canopic jar"] = "canopicfluid",
	["The base for a canopic jar"] = "canopicbase",
	["The pot for a canopic jar"] = "canopicpot",

	["A shard for an apperception stone"] = "crystalshard",
	["The base of an apperception stone"] = "crystalbase",
	["The binding for an apperception stone"] = "crystalbinding",
	["The portal for an apperception stone"] = "crystalportal",

	["The leather for revelation's guise"] = "guiseleather",
	["The thread for revelation's guise"] = "guisethread",
	["The smile for revelation's guise"] = "guisesmile",
	["The enchantment for revelation's guise"] = "guiseenchantment",

	["The scroll for an experimenter's grimoire"] = "grimoirescroll",
	["The gut for an experimenter's grimoire"] = "grimoiregut",
	["The cover for an experimenter's grimoire"] = "grimoirecover",
	["The binding for an experimenter's grimoire"] = "grimoirebinding",

	["The enchantment for suremekh'neina"] = "mantleenchant",
	["The clasp for suremekh'neina"] = "mantleclasp",
	["The fabric for suremekh'neina"] = "mantlefabric",
	["The lining for suremekh'neina"] = "mantlelining",

-- RACES SET

	["The pipes for a set of crystalline panpipes"] = "panpipepipes",
	["the feathers for a set of crystalline panpipes"] = "panpipefeathers",
	["The hair for a set of crystalline panpipes"] = "panpipehair",
	["The flutes for a set of crystalline panpipes"] = "panpipeflutes",

	["The bones for a shamanistic rattle"] = "rattlebones",
	["The staff for a shamanistic rattle"] = "rattlestaff",
	["The antlers for a shamanistic rattle"] = "rattleantlers",
	["The runes for a shamanistic rattle"] = "rattlerunes",

	["The frame for a collapsable catapult"] = "catapultframe",
	["The bolts for a collapsable catapult"] = "catapultbolts",
	["The wheel for a collapsable catapult"] = "catapultwheel",
	["The arm for a collapsable catapult"] = "catapultarm",

	["Some blood spattered cloth"] = "clothblood",
	["A piece of whispersilk"] = "whispersilk",
	["The enchantment for a whispercloth"] = "clothenchantment",
	["The binding for a whispercloth"] = "clothbinding",

	["The glass for a demolition sphere"] = "sphereglass",
	["The fire for a demolition sphere"] = "spherefire",
	["The runes for a demolition sphere"] = "sphererunes",
	["The spark for a demolition sphere"] = "spherespark",

	["The carving for a piece of horkval chitin"] = "chitincarving",
	["A fragment of horkval chitin"] = "chitinfragment",
	["The colouring for a piece of horkval chitin"] = "chitincolour",
	["The name for a piece of horkval chitin"] = "chitinname",

	["The head for a flattened frogskin"] = "froghead",
	["The cord for a flattened frogskin"] = "frogcord",
	["The body for a flattened frog skin"] = "frogbody",
	["The feet for a flattened frog skin"] = "frogfeet",

	["The barbs for a pair of Dala'myrr claws"] = "clawbarbs",
	["The points for a set of Dala'myrr claws"] = "clawpoints",
	["The straps for a set of Dala'myrr claws"] = "clawstraps",
	["The base for a pair of Dala'myrr claws"] = "clawbase",

	["The glass for a bottled siren's song"] = "sirenglass",
	["The voice for a bottled siren's song"] = "sirenvoice",
	["The cork for a bottled siren's song"] = "sirencork",
	["The smoke for a bottled siren's song"] = "sirensmoke",

	["The lens for an arachnid eye"] = "arachnidlens",
	["The eyeball for an arachnid eye"] = "arachnideyeball",
	["The enchantment for an arachnid's eye"] = "arachnidenchantment",
	["The colouration for an arachnid's eye"] = "arachnidcolour",

	["The top of a dwarven lodestone"] = "lodestonetop",
	["The left fragment of a dwarven lodestone"] = "lodestoneleft",
	["The base of a dwarven lodestone"] = "lodestonebase",
	["The right fragment of a dwarven lodestone"] = "lodestoneright",

	["The head of a figurine of the suffering Maya"] = "figurinehead",
	["The arms of a figurine of the suffering Maya"] = "figurinearms",
	["The torso of a figurine of the suffering Maya"] = "figurinetorso",
	["The legs of a figurine of the suffering Maya"] = "figurinelegs",

-- FORAYS
 
	["the spine of a feather from Aran'Kesh"] = "arankeshfeatherspine",
	["the down from a feather of Aran'Kesh"] = "arankeshfeatherdown",
	["the colouration for a feather from Aran'Kesh"] = "arankeshfeathercolour",
	["the lethally sharp edge of a feather from Aran'Kesh"] = "arankeshfeatheredge",
 
	["a golden mirror frame"] = "goldmirrorframe",
	["silvery mirror class"] = "mirrorglass",
	["a cursed piece of glass"] = "mirrorcurse",
	["the inscription for a cursed mirror"] = "mirrorinscription",
 
	["the bowl for some ogre's broth"] = "brothbowl",
	["some basic ogre's broth"] = "brothbroth",
	["some seasoning for ogre's broth"] = "brothseasoning",
	["some special ogre spices"] = "brothspice",
 
	["the chipping for a large boulder"] = "boulderchipping",
	["the shell for a large boulder"] = "bouldershell",
	["the core of a large boulder"] = "bouldercore",
	["the stone for a large boulder"] = "boulderstone",
 
	["clumps of weeds"] = "margamwheelweeds",
	["the bolts for a ship's wheel"] = "margamwheelbolts",
	["the wood for a ship's wheel"] = "margamwheelwood",
	["a cursed ship's wheel centre"] = "margamwheelcentre",
 
	["the top of a map fragment"] = "mapfragmenttop",
	["the bottom of a map fragment"] = "mapfragmentbottom",
	["the left piece of a map fragment"] = "mapfragmentleft",
	["the right piece of a map fragment"] = "mapfragmentright",

-- Cities set

	["The chain for a set of wraith shackles"] = "wraithshacklechain",
	["The smoke for a set of wraith shackles"] = "wraithshacklesmoke",
	["The manacles for a set of wraith shackles"] = "wraithshacklemanacle",
	["The lock for a set of wraith shackles"] = "wraithshacklelock",

	["The globe for a celescope"] = "celescopeglobe",
	["The cylinders for a celescope"] = "celescopecylinders",
	["The eyepiece for a celescope"] = "celescopeeyepiece",
	["The ingraving for a celescope"] = "celescopeingraving",

	["The base for a disgusting biscuit"] = "biscuitbase",
	["The special ingredient for a disgusting biscuit"] = "biscuitspecial",
	["The sugar for a disgusting biscuit"] = "biscuitsugar",
	["The salt for a disgusting biscuit"] = "biscuitsalt",

	["The song for a music box"] = "musicboxsong",
	["The mechanism for a music box"] = "musicboxmechanism",
	["The frame for a broken music box"] = "musicboxframe",
	["The crank for a broken music box"] = "musicboxcrank",

	["The lid for an alabaster urn"] = "alabasterurnlid",
	["The pot for an alabaster urn"] = "alabasterurnpot",
	["The inscription for an alabaster urn"] = "alabasterurninscript",
	["The ash for an alabaster urn"] = "alabasterurnash",

	["The roots for a tumbleweed"] = "tumbleweedroots",
	["The tendrils for a tumbleweed"] = "tumbleweedtendrils",
	["The vines for a tumbleweed"] = "tumbleweedvines",
	["The roots for a tumbleweed"] = "tumbleweedstem",

-- Monks
	
	["The head of a monk dummy"] = "monkdummyhead",
	["The arms of a monk dummy"] = "monkdummyarms",
	["The torso of a monk dummy"] = "monkdummytorso",
	["The legs of a monk dummy"] = "monkdummylegs",

	["The fleshy part of a tongue"] = "tongueflesh",
	["The metal casing for a tongue"] = "tonguecasing",
	["The polish for the metal casing for a tongue"] = "tonguepolish",
	["The curse for an odyssean tongue"] = "tonguecurse",

	["The threads for a black headband"] = "monkheadbandthreads",
	["The amethyst for a black headband"] = "monkheadbandamethyst",
	["The enchantment for a black headband"] = "monkheadbandenchantment",
	["The support for a black headband"] = "monkheadbandsupport",

	["A crimson steel band"] = "crimsonsteelband",
	["A rough-cut quartz setting"] = "quartzsetting",
	["The claws for a taloned ring"] = "ringsteelclaws",
	["The binding for a taloned ring"] = "talonedringbinding",

	["The cloth for a pennon of cranes"] = "pennoncloth",
	["The cranes for a pennon"] = "pennoncranes",
	["The staff for a pennon of cranes"] = "pennonstaff",
	["The thread for a pennon of cranes"] = "pennonthread",

	["The flag for a rallying banner"] = "monkbannerflag",
	["The embroidery for a rallying banner"] = "monkbannerembroidery",
	["The spear for a rallying banner"] = "monkbannerspear",
	["The thread for a rallying banner"] = "monkbannerthread",

	["The stave for an ash wood staff"] = "ashstaffstave",
	["The strapping for an ash wood staff"] = "ashstaffstrapping",
	["The cap for an ash wood staff"] = "ashstaffcap",
	["The shoe for an ash wood staff"] = "ashstaffshoe",

	["The wood for an olive branch"] = "olivewood",
	["The shoots for an olive branch"] = "olivebranchshoots",
	["The leaves for an olive branch"] = "oliveleaves",
	["The enchantment for an olive branch"] = "olivebranchenchantment",

-- Elemental

	["The cyclone for an Air Elemental"] = "airelementalcyclone",
	["The essence for an Air Elemental"] = "airelementalessence",
	["The binding for an Air Elemental"] = "airelementalbinding",
	["The lightning for an Air Elemental"] = "airelementallightning",

	["The clasp for a brooch of the tempest"] = "airbroochclasp",
	["The gem for a brooch of the tempest"] = "airbroochgem",
	["The setting for a brooch of the tempest"] = "airbroochsetting",
	["The enchantment for a brooch of the tempest"] = "airbroochenchantment",

	["The chain for a fire pendant"] = "firependantchain",
	["The flame for a fire pendant"] = "firependantflame",
	["The setting for a fire pendant"] = "firependantsetting",
	["The jewel for a fire pendant"] = "firependantjewel",

	["The teeth for a warblefish's jawbone"] = "jawboneteeth",
	["The mandibles for a warblefish's jawbone"] = "jawbonemandibles",
	["The bone for a warblefish's jawbone"] = "jawbonebone",
	["The hinge for a warblefish's jawbone"] = "jawbonehinge",

	["The wood for a mineral-crusted shovel"] = "earthshovelwood",
	["The blade for a mineral-crusted shovel"] = "earthshovelblade",
	["The binding for a mineral-crusted shovel"] = "earthshovelbinding",
	["The minerals for a mineral-crusted shovel"] = "earthshovelminerals",

	["The phial for some tears of the sea"] = "seatearsphial",
	["The stopper for a phial of some tears of the sea"] = "seatearsstopper",
	["The paint for a phial for some tears of the sea"] = "seatearspaint",
	["Some tears of the sea"] = "seatearstears",

	["The links for a shackle of Garash"] = "garashshacklelinks",
	["The orbs for a shackle of Garash"] = "garashshackleorbs",
	["The enchantment for a shackle of Garash"] = "garashshackleenchantment",
	["The chains for a shackle of Garash"] = "garashshacklechains",

	["Some sticky mud"] = "mudbombmud",
	["The binding for a sticky mud bomb"] = "mudbombbinding",

	["The plaque for a seared glyph"] = "searedglyphplaque",
	["The emblem for a seared glyph"] = "searedglyphemblem",
	["The tendrils for a seared glyph"] = "searedglyphtendrils",
	["The flame for a seared glyph"] = "searedglyphflame",

	["The frame for an armoured charge tank"] = "firetankframe",
	["The flame for an armoured charge tank"] = "firetankflame",
	["The insignia for an armoured charge tank"] = "firetankinsignia",
	["The links for an armoured charge tank"] = "firetanklinks",

	["The script for a sceptre of aqueous mastery"] = "sceptrescript",
	["The enchantment for a sceptre of aqueous mastery"] = "sceptreenchantment",
	["The heart of a sceptre of aqueous mastery"] = "sceptreheart",
	["The tusk for a sceptre of aqueous mastery"] = "sceptretusk",

	["The straps for a stratospheric harness"] = "airharnessstraps",
	["The glyphs for a stratospheric harness"] = "airharnessglyphs",
	["The enchantment for a stratospheric harness"] = "airharnessenchantment",
	["The buckles for a stratospheric harness"] = "airharnessbuckles",

-- Yggdrasil
	
	["The plates for a dreadpilar figurine"] = "dreadpilarplates",
	["The body for a dreadpilar figurine"] = "dreadpilarbody",
	["The legs for a dreadpilar figurine"] = "dreadpilarlegs",
	["The head for a dreadpilar figurine"] = "dreadpilarhead",
	
	["a Squargon's head"] = "squargonhead",
	["The legs of a Squargon"] = "squargonlegs",
	["The body of a Squargon"] = "squargonbody",
	["The fangs for a Squargon"] = "squargonfangs",
	
	["The wax for a tablet"] = "tabletwax",
	["The wood for a tablet"] = "tabletwood",
	["The stylus for a tablet"] = "tabletstylus",
	["The twine	for a tablet"] = "tablettwine",
	
	["a valdblom stem"] = "valdblomstem",
	["Some valdblom leaves"] = "valdblomleaves",
	["Some valdblom essence"] = "valdblomessence",
	["a valdblom root"] = "valdblomroot",
	
	["The clay for a tash'la shaping tome"] = "shapingtomeclay",
	["The granite for a tash'la shaping tome"] = "shapingtomgranite",
	["The plates for a tash'la shaping tome"] = "shapingtomeplates",
	["The insignia for a tash'la shaping tome"] = "shapingtominsignia",
	
	["The script for a nexus cube"] = "nexuscube",
	["The gold for a nexus cube"] = "nexuscubegold",
	["The glass for a nexus cube"] = "nexuscubeglass",
	["The mote for a nexus cube"] = "nexuscubemote",
	
	["The stone for a fire crystal"] = "firecrystalstone",
	["The flame for a fire crystal"] = "firecrystalflame",
	["The enchantment for a fire crystal"] = "firecrystalenchantment",
	["The spark for a fire crystal"] = "firecrystalspark",
	
	["The flame for a planar mote"] = "moteflame",
	["The aura for a planar mote"] = "moteaura",
	["The binding for a planar mote"] = "motebinding",
	["The enchantment for a planar mote"] = "moteenchantment",
	
	["The scales from some snakeskin"] = "goldenscales",
	["a length of snakeskin"] = "goldensnakeskin",
	["The colouring from some snakeskin"] = "goldencolouring",
	["The enchantment from some snakeskin"] = "goldenenchantment",
	
	["Some wood for a branch Yggdrasil"] = "yggdrasilbranchwood",
	["A mosiac for a branch of Yggdrasil"] = "yggdrasilbranchmosaic",
	["Some enchancted fishing line"] = "yggdrasilbranchline",
	["An iron hook"] = "yggdrasilbranchhook",
	
	["The shell for a crier's bell"] = "criersshell",
	["The handle for a crier's bell"] = "criershandle",
	["The chime for a crier's bell"] = "crierschime",
	["The curse for a crier's bell"] = "crierscurse",
	
-- CONTENDERS
	
	["The clay for a piglet bank"] = "pigclay",
	["The ears of a piglet bank"] = "pigears",
	["The belly of a piglet bank"] = "pigbelly",
	["The tail of a piglet bank"] = "pigtail",

	["The lip for a jug of chum"] = "juglip",
	["The base for a jug of chum"] = "jugbase",
	["The bowl for a jug of chum"] = "jugbowl",
	["The handle for a jug of chum"] = "jughandle",

	["The string for a bouquet"] = "bouquetstring",
	["The knot for a bouquet"] = "bouquetknot",
	["The bloom for a bouquet"] = "bouquetbloom",
	["The stem for a bouquet"] = "bouquetstem",

	["The head for a featureless figurine"] = "contenderfigurinehead",
	["The arms for a featureless figurine"] = "contenderfigurinearms",
	["The legs for a featureless figurine"] = "contenderfigurinelegs",
	["The body for a featureless figurine"] = "contenderfigurinebody",

	["The handle for a magnifying glass"] = "glasshandle",
	["The pane for a magnifying glass"] = "glasspane",
	["The focus for a magnifying glass"] = "glassfocus",
	["The frame for a magnifying glass"] = "glassframe",

	["The binding for an adventurer's journal"] = "journalbinding",
	["The page for an adventurer's journal"] = "journalpage",
	["The cover for an adventurer's journal"] = "journalcover",
	["The index for an adventurer's journal"] = "journalindex",

	["The gleam for a prismatic stud"] = "studgleam",
	["The post for a prismatic stud"] = "studpost",
	["The gem for a prismatic stud"] = "studgem",
	["The back for a prismatic stud"] = "studback",

	["The gilding for a crimson ribbon bar"] = "ribbongilding",
	["The pin for a crimson ribbon bar"] = "ribbonpin",
	["The stripe for a crimson ribbon bar"] = "ribbonstripe",
	["The fold for a crimson ribbon bar"] = "ribbonfold",

-- UNDERWORLD

	["The head of a crypt worm"] = "cryptwormhead", 
	["The body of a crypt worm"] = "cryptwormbody", 
	["The fangs of a crypt worm"] = "cryptwormfangs", 
	["The binding for a crypt worm"] = "cryptwormbinding",
	
	["The chain for a splinter of shattered psyche"] = "psychesplinterchain", 
	["The frame for a splinter of shattered psyche"] = "psychesplinterframe", 
	["The length for a splinter of shattered psyche"] = "psychesplinterlength", 
	["The curse for a splinter of shattered psyche"] = "psychesplintercurse",
	
	["The thread for a skein of sanity"] = "sanityskeinthread", 
	["The coil for a skein of sanity"] = "sanityskeincoil", 
	["The curse for a skein of sanity"] = "sanityskeincurse", 
	["The binding for a skein of sanity"] = "sanityskeinbinding",
	
	["The left half of a custody talisman"] = "custodyleft", 
	["The right half of a custody talisman"] = "custodyright", 
	["The centre of a custody talisman"] = "custodycentre", 
	["The binding for a custody talisman"] = "custodybinding",
	
	["The base for a totem of unlife"] = "unlifetotembase", 
	["The wood for a totem of unlife"] = "unlifetotemwood", 
	["The skull for a totem of unlife"] = "unlifetotemskull", 
	["The tendrils for a totem of unlife"] = "unlifetotemtendrils",

	["The obsidian for a soul sliver"] = "soulsliverobsidian", 
	["The fog for a soul sliver"] = "soulsliverfog", 
	["The souls for a soul sliver"] = "soulsliversouls", 
	["The curse for a soul sliver"] = "soulslivercurse",
	
	["The hilt for a culling blade"] = "cullingbladehilt", 
	["The edge of a culling blade"] = "cullingbladeedge", 
	["The metal for a culling blade"] = "cullingblademetal", 
	["The curse for a culling blade"] = "cullingbladecurse",
	
	["The cloth for a funeral shroud"] = "funeralshroudcloth", 
	["The thread for a funeral shroud"] = "funeralshroudthread", 
	["The benediction for a funeral shroud"] = "funeralshroudbenediction", 
	["The clasp for a funeral shroud"] = "funeralshroudclasp",

-- Renegades

	["The stick for mercenary's chalk"] = "mercenarychalkstick",
	["The chalkdust for mercenary's chalk"] = "mercenarychalkdust",
	["The binding for mercenary's chalk"] = "mercenarychalkbinding",
	["The chalk for mercenary's chalk"] = "mercenarychalkchalk",
	
	["The signature for an elemental injunction"] = "injunctionsignature",
	["The script for an elemental injunction"] = "injunctionscript",
	["The paper for an elemental injunction"] = "injunctionpaper",
	["The seal for an elemental injunction"] = "injunctionseal",
	
	["The cloth for a moppet"] = "moppetcloth",
	["The eyes for a moppet"] = "moppeteyes",
	["The thread for a moppet"] = "moppetthread",
	["The buttons for a moppet"] = "moppetbuttons",
	
	["The buttons for a turncoat's coat"] = "turncoatscoat",
	["The thread for a turncoat's coat"] = "turncoatscoatthread",
	["The cloth for a turncoat's coat"] = "turncoatscoatcloth",
	["The binding for a turncoat's coat"] = "turncoatscoatbinding",
	
	["The cloth for a shadowcloak"] = "shadowcloakcloth",
	["The clasp for a shadowcloak"] = "shadowcloakclasp",
	["The thread for a shadowcloak"] = "shadowcloakthread",
	["The curse for a shadowcloak"] = "shadowcloakcurse",
	
	["The cloth for a betrayer's mantle"] = "betrayersmantlecloth",
	["The thread for a betrayer's mantle"] = "betrayersmantlethread",
	["The straps for a betrayer's mantle"] = "betrayersmantlestraps",
	["The curse for a betrayer's mantle"] = "betrayersmantlecurse",
	
	["The stone for a turncoat's masque"] = "turncoatsmasquestone",
	["The etchings for a turncoat's masque"] = "turncoatsmasqueetchings",
	["The curse for a turncoat's masque"] = "turncoatsmasquecurse",
	["The eyes for a turncoat's masque"] = "turncoatsmasqueeyes",
	
	["The cloth for a sundered pennon"] = "sunderedpennoncloth",
	["The thread for a sundered pennon"] = "sunderedpennonthread",
	["The staff for a sundered pennon"] = "sunderedpennonstaff",
	["The binding for a sundered pennon"] = "sunderedpennonbinding",

--Invasion

	["The head of a figurine of the Dark Earth"] = "darkearthhead",
	["The torso of a figurine of the Dark Earth"] = "darkearthtorso",
	["The arms of a figurine of the Dark Earth"] = "darkeartharms",
	["The legs for a figurine of the Dark Earth"] = "darkearthlegs",

	["The wheels for a battering ram"] = "batteringramwheels",
	["The ram for a battering ram"] = "batteringramram",
	["The grips for a battering ram"] = "batteringramgrips",
	["Some bolts for a battering ram"] = "batteringrambolts",
	
	["The spikes for a steel caltrop"] = "caltropspikes",
	["The ball for a steel caltrop"] = "caltropball",
	["The binding for a steel caltrop"] = "caltropbinding",
	["The barbs for a steel caltrop"] = "caltropbarbs",
	
	["The pot for an iron cauldron"] = "cauldronpot",
	["The oil for an iron cauldron"] = "cauldronoil",
	["The handle for an iron cauldron"] = "cauldronhandle",
	["The base for an iron cauldron"] = "cauldronbase",
	
	["The link for an adamantine shackle"] = "shadowshacklelink",
	["The metal for an adamantine shackle"] = "shadowshacklemetal",
	["The enchantment for an adamantine shackle"] = "shadowshackleenchantment",
	["The shadow for an adamantine shackle"] = "shadowshackleshadow",
	
	["The lid for a hag's eye"] = "hagseyelid",
	["The ball for a hag's eye"] = "hagseyeball",
	["The fluid for a hag's eye"] = "hagseyefluid",
	["The enchantment for a hag's eye"] = "hagseyeenchantment",
	
	["Some magic ice"] = "icebrickmagic",
	["The repeating spell for a block of ice"] = "icebrickspell",
	["The binding for a block of ice"] = "icebrickbinding",
	["The enchantment spell for a block of ice"] = "icebrickenchantment",
	
	["The enchantment for a map"] = "scoutingmapenchantment",
	["The icons	for a map"] = "scoutingmapicons",
	["The ink for a map"] = "scoutingmapink",
	["The vellum for a map"] = "scoutingmapvellum",

-- WAR
  
	["the bones for some rotting remains"] = "remainsbones",
	["the flesh for some rotting remains"] = "remainsflesh",
	["the muscles for some rotting remains"] = "remainsmuscles",
	["the blood for some rotting remains"] = "remainsblood",
 
	["the gilding for a gilded bit"] = "bitgilding",
	["the bar for a gilded bit"] = "bitbar",
	["the chain for a gilded bit"] = "bitchain",
	["the patterns for a gilded bit"] = "bitpatterns",
 
	["the head of a portly pigeon"] = "pigeonhead",
	["the body of a portly pigeon"] = "pigeonbody",
	["the legs of a portly pigeon"] = "pigeonlegs",
	["the wings of a portly pigeon"] = "pigeonwings",
 
	["the fog for a cloud of war"] = "warcloudfog",
	["the stench for a cloud of war"] = "warcloudstench",
	["the curse for a cloud of war"] = "warcloudcurse",
	["the binding for a cloud of war"] = "warcloudbinding",
 
	["the steel for a portal hoop"] = "portalhoopsteel",
	["the light for a portal hoop"] = "portalhooplight",
	["the enchantment for a portal hoop"] = "portalhoopenchantment",
	["the binding for a portal hoop"] = "portalhoopbinding",
 
	["the metal for an observant sigil"] = "observantsigilmetal",
	["the star for an observant sigil"] = "observantsigilstar",
	["the eye for an observant sigil"] = "observantsigileye",
	["the latice for an observant sigil"] = "observantsigillatice",

}

-- require this info for formatting and complete set management (note, can be extended)
-- frustratingly, being an unsorted table, this also required the additional order in the set data or I couldnt handle the formatting..
talisman.info = {
	blackdragon = {
			blackdragonbone = {required=64, short="bone"}, 
			blackdragonclaw = {required=64, short="claw"}, 
			blackdragoneye = {required=64, short="eye"}, 
			blackdragonheart = {required=64, short="heart"}, 
			blackdragonleather = {required=64, short="leather"}, 
			blackdragonscale = {required=64, short="scale"}, 
			blackdragontooth = {required=64, short="tooth"}, 
			blackdragonsac = {required=4, short="sac"}
		},
	greendragon = {
			greendragonbone = {required=64, short="bone"}, 
			greendragonclaw = {required=64, short="claw"}, 
			greendragoneye = {required=64, short="eye"}, 
			greendragonheart = {required=64, short="heart"}, 
			greendragonleather = {required=64, short="leather"}, 
			greendragonscale = {required=64, short="scale"}, 
			greendragontooth = {required=64, short="tooth"}, 
			greendragonsac = {required=4, short="sac"}
		},
	reddragon = {
			reddragonbone = {required=64, short="bone"}, 
			reddragonclaw = {required=64, short="claw"}, 
			reddragoneye = {required=64, short="eye"}, 
			reddragonheart = {required=64, short="heart"}, 
			reddragonleather = {required=64, short="leather"}, 
			reddragonscale = {required=64, short="scale"}, 
			reddragontooth = {required=64, short="tooth"}, 
			reddragonbelly = {required=4, short="belly"}
		},
	bluedragon = {
			bluedragonbone = {required=64, short="bone"}, 
			bluedragonclaw = {required=64, short="claw"}, 
			bluedragoneye = {required=64, short="eye"}, 
			bluedragonheart = {required=64, short="heart"}, 
			bluedragonleather = {required=64, short="leather"}, 
			bluedragonscale = {required=64, short="scale"}, 
			bluedragontooth = {required=64, short="tooth"}, 
			bluedragonlung = {required=4, short="lung"}
		},
	silverdragon = {
			silverdragonbone = {required=64, short="bone"}, 
			silverdragonclaw = {required=64, short="claw"}, 
			silverdragoneye = {required=64, short="eye"}, 
			silverdragonheart = {required=64, short="heart"}, 
			silverdragonleather = {required=64, short="leather"}, 
			silverdragonscale = {required=64, short="scale"}, 
			silverdragontooth = {required=64, short="tooth"}, 
			silverdragonlarynx = {required=4, short="larynx"}
		},
	golddragon = {
			golddragonbone = {required=64, short="bone"}, 
			golddragonclaw = {required=64, short="claw"}, 
			golddragoneye = {required=64, short="eye"}, 
			golddragonheart = {required=64, short="heart"}, 
			golddragonleather = {required=64, short="leather"}, 
			golddragonscale = {required=64, short="scale"}, 
			golddragontooth = {required=64, short="tooth"}, 
			golddragonstem = {required=4, short="stem"}
		},
-- AZATLAN
	eagleheaddress = {
			bluefeather = {required=64, short="blue"}, 
			greenfeather = {required=64, short="green"}, 
			redfeather = {required=64, short="red"}, 
			yellowfeather = {required=64, short="yellow"}, 
			orangefeather = {required=16, short="orange"}, 
			purplefeather = {required=16, short="purple"}, 
			blackfeather = {required=4, short="black"}, 
		},
	atlatl = {
			atlatlshaft = {required=1, short="shaft"}, 
			atlatlcup = {required=1, short="cup"}, 
			atlatlspear = {required=1, short="spear"}, 
	},
	transoceanic = {
			orbleft = {required=4, short="left"}, 
			orbright = {required=4, short="right"}, 
			orbcenter = {required=2, short="center"}, 
	},
	azatlanknife = {
			knifebladetop = {required=1, short="tip"}, 
			knifebladebottom = {required=1, short="tang"}, 
			knifeleather = {required=1, short="leather"}, 
	},
	quetzal = {
			quetzalredfeather = {required=64, short="red"}, 
			quetzalbluefeather = {required=64, short="blue"}, 
			quetzalgreenfeather = {required=64, short="green"}, 
			quetzalcage = {required=64, short="cage"}, 
			quetzaltalon = {required=16, short="talon"}, 
			quetzalegg = {required=4, short="egg"}, 
	},
	kinkajou= {
			kinkajoutooth = {required=64, short="tooth"}, 
			kinkajoucollar = {required=64, short="collar"}, 
			kinkajoubait = {required=64, short="bait"}, 
			kinkajouclaw = {required=32, short="claw"}, 
			kinkajoupaw = {required=16, short="paw"}, 
			kinkajoutail = {required=4, short="tail"}, 
	},
	coati= {
			coatitooth = {required=16, short="tooth"}, 
			coaticollar = {required=64, short="collar"}, 
			coatibait = {required=64, short="bait"}, 
			coaticlaw = {required=64, short="claw"}, 
			coatipaw = {required=32, short="paw"}, 
			coatitail = {required=4, short="tail"}, 
	},
--Wonders
	baitbucket = {
			buckethandle = {required=1, short="handle"}, 
			bucketleft = {required=1, short="left"},
			bucketright = {required=1, short="right"},
			bucketbase = {required=1, short="base"},
			bucketwater = {required=1, short="water"}
	},
	dragonskinpack = {
			packscales = {required=1, short="scales"},
			packstraps = {required=1, short="straps"},
			packlining = {required=1, short="lining"},
			packthread = {required=1, short="thread"},
			packleather = {required=1, short="leather"},
	},
	platinumwhistle = {
			whistlemouth = {required=1, short="mouth"},
			whistleflue = {required=1, short="flue"},
			whistlereed = {required=1, short="reed"},
			whistletoppipe = {required=1, short="top"},
			whistlelowpipe = {required=1, short="bottom"},
	},
	ramshorn = {
			ramshorn = {required=1, short="horn"},
			hornmouth = {required=1, short="mouth"},
			hornleftstrap = {required=1, short="left"},
			hornrightstrap = {required=1, short="right"},
			hornfastener = {required=1, short="fastener"},
	},
	monocle = {
			monotop = {required=1, short="top"},
			monobottom = {required=1, short="bottom"},
			monoframe = {required=1, short="frame"},
			monocatch = {required=1, short="catch"},
			monoclasp = {required=1, short="clasp"},
	},
  globe = {
    globetop = {required=1, short="top"},
    globemiddle = {required=1, short="middle"},
    globebottom = {required=1, short="bottom"},
  },
--Misc
	hookah = {
			hookahbase = {required=1, short="base"},
			hookahbowl = {required=1, short="bowl"},
			hookahhood = {required=1, short="hood"},
			hookahchain = {required=1, short="chain"},
			hookahhoses = {required=1, short="hose"},
			hookahstem = {required=1, short="stem"},
			hookahplate = {required=1, short="plate"},
	},
	tapestry = {
			tapestryclaw = {required=1, short="claw"},
			tapestryonyx = {required=1, short="onyx"},
			tapestryroller = {required=1, short="roller"},
			tapestryvellum = {required=1, short="vellum"},
	},
	vaultkey = {
			keyfragment = {required=1, short="keyfragment"},
	},
	negationsphere = {
			spherefragment = {required=1, short="spherefragment"},
	},
	clayfigurine = {
			clayfigurinearms = {required=1, short="arms"},
			clayfigurinelegs = {required=1, short="legs"},
			clayfigurinehead = {required=1, short="head"},
			clayfigurinebody = {required=1, short="body"},
	},
--Historical
	window = {
			windowframe = {required=1, short="frame"},
			windowpane = {required=1, short="pane"},
			windowjamb = {required=1, short="jamb"},
			windowshutters = {required=1, short="shutters"},
			windowgrid = {required=1, short="grid"},
	},
	mantle = {
			mantlecloth = {required=1, short="cloth"},
			mantlethread = {required=1, short="thread"},
			mantlecentre = {required=1, short="centre"},
			mantlegems = {required=1, short="gems"},
	},
	icicle = {
			icicletop = {required=1, short="top"},
			iciclemiddle = {required=1, short="middle"},
			iciclebase = {required=1, short="base"},
			icicletip = {required=1, short="tip"},
			iciclerunes = {required=1, short="runes"},
	},
	helmet = {
			helmetskull = {required=1, short="skull"},
			helmetnose = {required=1, short="nose"},
			helmetstrap = {required=1, short="strap"},
	},
	disc = {
			disctop = {required=1, short="top"},
			discside = {required=1, short="side"},
			discmiddle = {required=1, short="middle"},
			discbottom = {required=1, short="bottom"},
			discrunes = {required=1, short="runes"},
			disccentre = {required=1, short="centre"},
	},
	votive = {
			votivebase = {required=1, short="base"},
			votivewick = {required=1, short="wick"},
			votivewax = {required=1, short="wax"},
	},
	whisperstone = {
			stonetop = {required=1, short="top"},
			stonebottom = {required=1, short="bottom"},
			stonemiddle = {required=1, short="middle"},
			stoneside = {required=1, short="side"},
			stonecore = {required=1, short="core"},
			stoneemitter= {required=1, short="emitter"},
	},
	lily = {
			lilypetals = {required=1, short="petals"},
			lilystem = {required=1, short="stem"},
			lilystamen = {required=1, short="stamen"},
			lilybulb = {required=1, short="bulb"},
			lilypistil = {required=1, short="pistil"},
	},
	ozhera = {
			ozherabait = {required=1, short="bait"},
			ozheracollar = {required=1, short="collar"},
			ozheraegg = {required=1, short="egg"},
			ozheraclaw = {required=1, short="claw"},
			ozherabeak = {required=1, short="beak"},
			ozheranest = {required=1, short="nest"},
	},
	turtle = {
			turtleshell = {required=1, short="shell"},
			turtlebait = {required=1, short="bait"},
			turtlecollar = {required=1, short="collar"},
			turtletail = {required=1, short="tail"},
			turtlefoot= {required=1, short="foot"},
			turtletongue= {required=1, short="tongue"},
	},
	mongoose = {
			mongoosebait = {required=1, short="bait"},
			mongoosecollar = {required=1, short="collar"},
			mongoosetail = {required=1, short="tail"},
			mongoosepaw = {required=1, short="paw"},
			mongooseclaw = {required=1, short="claw"},
			mongoosefang = {required=1, short="fang"},
	},
	hellcat = {
			hellcatbait = {required=1, short="bait"},
			hellcatcollar = {required=1, short="collar"},
			hellcatclaw = {required=1, short="claw"},
			hellcatfang = {required=1, short="fang"},
			hellcattail = {required=1, short="tail"},
			hellcatpaw = {required=1, short="paw"},
	},
--Conclave
	tophat = {
			tophatlining = {required=1, short="lining"},
			tophatbrim= {required=1, short="brim"},
			tophatthread = {required=1, short="thread"},
			tophatband = {required=1, short="band"},
	},
	hourglass = {
			hourglasstop = {required=1, short="top"},
			hourglassbottom= {required=1, short="bottom"},
			hourglasssand = {required=1, short="sand"},
			hourglassbulb= {required=1, short="bulb"},
	},
	tempestbrooch = {
			broochgem= {required=1, short="gem"},
			broochclasp= {required=1, short="clasp"},
			broochmetal= {required=1, short="metal"},
			broochhook = {required=1, short="hook"},
	},
	elementsprite = {
			spritelegs= {required=1, short="legs"},
			spritearms= {required=1, short="arms"},
			spritetorso= {required=1, short="torso"},
			spritehead= {required=1, short="head"},
	},
	lesservault = {
			vaultdoor= {required=1, short="door"},
			vaulthinge= {required=1, short="hinge"},
			vaulthandle= {required=1, short="handle"},
			vaultgems= {required=1, short="gems"},
	},
	flyingring = {
			ringtop = {required=1, short="top"},
			ringbottom = {required=1, short="bottom"},
			ringinside = {required=1, short="inside"},
			ringoutside = {required=1, short="outside"},
	},
	celerity = {
			armbandtop = {required=1, short="top"},
			armbandbottom = {required=1, short="bottom"},
			armbandinside = {required=1, short="inside"},
			armbandoutside = {required=1, short="outside"},
	},
	buckawns = {
			amuletthread = {required=1, short="thread"},
			amuletchain = {required=1, short="chain"},
			amuletball = {required=1, short="ball"},
			amuletclasp = {required=1, short="clasp"},
	},
	adaptgrimoire = {
			grimoireleather = {required=1, short="leather"},
			grimoirepaper = {required=1, short="paper"},
			grimoiregems = {required=1, short="gems"},
			grimoirelock = {required=1, short="lock"},
	},
	stygianpendant = {
			pendantbase = {required=1, short="base"},
			pendantclasp = {required=1, short="clasp"},
			pendantpearl = {required=1, short="pearl"},
			pendanthook = {required=1, short="hook"},
	},
	grandmagi = {
			robesthread = {required=1, short="thread"},
			robesneedle = {required=1, short="needle"},
			robestrim = {required=1, short="trim"},
			robesfabric = {required=1, short="fabric"},
	},
	atavianwings = {
			wingsthread = {required=1, short="thread"},
			wingsleft = {required=1, short="left"},
			wingsright = {required=1, short="right"},
			wingsfeathers = {required=1, short="feathers"},
	},
--MARKS
	ivorywarhorn = {
			ivoryhornmouthpiece = {required=1, short="mouth"},
			ivoryhornfittings = {required=1, short="fittings"},
			ivoryhornleft = {required=1, short="left"},
			ivoryhornright = {required=1, short="right"},
	},
	ivorymedallion = {
			ivorymedalliondisc = {required=1, short="disc"},
			ivorymedallionclasp = {required=1, short="clasp"},
			ivorymedallionaccent = {required=1, short="accent"},
			ivorymedallionribbon = {required=1, short="ribbon"},
	},
	ivoryspyglass = {
			ivoryspyglasslens = {required=1, short="lens"},
			ivoryspyglasseyepiece = {required=1, short="eye"},
			ivoryspyglassbody = {required=1, short="body"},
			ivoryspyglassstrap = {required=1, short="strap"},
	},
	ivorypennon = {
			ivorypennonsilk = {required=1, short="silk"},
			ivorypennonribbon = {required=1, short="ribbon"},
			ivorypennonthread = {required=1, short="thread"},
			ivorypennondye = {required=1, short="dye"},
	},
	ivoryarmband = {
			ivoryarmbandaccent = {required=1, short="accent"},
			ivoryarmbandouter = {required=1, short="outer"},
			ivoryarmbandinner = {required=1, short="inside"},
			ivoryarmbandclasp = {required=1, short="clasp"},
	},
	ivoryatlantia = {
			ivoryatlantiabody = {required=1, short="body"},
			ivoryatlantialegs = {required=1, short="legs"},
			ivoryatlantiahead = {required=1, short="head"},
			ivoryatlantiaarms = {required=1, short="arms"},
	},
	ivorydummy = {
			ivorydummylimbs = {required=1, short="limbs"},
			ivorydummytorso = {required=1, short="torso"},
			ivorydummyclothing = {required=1, short="clothing"},
			ivorydummyarmour = {required=1, short="armour"},
	},
	ivorytower = {
			ivorytowerbase = {required=1, short="base"},
			ivorytowerlower = {required=1, short="lower"},
			ivorytowerupper = {required=1, short="upper"},
			ivorytowerlacquer = {required=1, short="laquer"},
	},
	ivorybowstring = {
			ivorybowstringcore = {required=1, short="core"},
			ivorybowstringwrapping = {required=1, short="wrap"},
			ivorybowstringeyelet = {required=1, short="eyelet"},
			ivorybowstringenchant = {required=1, short="enchant"},
	},
	quisalisdagger = {
			quisaisdaggerhilt = {required=1, short="hilt"},
			quisalisdaggerblade = {required=1, short="blade"},
			quisalisdaggerpommel = {required=1, short="pommel"},
			quisalisdaggergrip = {required=1, short="grip"},
	},
	quisalisbone = {
			quisalisbonelower = {required=1, short="lower"},
			quisalisboneupper = {required=1, short="upper"},
			quisalisbonerope = {required=1, short="rope"},
			quisalisbonestain = {required=1, short="stain"},
	},
	quisalismedallion = {
			quisalismedallionchain = {required=1, short="chain"},
			quisalismedalliontop = {required=1, short="top"},
			quisalismedallionbottom = {required=1, short="bottom"},
			quisalismedallionclasp = {required=1, short="clasp"},
	},
	quisalislookingglass = {
			quisalisglasscase = {required=1, short="case"},
			quisalisglasslens = {required=1, short="lens"},
			quisalisglassiris = {required=1, short="iris"},
			quisalisglasseyepiece = {required=1, short="eyepiece"},
	},
	quisalisderillin = {
			quisalisderillinhair = {required=1, short="hair"},
			quisalisderillinclothing = {required=1, short="clothing"},
			quisalisderillintorso = {required=1, short="torso"},
			quisalisderillinhead = {required=1, short="head"},
	},
	quisalisdummy = {
			quisalisdummylimbs = {required=1, short="limbs"},
			quisalisdummytorso = {required=1, short="torso"},
			quisalisdummyrobes = {required=1, short="robes"},
			quisalisdummytargets = {required=1, short="targets"},
	},
	quisalistombstone = {
			quisalistombstonetop = {required=1, short="top"},
			quisalistombstonemiddle = {required=1, short="middle"},
			quisalistombstonebase = {required=1, short="base"},
			quisalistombstonescript = {required=1, short="script"},
	},
	quisalisarmband = {
			quisalisarmbandserpent = {required=1, short="insignia"},
			quisalisarmbandeyes = {required=1, short="eyes"},
			quisalisarmbandtop = {required=1, short="top"},
			quisalisarmbandbottom = {required=1, short="bottom"},
	},
	quisalismask = {
			quisalismaskbone = {required=1, short="bone"},
			quisalismaskwire = {required=1, short="wire"},
			quisalismaskteeth = {required=1, short="teeth"},
			quisalismaskrunes = {required=1, short="runes"},
	},
	quisaliscloak = {
			quisaliscloakcloth = {required=1, short="cloth"},
			quisaliscloakembroidery = {required=1, short="embroid"},
			quisaliscloaklining = {required=1, short="lining"},
			quisaliscloakhood = {required=1, short="hood"},
	},
--Seafaring
	cloverbox = {
			cloverboxclovers = {required=1, short="clovers"},
			cloverboxlid = {required=1, short="lid"},
			cloverboxsides = {required=1, short="sides"},
			cloverboxbase = {required=1, short = "base"},
	},
	maelstrom = {
			maelstromarms = {required=1, short="arms"},
			maelstromlegs = {required=1, short="legs"},
			maelstromtorso = {required=1, short="torso"},
			maelstromhead = {required=1, short="head"},
	},
	islandwings = {
			islandwingsleft = {required=1, short="left"},
			islandwingsright = {required=1, short="right"},
			islandwingsthread = {required=1, short="thread"},
			islandwingsstraps = {required=1, short="straps"},
	},
	frostpail = {
			frostpailhandle = {required=1, short="handle"},
			frostpailleft = {required=1, short="left"},
			frostpailright = {required=1, short="right"},
			frostpailbase = {required=1, short="base"},
	},
	neatpail = {
			neatpailhandle = {required=1, short="handle"},
			neatpailleft = {required=1, short="left"},
			neatpailright = {required=1, short="right"},
			neatpailbase = {required=1, short="base"},
	},
	shipchit = {
			shipchittop = {required=1, short="top"},
			shipchitbottom = {required=1, short="bottom"},
			shipchitink = {required=1, short="ink"},
			shipchitseal = {required=1, short="seal"},
	},
	xpplaque = {
			xpplaquemount = {required=1, short="mount"},
			xpplaquefascia = {required=1, short="fascia"},
			xpplaquelacquer = {required=1, short="lacquer"},
			xpplaquelettering = {required=1, short="lettering"},
	},
	monstermap = {
			monstermapink = {required=1, short="ink"},
			monstermapparchment = {required=1, short="parchment"},
			monstermapcompass = {required=1, short="compass"},
			monstermapenchant = {required=1, short="enchant"},
	},
	crossbow = {
			crossbowmount = {required=1, short="mount"},
			crossbowarms = {required=1, short="arms"},
			crossbowstring = {required=1, short="string"},
			crossbowcrank = {required=1, short="crank"},
	},
	glassbottle = {
			glassbottleneck = {required=1, short="neck"},
			glassbottlemiddle = {required=1, short="middle"},
			glassbottlebase = {required=1, short="base"},
			glassbottleenchant = {required=1, short="enchant"},
	},
	seaweedpail = {
			seaweedpailhandle = {required=1, short="handle"},
			seaweedpailleft = {required=1, short="left"},
			seaweedpailright = {required=1, short="right"},
			seaweedpailbase = {required=1, short="base"},
	},
	smokeflare = {
			smokeflareshell = {required=1, short="shell"},
			smokeflarefins = {required=1, short="fins"},
			smokeflarelid = {required=1, short="lid"},
			smokeflarechamber = {required=1, short="chamber"},
	},
--Death
	mortalcoil = {
			coilbinding = {required=1, short="binding"},
			coilbottom = {required=1, short="bottom"},
			coilstrand = {required=1, short="strand"},
			coiltop = {required=1, short="top"},
	},
	vulturetalon = {
			talontip = {required=1, short="tip"},
			talonstem = {required=1, short="stem"},
			talonbase = {required=1, short="base"},
			talonpoison = {required=1, short="poison"},
	},
	deathcandle = {
			candlebase = {required=1, short="base"},
			candleflame = {required=1, short="flame"},
			candlestring = {required=1, short="string"},
			candlewax = {required=1, short="wax"},
	},
	deathdummy = {
			deathdummyarms = {required=1, short="arms"},
			deathdummyhead = {required=1, short="head"},
			deathdummytorso = {required=1, short="torso"},
			deathdummylegs = {required=1, short="legs"},
	},
	gravestone = {
			gravestonebottom = {required=1, short="bottom"},
			gravestoneinscription = {required=1, short="inscription"},
			gravestonelichen = {required=1, short="lichen"},
			gravestonetop = {required=1, short="top"},
	},
	crucible = {
			cruciblebase = {required=1, short="base"},
			cruciblebowl = {required=1, short="bowl"},
			crucibleflame = {required=1, short="flame"},
			cruciblehandle = {required=1, short="handle"},
	},
	deathscall = {
			deathscallcoil = {required=1, short="coil"},
			deathscallhorn = {required=1, short="horn"},
			deathscallmouth = {required=1, short="mouth"},
			deathscalltassels = {required=1, short="tassels"},
	},
	deathcape = {
			capebrocade = {required=1, short="brocade"},
			capeenchantment = {required=1, short="enchantment"},
			capethread = {required=1, short="thread"},
			capevelvet = {required=1, short="velvet"},
	},
--Blackwave
	taper = {
			tapertop = {required=1, short="top"}, 
			taperbottom = {required=1, short="bottom"},
			taperwax = {required=1, short="wax"},
			taperstring = {required=1, short="string"},
	},
	finalityring = {
			signetband = {required=1, short="band"},
			signetbezel = {required=1, short="bezel"},
			signetcarving = {required=1, short="carving"},
			signetmarks = {required=1, short="marks"},
	},
	grievouskeyring = {
			keyringlizard = {required=1, short="lizard"},
			keyringtiger = {required=1, short="tiger"},
			keyringslate = {required=1, short="slate"},
			keyringhoop = {required=1, short="hoop"},
	},
	goblin = {
			goblinlegs = {required=1, short="legs"},
			goblinarms = {required=1, short="arms"},
			goblinhead = {required=1, short="head"},
			goblintorso = {required=1, short="torso"},
	},
	blackspigot = {
			spigottop = {required=1, short="top"},
			spigotbottom = {required=1, short="bottom"},
			spigotstem = {required=1, short="stem"},
			spigottip = {required=1, short="tip"},
	},
	sunlesshope = {
			sunlessband = {required=1, short="band"},
			sunlessstone = {required=1, short="stone"},
			sunlessbinding = {required=1, short="binding"},
			sunlessenchantment = {required=1, short="enchant"},
	},
	blackcirclet = {
			circletfur = {required=1, short="fur"},
			circletblades = {required=1, short="blades"},
			circletband = {required=1, short="band"},
			circletbinding = {required=1, short="binding"},
	},
	jewel = {
			sanguinestone = {required=1, short="stone"},
			sanguineaura = {required=1, short="aura"},
			sanguineteardrop = {required=1, short="tear"},
			taintedblood = {required=1, short="blood"},
	},
	canopic = {
			canopiclid = {required=1, short="lid"},
			canopicfluid = {required=1, short="fluid"},
			canopicbase = {required=1, short="base"},
			canopicpot = {required=1, short="pot"},
	},
	apperceptionstone = {
			crystalshard = {required=1, short="shard"},
			crystalbinding = {required=1, short="binding"},
			crystalportal = {required=1, short="portal"},
			crystalbase = {required=1, short="base"},
	},
	guise = {
			guiseenchantment = {required=1, short="enchant"},
			guisethread = {required=1, short="thread"},
			guisesmile = {required=1, short="smile"},
			guiseleather = {required=1, short="leather"},
	},
	blackgrimoire = {
			grimoiregut = {required=1, short="gut"},
			grimoirescroll = {required=1, short="scroll"},
			grimoirecover = {required=1, short="cover"},
			grimoirebinding = {required=1, short="binding"},
	},
	["suremekh'neina"] = {
			mantleenchant = {required=1, short="enchant"},
			mantleclasp = {required=1, short="clasp"},
			mantlelining = {required=1, short="lining"},
			mantlefabric = {required=1, short="fabric"},
	},
--RACES
	lodestone = {
			lodestonetop = {required=1, short="top"},
			lodestonebase = {required=1, short="base"},
			lodestoneright = {required=1, short="right"},
			lodestoneleft = {required=1, short="left"},
	},
	arachnideye = {
			arachnidlens = {required=1, short="lens"},
			arachnideyeball = {required=1, short="eyeball"},
			arachnidenchantment = {required=1, short="enchant"},
			arachnidcolour = {required=1, short="colour"},
	},
	panpipes = {
			panpipepipes = {required=1, short="pipes"},
			panpipefeathers = {required=1, short="feathers"},
			panpipehair = {required=1, short="hair"},
			panpipeflutes = {required=1, short="flutes"},
	},
	chitin = {
			chitincolour = {required=1, short="colour"},
			chitinname = {required=1, short="name"},
			chitincarving = {required=1, short="carving"},
			chitinfragment = {required=1, short="fragment"},
	},
	rattle = {
			rattlebones = {required=1, short="bones"},
			rattleantlers = {required=1, short="antlers"},
			rattlerunes = {required=1, short="runes"},
			rattlestaff = {required=1, short="staff"},
	},
	whispercloth = {
			clothenchantment = {required=1, short="enchant"},
			clothbinding = {required=1, short="binding"},
			clothblood = {required=1, short="blood"},
			whispersilk = {required=1, short="silk"},
	},
	demolitionsphere = {
			sphereglass = {required=1, short="glass"},
			spherefire = {required=1, short="fire"},
			spherespark = {required=1, short="spark"},
			sphererunes = {required=1, short="runes"},
	},
	sirensong = {
			sirenglass = {required=1, short="glass"},
			sirenvoice = {required=1, short="voice"},
			sirencork = {required=1, short="cork"},
			sirensmoke = {required=1, short="smoke"},
	},
	catapult = {
			catapultframe = {required=1, short="frame"},
			catapultbolts = {required=1, short="bolts"},
			catapultwheel = {required=1, short="wheel"},
			catapultarm = {required=1, short="arm"},
	},
	dalamyrrclaws = {
			clawstraps = {required=1, short="straps"},
			clawbase = {required=1, short="base"},
			clawpoints = {required=1, short="points"},
			clawbarbs = {required=1, short="barbs"},
	},
	frogskin = {
			froghead = {required=1, short="head"},
			frogcord = {required=1, short="cord"},
			frogbody = {required=1, short="body"},
			frogfeet = {required=1, short="feet"},
	},
	mayafigurine = {
			figurinehead = {required=1, short="head"},
			figurinearms = {required=1, short="arms"},
			figurinetorso = {required=1, short="torso"},
			figurinelegs = {required=1, short="legs"},
	},
 -- Forays
  arankeshfeather = {
			arankeshfeatherspine = {required=4, short="spine"},
			arankeshfeatherdown = {required=4, short="down"},
			arankeshfeathercolour = {required=4, short="colouration"},
			arankeshfeatheredge = {required=4, short="edge"},
	},	
	icossemirror = {
			goldmirrorframe = {required=4, short="frame"},
			mirrorglass = {required=4, short="glass"},
			mirrorcurse = {required=4, short="curse"},
			mirrorinscription = {required=4, short="inscription"},
	},
	ogrebroth = {
			brothbowl = {required=4, short="bowl"},
			brothbroth = {required=4, short="broth"},
			brothseasoning = {required=4, short="seasons"},
			brothspice = {required=4, short="spice"},
	},
	boulder = {
			boulderchipping = {required=4, short="chipping"},
			bouldershell = {required=4, short="shell"},
			bouldercore = {required=4, short="core"},
			boulderstone = {required=4, short="stone"},
	},
	margamwheel = {
			margamwheelweeds = {required=2, short="weeds"},
			margamwheelbolts = {required=2, short="bolts"},
			margamwheelwood = {required=2, short="wood"},
			margamwheelcentre = {required=2, short="centre"},
	},
	foraymap = {
			mapfragmenttop = {required=8, short="top"},
			mapfragmentbottom = {required=8, short="bottom"},
			mapfragmentleft = {required=8, short="left"},
			mapfragmentright = {required=8, short="right"},
	},
--Cities
	musicbox = {
			musicboxsong = {required=2, short="song"},
			musicboxmechanism = {required=2, short="mechan"},
			musicboxframe = {required=2, short="frame"},
			musicboxcrank = {required=2, short="crank"},
	},
	biscuit = {
			biscuitbase = {required=1, short="base"},
			biscuitspecial = {required=2, short="spec"},
			biscuitsugar = {required=1, short="sugar"},
			biscuitsalt = {required=1, short="salt"},
	},
	wraithshackles = {
			wraithshacklesmoke = {required=1, short="smoke"},
			wraithshacklechain = {required=1, short="chain"},
			wraithshacklemanacles = {required=2, short="manac"},
			wraithshacklelock = {required=1, short="lock"},
	},
	tumbleweed = {
			tumbleweedroots = {required=1, short="roots"},
			tumbleweedtendrils = {required=1, short="tendril"},
			tumbleweedvines = {required=1, short="vines"},
			tumbleweedstem = {required=1, short="stem"},
	},
	alabasterurn = {
			alabasterurnlid = {required=1, short="lid"},
			alabasterurnpot = {required=1, short="pot"},
			alabasterurninscription = {required=1, short="inscr"},
			alabasterurnash = {required=1, short="ash"},
	},
	celescope = {
			celescopeglobe = {required=2, short="globe"},
			celescopecylinders = {required=2, short="cylin"},
			celescopeeyepiece = {required=2, short="eyep"},
			celescopeingraving = {required=2, short="ingra"},
	},
-- Monks
	monkdummy = {
			monkdummyhead = {required=1, short="head"},
			monkdummyarms = {required=1, short="arms"},
			monkdummytorso = {required=1, short="torso"},
			monkdummylegs = {required=1, short="legs"},
	},
	odysseantongue = {
			tongueflesh = {required=1, short="flesh"},
			tonguecasing = {required=1, short="casing"},
			tonguepolish = {required=1, short="polish"},
			tonguecurse = {required=1, short="curse"},
	},
	monkheadband = {
			monkheadbandthreads = {required=1, short="threads"},
			monkheadbandamethyst = {required=1, short="amethyst"},
			monkheadbandenchantment = {required=1, short="enchant"},
			monkheadbandsupport = {required=1, short="support"},
	},
	talonedring = {
			crimsonsteelband = {required=1, short="band"},
			quartzsetting = {required=1, short="setting"},
			ringsteelclaws = {required=1, short="claw"},
			talonedringbinding = {required=1, short="binding"},
	},
	cranepennon = {
			pennoncloth = {required=1, short="cloth"},
			pennoncranes = {required=1, short="cranes"},
			pennonstaff = {required=1, short="staff"},
			pennonthread = {required=1, short="thread"},
	},
	monkbanner = {
			monkbannerflag = {required=1, short="flag"},
			monkbannerembroidery = {required=1, short="embroidery"},
			monkbannerspear = {required=1, short="spear"},
			monkbannerthread = {required=1, short="thread"},
	},
	ashstaff = {
			ashstaffstave = {required=1, short="stave"},
			ashstaffstrapping = {required=1, short="strap"},
			ashstaffcap = {required=1, short="cap"},
			ashstaffshoe = {required=1, short="shoe"},
	},
	olivebranch = {
			olivewood = {required=1, short="wood"},
			olivebranchshoots = {required=1, short="shoots"},
			oliveleaves = {required=1, short="leaves"},
			olivebranchenchantment = {required=1, short="enchant"},
	},	
-- Elementals
	airelement = {
			airelementalcyclone = {required=1, short="cyclone"},
			airelementalessence = {required=1, short="essence"},
			airelementalbinding = {required=1, short="binding"},
			airelementallightning = {required=1, short="lightning"},
	},
	airbrooch = {
			airbroochclasp = {required=1, short="clasp"},
			airbroochgem = {required=1, short="gem"},
			airbroochsetting = {required=1, short="setting"},
			airbroochenchantment = {required=1, short="enchant"},
	},
	firependant = {
			firependantchain = {required=1, short="chain"},
			firependantflame = {required=1, short="flame"},
			firependantsetting = {required=1, short="setting"},
			firependantjewel = {required=1, short="jewel"},
	},
	jawbone = {
			jawboneteeth = {required=1, short="teeth"},
			jawbonemandibles = {required=1, short="mandibles"},
			jawbonebone = {required=1, short="bone"},
			jawbonehinge = {required=1, short="hinge"},
	},
	earthenshovel = {
			earthshovelwood = {required=1, short="wood"},
			earthshovelblade = {required=1, short="blade"},
			earthshovelbinding = {required=1, short="binding"},
			earthshovelminerals = {required=1, short="minerals"},
	},
	seatears = {
			seatearsphial = {required=1, short="phial"},
			seatearsstopper = {required=1, short="stopper"},
			seatearspaint = {required=1, short="paint"},
			seatearstears = {required=1, short="tears"},
	},
	garashshackle = {
			garashshacklelinks = {required=1, short="links"},
			garashshackleorbs = {required=1, short="orbs"},
			garashshackleenchantment = {required=1, short="enchant"},
			garashshacklechains = {required=1, short="chains"},
	},
	mudbomb = {
			mudbombbinding = {required=1, short="binding"},
			mudbombmud = {required=3, short="mud"},
	},
	searedglyph = {
			searedglyphplaque = {required=1, short="plaque"},
			searedglyphemblem = {required=1, short="emblem"},
			searedglyphtendrils = {required=1, short="tendrils"},
			searedglyphflame = {required=1, short="flame"},
	},
	firetank = {
			firetankframe = {required=1, short="frame"},
			firetankflame = {required=1, short="flame"},
			firetankinsignia = {required=1, short="insignia"},
			firetanklinks = {required=1, short="links"},
	},
	sceptre = {
			sceptrescript = {required=1, short="script"},
			sceptreenchantment = {required=1, short="enchant"},
			sceptreheart = {required=1, short="heart"},
			sceptretusk = {required=1, short="tusk"},
	},
	harness = {
			airharnessstraps = {required=1, short="straps"},
			airharnessglyphs = {required=1, short="glyphs"},
			airharnessenchantment = {required=1, short="enchant"},
			airharnessbuckles = {required=1, short="buckles"},
	},
--Yggdrasil
	dreadpilar = {
			dreadpilarbody = {required=1, short="body"},
			dreadpilarhead = {required=1, short="head"},
			dreadpilarlegs = {required=1, short="legs"},
			dreadpilarplates = {required=1, short="plates"},
	},
	squargon = {
			squargonbody = {required=1, short="body"},
			squargonfangs = {required=1, short="fangs"},
			squargonhead = {required=1, short="head"},
			squargonlegs = {required=1, short="legs"},
	},
	yggdrasiltablet = {
			tabletstylus = {required=1, short="stylus"},
			tablettwine = {required=1, short="twine"},
			tabletwax = {required=1, short="wax"},
			tabletwood = {required=1, short="wood"},
	},		 
	valdblom = {
			valdblomessence = {required=2, short="essence"},
			valdblomleaves = {required=2, short="leaves"},
			valdblomroot = {required=2, short="root"},
			valdblomstem = {required=2, short="stem"},
	},		 
	earthshapingtome = {
			shapingtomeclay = {required=1, short="clay"},
			shapingtomeplates = {required=1, short="plates"},
			shapingtomgranite = {required=1, short="granite"},
			shapingtominsignia = {required=1, short="insignia"},
	},		 
	nexuscube = {
			nexuscubeglass = {required=1, short="glass"},
			nexuscubegold = {required=1, short="gold"},
			nexuscubemote = {required=1, short="mote"},
			nexuscubescript = {required=1, short="script"},
	},		 
	firecrystal = {
			firecrystalenchantment = {required=1, short="enchantment"},
			firecrystalflame = {required=1, short="flame"},
			firecrystalspark = {required=1, short="spark"},
			firecrystalstone = {required=1, short="stone"},
	},		 
	planarmote = {
			moteaura = {required=1, short="aura"},
			motebinding = {required=1, short="binding"},
			moteenchantment = {required=1, short="enchantment"},
			moteflame = {required=1, short="flame"},
	},		 
	goldensnakeskin = {
			goldencolouring = {required=1, short="colouring"},
			goldenenchantment = {required=1, short="enchantment"},
			goldenscales = {required=1, short="scales"},
			goldenskin = {required=1, short="skin"},
	},		 
	yggdrasilbranch = {
			yggdrasilbranchhook = {required=1, short="hook"},
			yggdrasilbranchline = {required=1, short="line"},
			yggdrasilbranchmosaic = {required=1, short="mosiac"},
			yggdrasilbranchwood = {required=1, short="wood"},
	},		 
	criersbell = {
			crierschime = {required=1, short="chime"},
			crierscurse = {required=1, short="curse"},
			criershandle = {required=1, short="handle"},
			criersshell = {required=1, short="shell"},
	},		 
-- Contenders
	contenderspig = {
			pigclay = {required=1, short="clay"},
			pigears = {required=1, short="ears"},
			pigbelly = {required=1, short="belly"},
			pigtail = {required=1, short="tail"},
	},	
	contendersjug = {
			juglip = {required=1, short="lip"},
			jugbase = {required=1, short="base"},
			jugbowl = {required=1, short="bowl"},
			jughandle = {required=1, short="handle"},
	},
	contendersbouquet = {
			bouquetstring = {required=1, short="string"},
			bouquetknot = {required=1, short="knot"},
			bouquetbloom = {required=1, short="bloom"},
			bouquetstem = {required=1, short="stem"},
	},
	contendersfigurine = {
			contenderfigurinehead = {required=1, short="head"},
			contenderfigurinearms = {required=1, short="arms"},
			contenderfigurinelegs = {required=1, short="legs"},
			contenderfigurinebody = {required=1, short="body"},
	},
	contendersglass = {
			glasshandle = {required=1, short="handle"},
			glasspane = {required=1, short="pane"},
			glassfocus = {required=1, short="focus"},
			glassframe = {required=1, short="frame"},
	},
	contendersjournal = {
			journalbinding = {required=1, short="binding"},
			journalpage = {required=1, short="page"},
			journalcover = {required=1, short="cover"},
			journalindex = {required=1, short="index"},
	},
	contendersstud = {
			studgleam = {required=1, short="gleam"},
			studpost = {required=1, short="post"},
			studgem = {required=1, short="gem"},
			studback = {required=1, short="back"},
	},
	contendersribbon = {
			ribbongilding = {required=1, short="gilding"},
			ribbonpin = {required=1, short="pin"},
			ribbonstripe = {required=1, short="stripe"},
			ribbonfold = {required=1, short="fold"},
	},
-- Underworld
	cryptworm = {
			cryptwormhead = {required=1, short="head"},
			cryptwormbody = {required=1, short="body"},
			cryptwormfangs = {required=1, short="fangs"},
			cryptwormbinding = {required=1, short="binding"},
	},
	psychesplinter = {
			psychesplinterchain = {required=1, short="chain"},
			psychesplinterframe = {required=1, short="frame"},
			psychesplinterlength = {required=1, short="length"},
			psychesplintercurse = {required=1, short="curse"},
	},
	sanityskein = {
			sanityskeinthread = {required=1, short="thread"},
			sanityskeincoil = {required=1, short="coil"},
			sanityskeincurse = {required=1, short="curse"},
			sanityskeinbinding = {required=1, short="binding"},
	},
	custodytalisman = {
			custodyleft = {required=1, short="left"},
			custodyright = {required=1, short="right"},
			custodycentre = {required=1, short="centre"},
			custodybinding = {required=1, short="binding"},
	},
	unlifetotem = {
			unlifetotembase = {required=1, short="base"},
			unlifetotemwood = {required=1, short="wood"},
			unlifetotemskull = {required=1, short="skull"},
			unlifetotemtendrils = {required=1, short="tendrils"},
	},
	soulsliver = {
			soulsliverobsidian = {required=1, short="obsidian"},
			soulsliverfog = {required=1, short="fog"},
			soulsliversouls = {required=1, short="souls"},
			soulslivercurse = {required=1, short="curse"},
	},
	cullingblade = {
			cullingbladehilt = {required=1, short="hilt"},
			cullingbladeedge = {required=1, short="edge"},
			cullingblademetal = {required=1, short="metal"},
			cullingbladecurse = {required=1, short="curse"},
	},
	funeralshroud = {
			funeralshroudcloth = {required=1, short="cloth"},
			funeralshroudthread = {required=1, short="thread"},
			funeralshroudbenediction = {required=1, short="benedict"},
			funeralshroudclasp = {required=1, short="clasp"},
	},
--Renegades
	mercenarychalk = {
			mercenarychalkbinding = {required=1, short="binding"},
			mercenarychalkchalk = {required=1, short="chalk"},
			mercenarychalkdust = {required=1, short="dust"},
			mercenarychalkstick = {required=1, short="stick"},
	},
	elementalinjunction = {
			injunctionpaper = {required=1, short="paper"},
			injunctionscript = {required=1, short="script"},
			injunctionseal = {required=1, short="seal"},
			injunctionsignature = {required=1, short="signature"},
	},
	moppet = {
			moppetbuttons = {required=1, short="buttons"},
			moppetcloth = {required=1, short="cloth"},
			moppeteyes = {required=1, short="eyes"},
			moppetthread = {required=1, short="thread"},
	},
	turncoatscoat = {
			turncoatscoatbinding = {required=1, short="binding"},
			turncoatscoatbuttons = {required=1, short="buttons"},
			turncoatscoatcloth = {required=1, short="cloth"},
			turncoatscoatthread = {required=1, short="thread"},
	},
	shadowcloak = {
			shadowcloakclasp = {required=1, short="clasp"},
			shadowcloakcloth = {required=1, short="cloth"},
			shadowcloakcurse = {required=1, short="curse"},
			shadowcloakthread = {required=1, short="thread"},
	},
	betrayersmantle = {
			betrayersmantlecloth = {required=1, short="cloth"},
			betrayersmantlecurse = {required=1, short="curse"},
			betrayersmantlestraps = {required=1, short="straps"},
			betrayersmantlethread = {required=1, short="thread"},
	},
	turncoatsmasque = {
			turncoatsmasquecurse = {required=1, short="curse"},
			turncoatsmasqueetchings = {required=1, short="etchings"},
			turncoatsmasqueeyes = {required=1, short="eyes"},
			turncoatsmasquestone = {required=1, short="stone"},
	},
	sunderedpennon = {
			sunderedpennonbinding = {required=1, short="binding"},
			sunderedpennoncloth = {required=1, short="cloth"},
			sunderedpennonstaff = {required=1, short="staff"},
			sunderedpennonthread= {required=1, short="thread"},
	},
--Invasion
	darkearthfigrine = {
			darkeartharms = {required=1, short="arms"},
			darkearthhead = {required=1, short="head"},
			darkearthlegs = {required=1, short="legs"},
			darkearthtorso = {required=1, short="torso"},
	},
	batteringram = {
			batteringrambolts = {required=1, short="bolts"},
			batteringramgrips = {required=1, short="grips"},
			batteringramram = {required=1, short="ram"},
			batteringramwheels = {required=1, short="wheels"},
	},
	caltrop = {
			caltropball = {required=1, short="ball"},
			caltropbarbs = {required=1, short="barbs"},
			caltropbinding = {required=1, short="binding"},
			caltropspikes = {required=1, short="spikes"},
	},
	cauldron = {
			cauldronbase = {required=1, short="base"},
			cauldronhandle = {required=1, short="handle"},
			cauldronoil = {required=1, short="oil"},
			cauldronpot = {required=1, short="pot"},
	},
	shadowshackle = {
			shadowshackleenchantment = {required=1, short="enchantment"},
			shadowshacklelink = {required=1, short="link"},
			shadowshacklemetal = {required=1, short="metal"},
			shadowshackleshadow = {required=1, short="shadow"},
	},
	hagseye = {
			hagseyeball = {required=1, short="ball"},
			hagseyeenchantment = {required=1, short="enchantment"},
			hagseyefluid = {required=1, short="fluid"},
			hagseyelid= {required=1, short="lid"},
	},
	icebrick = {
			icebinding = {required=1, short="binding"},
			iceenchantment = {required=1, short="enchantment"},
			magicice = {required=1, short="magic"},
			repeatingspell = {required=1, short="spell"},
	},
	scoutingmap = {
			scoutingmapenchantment = {required=1, short="enchantment"},
			scoutingmapicons = {required=1, short="icons"},
			scoutingmapink = {required=1, short="ink"},
			scoutingmapvellum = {required=1, short="vellum"},
	},
-- War
	rottingremains = {
			remainsbones = {required=1, short="bones"},
			remainsflesh = {required=1, short="flesh"},
			remainsmuscles = {required=1, short="muscles"},
			remainsblood = {required=1, short="blood"},
	},
	gildedbit = {
			bitgilding = {required=1, short="gilding"},
			bitbar = {required=1, short="bar"},
			bitchain = {required=1, short="chain"},
			bitpatterns = {required=1, short="patterns"},
	},
	pigeon = {
			pigeonhead = {required=1, short="head"},
			pigeonbody = {required=1, short="body"},
			pigeonlegs = {required=1, short="legs"},
			pigeonwings = {required=1, short="wings"},
	},
	warcloud = {
			warcloudfog = {required=1, short="fog"},
			warcloudstench = {required=1, short="stench"},
			warcloudcurse = {required=1, short="curse"},
			warcloudbinding = {required=1, short="binding"},
	},
	portalhoop = {
			portalhoopsteel = {required=1, short="steel"},
			portalhooplight = {required=1, short="light"},
			portalhoopenchantment = {required=1, short="enchantment"},
			portalhoopbinding = {required=1, short="binding"},
	},
	observantsigil = {
			observantsigilmetal = {required=1, short="metal"},
			observantsigilstar = {required=1, short="star"},
			observantsigileye = {required=1, short="eye"},
			observantsigillatice = {required=1, short="latice"},
	},

  cowculator = {
    cowculatorwood = {required=1, short="wood"},
    cowculatornumbers = {required=1, short="numbers"},
    cowculatorpaint = {required=1, short="paint"},
    cowculatorspectacles = {required=1, short="spectacles"},
  },
  golemgateway = {
    gatewayemblem = {required=1, short="emblem"},
    gatewaygates = {required=1, short="gates"},
    gatewayframe = {required=1, short="frame"},
    gatewaybars = {required=1, short="bars"},
  },
  brainjar = {
    brainjarpot = {required=1, short="pot"},
    brainjarbrains = {required=1, short="brains"},
    brainjarpreserves = {required=1, short="preserves"},
    brainjarlabel = {required=1, short="label"},
  },
  hollowbook = {
    hollowbookcovers = {required=1, short="covers"},
    hollowbookeye = {required=1, short="eye"},
    hollowbookglyphs = {required=1, short="glyphs"},
    hollowbookscream = {required=1, short="scream"},
  },
  faemirror = {
    faemirrorglass = {required=1, short="glass"},
    faemirrorcrystal = {required=1, short="crystal"},
    faemirrorhandle = {required=1, short="handle"},
    faemirrorscript = {required=1, short="script"},
  },
  celestialcoronet = {
    coronetband = {required=1, short="band"},
    coronetangels = {required=1, short="angels"},
    coronetspheres = {required=1, short="spheres"},
    coronetengravings = {required=1, short="engravings"},
  },
  chaosclaw = {
    chaosclawedge = {required=1, short="edge"},
    chaosclawtip = {required=1, short="tip"},
    chaosclawcorruption = {required=1, short="corruption"},
    chaosclawspan = {required=1, short="span"},
  },
  iconstatuette = {
    statuetteglobe = {required=1, short="globe"},
    statuettesigils = {required=1, short="sigil"},
    statuetteshards = {required=1, short="shard"},
    statuetteicon = {required=1, short="icon"},
  },
  kris = {
    krisblade = {required=1, short="blade"},
    krishaft = {required=1, short="haft"},
    krisrunes = {required=1, short="runes"},
    krissteel = {required=1, short="steel"},
  },
  crystalsword = {
    crystalswordhilt = {required=1, short="hilt"},
    crystalswordguard = {required=1, short="guard"},
    crystalswordblade = {required=1, short="blade"},
    crystalswordgem = {required=1, short="gem"},
  },

	gaia = {
    cherryblossomstem = {required=1, short="stem"},
    cherryblossomflower = {required=1, short="flower"},
    cherryblossomstamen = {required=1, short="stamen"},
    cherryblossomscent = {required=1, short="scent"},
  },
	lorielan = {
    filtercrystal = {required=1, short="crystal"},
    filterbronze = {required=1, short="bronze"},
    filterfitting = {required=1, short="fitting"},
    filterpolish = {required=1, short="polish"},
  },
	vulnurana = {
    sachetcloth = {required=1, short="cloth"},
    sachetherbs = {required=1, short="herbs"},
    sachetstring = {required=1, short="string"},
    sachetscent = {required=1, short="scent"},
  }, 
	twilight = {
    houndcarvingeyes = {required=1, short="eyes"},
    houndcarvinglegs = {required=1, short="legs"},
    houndcarvingfangs = {required=1, short="fangs"},
    houndcarvingobsidian = {required=1, short="obsidian"},
  },
	phaestus = {
    finishinghammerhead = {required=1, short="head"},
    finishinghammerrunes = {required=1, short="runes"},
    finishinghammerhandle = {required=1, short="handle"},
    finishinghammergrip = {required=1, short="grip"},
  },
	scarlatti = {
    citolestrings = {required=1, short="strings"},
    citolebody = {required=1, short="body"},
    citolebase = {required=1, short="base"},
    citoletune = {required=1, short="tune"},
  },
	prospero = {
    batteredpanhandle = {required=1, short="handle"},
    batteredpandish = {required=1, short="dish"},
    batteredpangrip = {required=1, short="grip"},
    batteredpanspell = {required=1, short="spell"},
  },
	aegis = {
    declarationpaper = {required=1, short="paper"},
    declarationtext = {required=1, short="text"},
    declarationsignature = {required=1, short="signature"},
    declarationseal = {required=1, short="seal"},
  },
	vastar = {
    vastarwingfeathers = {required=1, short="feathers"},
    vastarwingstraps = {required=1, short="straps"},
    vastarwingspan = {required=1, short="span"},
    vastarwinglightning = {required=1, short="lightning"},
  },
}

talisman.createlookup()
</script><eventHandlerList /></Script><Script isActive="yes" isFolder="no"><name>Talisman</name><packageName /><script>

talisman = talisman or {}

talisman.settings = talisman.settings or {}
talisman.settings.color = "CadetBlue"

talisman.pieces = talisman.pieces or {}
--[[
Old structure
  greendragonheart = {
    ["1"] = 1,
    ["4"] = 1,
    ["2"] = 1
  }
New structure
  greendragonheart = {
    ["B"] = 3,
    ["Q"] = 1
  }
--]]


-- Unknown for when someone transfers one to us, so we can still count it, but dont need to know its total.
talisman.types = {promo="P", refine="R", quest="Q", bashing="B", unknown="U", total="T"}


talisman.help = function ()
	local name
	if gmcp then
		name = gmcp.Char.Status.name:upper()
	else
		name = "SERAGORN"
	end
	cecho("&lt;white&gt;USEAGE:\n")
	cecho("&lt;white&gt;TLIST - &lt;reset&gt;Displays a summary list of all known talisman pieces.\n")
	cecho("&lt;white&gt;TCOMPLETE &lt;talisman&gt;- &lt;reset&gt;Splits out the required pieces and completes the given talisman\n")
	cecho("&lt;reset&gt;      - Example: TCOMPLETE AZATLANKNIFE\n")
	cecho("&lt;white&gt;TTRADE &lt;adventurer&gt; &lt;piece&gt; [&lt;count&gt;]\n")
	cecho("&lt;reset&gt;      - Used to trade &lt;count&gt; (defaults to 1) pieces of &lt;piece&gt; to &lt;adventurer&gt;\n")
	cecho("&lt;reset&gt;      - Example: TTRADE "..name.." bluedragonscale 20\n")
	cecho("&lt;reset&gt;      - Note: aliases only work after talisman pieces has been checked the first time.\n")
	cecho("&lt;reset&gt;      - After this point it should keep an accurate list of pieces automatically.\n")
	cecho("&lt;white&gt;TTRADE SET &lt;adventurer&gt; &lt;setname&gt;\n")
	cecho("&lt;reset&gt;      - Used to trade all the pieces required to complete &lt;set&gt; to &lt;adventurer&gt;\n")
	cecho("&lt;reset&gt;      - Example: TTRADE SET DRAGON "..name.."\n")
	cecho("&lt;white&gt;TTRADE TALISMAN &lt;adventurer&gt; &lt;talismanname&gt;\n")
	cecho("&lt;reset&gt;      - Used to trade all the pieces required to complete a specific &lt;talisman&gt; to &lt;adventurer&gt;\n")
	cecho("&lt;reset&gt;      - Example: TTRADE TALISMAN TRANSOCEANIC "..name.."\n")
	cecho("\n&lt;white&gt;IMPORTANT: No validation is performed on trading complete sets/talismans.\n")
	cecho("&lt;white&gt;This means if you trade an incomplete set you will send some but not all of the pieces.\n")
end

talisman.echo = function (...)
	cecho(string.format("&lt;%s&gt;(Talisman): %s\n", talisman.settings.color, string.format(...)))
end

talisman.deleteLineP = function ()
  if gss then 
    gss.deleteLineP()
  elseif svo then
    svo.deleteLineP()
  end
end

talisman.reset = function ()
	talisman.pieces = {}
end

-- Function to standardize the names because of the 20 char limit.
talisman.getkey = function (longname)
	return talisman.names[longname]
end

-- Functions to translate level to count and visa versa
talisman.counttolevel = function (level)
	if (tonumber(level) or 0) &lt;= 0 then
		return 1
	else
		return (math.log(tonumber(level))/math.log(2))+1
	end
end

talisman.leveltocount = function (level)
	return math.pow(2, (tonumber(level) or 0)-1)
end

-- type checking for when we want to specifically send a type of talisman piece (promo, refined, etc)
talisman.ischecktype = function (type, typeflag)
	if not typeflag then 
		return true
	else
		return typeflag==type
	end	
end

-- Set activity checks (so we dont display a set in the list that we have nothing of)
talisman.setisactive = function (set)
	for i,_ in pairs(talisman.sets[set]) do
		if talisman.talismanisactive(i) then
			return true
		end
	end
	return false
end

talisman.talismanisactive = function (talismanname)
	for k,d in pairs(talisman.info[talismanname]) do
		if talisman.pieces[k] and (tonumber(talisman.pieces[k][talisman.types.total]) or 0)&gt;0 then
			return true
		end
	end
	return false
end




-- Functions to help manage and find our pieces
talisman.getcount = function (piecename, type)
	local count = 0
	local gettype = type or talisman.types.total
	if not talisman.pieces[piecename] then
		return 0
	end
	return talisman.pieces[piecename][gettype] or 0
end

talisman.autosplit = function (piecename, size)
	-- only split pieces &gt; level 1 obviously..
	if (tonumber(size) or 0)&lt;=1 then return end
	send(string.format("talisman split %s %s", piecename, size))
	if (tonumber(size) or 0)&gt;2 then
		-- recursively work our way down.. we just got 2 level (size-1) pieces.. split them
  	talisman.autosplit(piecename, (tonumber(size)-1))
  	talisman.autosplit(piecename, (tonumber(size)-1))
	end
end

-- Function to combine pieces required to get a specific level piece.
talisman.make = function (piecename, level)
	-- note this can fail currently because we cant control the talisman combine type so it cant combine promo with refined, etc.
	if (tonumber(level) or 0) &lt;= 1 then return true end
	if (tonumber(level) or 0) &gt; 2 then
		-- if we need a level 4 piece.. we need 2 level 3 pieces first..
		talisman.make(piecename, (tonumber(level)-1))
    talisman.make(piecename, (tonumber(level)-1))
	end
	-- to make a level 4 piece, we combine 2 level 3 pieces..
	send(string.format("talisman combine %s %s", piecename, tonumber(level)-1))
	return true
end

talisman.add = function (piecename, level, count, type)
	local name = talisman.lookup[piecename:cut(20)]
	local mytype = type or talisman.types.unknown
	if not name then 
		cecho("&lt;red&gt;***")
		return
	end

	if (tonumber(level) or 0) &gt; 1 then
		-- auto split things on the way in..
		for i=1, (tonumber(count) or 1) do
			talisman.autosplit(piecename, tonumber(level))
		end
	end

	talisman.pieces[name] = talisman.pieces[name] or {}
	talisman.pieces[name][mytype] = talisman.pieces[name][mytype] or 0
	talisman.pieces[name][talisman.types.total] = talisman.pieces[name][talisman.types.total] or 0
	
	talisman.pieces[name][mytype] = talisman.pieces[name][mytype] + talisman.leveltocount(level)*(tonumber(count) or 1)
	talisman.pieces[name][talisman.types.total] = talisman.pieces[name][talisman.types.total] + talisman.leveltocount(level)*(tonumber(count) or 1)
end

talisman.remove = function (piecename, level, count, type)
	if not talisman.pieces[piecename] then return end
	if not talisman.pieces[piecename][talisman.types.total] then 
		talisman.echo("Attempt to remove pieces we dont think we have for %s!", piecename)
		return -- we dont know if we have those pieces.. bail
	end
	-- calculate the true quantity we're removing..
	local count = tonumber(talisman.leveltocount((tonumber(level) or 1)) * (tonumber(count) or 1))

  if (tonumber(talisman.pieces[piecename][talisman.types.total]) or 0) &lt;= count then
		-- we dont think we have enough in total, so just remove them all
		talisman.pieces[piecename]={}
		talisman.pieces[piecename][talisman.types.total] = 0
	else
  	-- we think we have enough.. remove from total, if theres any question where they came from, add to unknown
		if table.size(talisman.pieces[piecename])&gt;2 then
			-- we always have a T and P or R item, if we have a T, P AND R (or Q) then it indicates some confusion or doubt..
			local newtotal = talisman.pieces[piecename][talisman.types.total]-count
			talisman.pieces[piecename] = {}
			talisman.pieces[piecename][talisman.types.total] = newtotal
			talisman.pieces[piecename][talisman.types.unknown] = newtotal
		else
			for i,v in pairs(talisman.pieces[piecename]) do
				talisman.pieces[piecename][i] = tonumber(v)-count
			end
		end
	end
end





-- Logic to complete talismans.
talisman.complete = function (talismanname)
	if not talisman.cancomplete(talismanname) then
		talisman.echo(string.format("Cannot complete talisman %s, pieces missing.", talismanname))
		return
	end

	for k,d in pairs(talisman.info[talismanname]) do
		local required = (math.log(d.required)/math.log(2))+1
		if math.floor(required)==required then
  			if talisman.make(k, required) then
	  			talisman.echo(string.format("Error: Could not make level %d of %s, please check talisman pieces to correct stored data.", (tonumber(required) or -1), k))
  			return
  		end
			talisman.remove(k, required, 1)
		else
			-- if required is 3, we cant combine this, so use 3 singles (mudbomb for example)..
			talisman.remove(k, 1, d.required)
		end
	end
	send(string.format("Talisman complete %s", talismanname))
end

talisman.cancomplete = function (talismanname)
	if not talisman.info[talismanname] then
		talisman.echo(string.format("Invalid talisman %s", talismanname))
		return false
	end

	for k,d in pairs(talisman.info[talismanname]) do
		if talisman.getcount(k) &lt; d.required then
			-- dont have required pieces!
			return false
		end
	end
	return true
end





-- Logic for trading talismans
talisman.tradeset = function (who, set, promo)
	if not talisman.sets[set] then
		talisman.echo(string.format("Invalid talisman set %s", set))
		return
	end
	for i,_ in pairs(talisman.sets[set]) do
		talisman.tradetalisman(who, i, promo)
	end
end

talisman.tradetalisman = function (who, talismanname, promo)
	if not talisman.info[talismanname] then
		talisman.echo(string.format("Invalid talisman %s", talismanname))
		return
	end

	for k,d in pairs(talisman.info[talismanname]) do
		if promo then
			talisman.trade(who, k, d.required)
		else
			talisman.trade(who, k, d.required)
		end
	end
end

talisman.typetolong = function (typecode)
	if typecode == talisman.types.promo then
		return "promo"
	elseif typecode == talisman.types.refine then
		return "refine"
	elseif typecode == talisman.types.quest then
		return "quest"
	else
		return ""
	end
end

talisman.trade = function (who, piecename, quantity, type)
	local count = talisman.getcount(piecename)
	if count&lt;quantity then
		talisman.echo(string.format("Only %d available of %s ", count, piecename))
		return
	end
	if count&gt;256 then
		talisman.echo("Trade alias can only handle quantities up to 256, sorry!")
		return
	end
	local required = {}
	local remaining = quantity
	local index = 9
	while index&gt;0 and remaining&gt;0 do
		if remaining&gt;=(2^(index-1)) then
			required[tostring(index)]=true
			remaining=remaining-(2^(index-1))
		end
		index=index-1
	end
	for i,v in pairs(required) do
		if not talisman.make(piecename, tonumber(i)) then
			talisman.echo(string.format("Error: Could not make level %d of %s", tonumber(i), piecename))
			return
		else
			if not price then
				send(string.format("Talisman trade piece %s %d %s to %s for nothing", piecename, tonumber(i), talisman.typetolong(type), who))
			else
				send(string.format("Talisman trade piece %s %d %s to %s for %d", piecename, tonumber(i), talisman.typetolong(type), who))
			end
			talisman.remove(piecename, tonumber(i), 1)
		end
	end
end






-- Display and formatting functions

-- Highlighters to announce our counts when we get new pieces..
talisman.announce = function (piecename, size, type)
	local count = talisman.getcount(piecename, type)
	if size &gt;= 0 then
		count = count + 2^(math.abs(tonumber(size))-1)
	else
		count = count - 2^(math.abs(tonumber(size))-1)
	end
	cecho(string.format("&lt;%s&gt; (Count: %d)", talisman.settings.color, count))
end

talisman.rightpad = function (data, length)
	return string.cut(string.format("%s%s", (data or "?"), string.rep(" ", length)), length)
end

talisman.highlight = function ()
	selectCurrentLine()
	fg("gold")
	resetFormat()
end

talisman.summary = function (setname)
	local talismangrandtotal = 0
	if setname then
		if not talisman.setisactive(setname) then
			talisman.echo(string.format("Set Inactive %s", setname))
			return 
		end
		talisman.displayset(setname)
		return
	end
	for i,v in ipairs(talisman.setorder) do
		talisman.settotal = 0
		talisman.setspare = 0
		talisman.setrequired = 0
		if talisman.setisactive(v) then
			talisman.displayset(v)
			talismangrandtotal = talismangrandtotal + talisman.setcredittotal
		end
	end
	cecho(string.format("&lt;white&gt;Total Value: &lt;red&gt;%d (%d)&lt;white&gt;\n\n", talismangrandtotal,((talismangrandtotal or 0) + (tonumber(gmcp.Char.Status.boundcredits) or 0) + (tonumber(gmcp.Char.Status.unboundcredits) or 0))))
end

talisman.displayset = function (set)
	if not talisman.sets[set] then
		talisman.echo(string.format("Invalid talisman set for output %s", set))
		return
	end

	talisman.settotal = 0
	cechoLink(string.format("&lt;white&gt;%s Set&lt;reset&gt;\n", set:title()), [[printCmdLine("ttrade set ]]..(target or "&lt;person&gt;").." "..set..[[")]], "Click to trade complete set", true)
	cecho(string.format("&lt;white&gt;%s&lt;reset&gt;\n", string.rep("-", string.len(set)+4)))

	talisman.setcredittotal = 0	
	if talisman.setformat[set] and talisman.setformat[set].order then
	-- echo the header..
		for _,v in ipairs(talisman.setformat[set].order) do
			if talisman.talismanisactive(v) then
				talisman.displaysetdetail(set, v, talisman.sets[set][v])
			end
		end
	else
		for i,v in pairs(talisman.sets[set]) do
			if talisman.talismanisactive(i) then
				talisman.displaysetdetail(set, i, v)
			end
		end
	end
	if talisman.setrequired &gt; 0 then
		cecho(string.format("&lt;white&gt;Total: %d of %d common (%d%% plus %d spare) &lt;red&gt;(%s)&lt;white&gt;\n\n", talisman.settotal, talisman.setrequired, math.floor(talisman.settotal*100/talisman.setrequired), talisman.setspare, (talisman.setcredittotal or 0)))
	end
end

talisman.displaysetdetail = function (set, talismanname, talismandata)

	local talismanfull, talismancount
	talisman.talismantotal = 0
	talisman.talismanspare = 0
	talisman.talismanrequired = 0
	cechoLink(string.format("&lt;%s&gt;%s", ((talismandata and talismandata.color) or talisman.settings.color), talisman.rightpad(talismandata.short, talisman.setformat[set].titlewidth)), [[printCmdLine("ttrade talisman ]]..(target or "&lt;person&gt;").." "..talismanname..[[")]], "Click to trade complete talisman", true)
	talismanfull, talismancount = talisman.displaytalisman(talismanname, set, talismandata.order)
	talisman.settotal = talisman.settotal + talisman.talismantotal
	talisman.setspare = talisman.setspare + talisman.talismanspare
	talisman.setrequired = talisman.setrequired + talisman.talismanrequired
	if talisman.talismanrequired-talisman.talismantotal&gt;0 then
		cecho(string.format("&lt;CadetBlue&gt;(%d%%)&lt;reset&gt;", math.floor(talisman.talismantotal*100/talisman.talismanrequired)))
	else
		cecho("&lt;green&gt;(100%)&lt;reset&gt;")
	end
	if talisman.setformat[set].value then
		talisman.credittotal = (talismanfull*talismandata.tradein) + ((talismancount - (talismanfull*4)) * talismandata.redeem)
		talisman.setcredittotal = (talisman.setcredittotal or 0) + (talisman.credittotal or 0)
		cecho(string.format("&lt;red&gt; %s %s %s &lt;white&gt;(%s %s)", talismanfull, talismancount, talisman.credittotal, (talismandata.tradein or 0), (talismandata.redeem or 0)))
	end
	cecho("\n")
end

talisman.displaytalisman = function (talismanname, set, order)
	local temp = 0
	local min = 99
	local count = 0

	if not talisman.info[talismanname] then
		talisman.echo(string.format("Invalid talisman for output %s", talismanname))
		return
	end
	if not order then
		-- unsorted..
		for k,d in pairs(talisman.info[talismanname]) do
			temp = talisman.displayitem(k, d, set)
			if temp &lt; min then
				min = temp
			end
			count = count + temp
		end
	else
		for _,d in ipairs(order) do
			temp = talisman.displayitem(d, talisman.info[talismanname][d], set)
			if temp &lt; min then
				min = temp
			end
			count = count + temp
		end
	end
	return min, count
end

talisman.getdisplaycolor = function (name, count, required)
	if not talisman.pieces[name] then
		return "CadetBlue"
	elseif count &gt;= required then
		if (tonumber(talisman.pieces[name][talisman.types.unknown]) or 0)&gt;0 then
			return "orange_red"
		elseif (tonumber(talisman.pieces[name][talisman.types.refine]) or 0)&gt;0 and (tonumber(talisman.pieces[name][talisman.types.promo]) or 0)&gt;0 then
			return "yellow"
		elseif (tonumber(talisman.pieces[name][talisman.types.refine]) or 0)&gt;0 then
			return "GreenYellow"
		else
			return "green"		
		end
	else
		if (tonumber(talisman.pieces[name][talisman.types.unknown]) or 0)&gt;0 then
			return "red"
		elseif (tonumber(talisman.pieces[name][talisman.types.refine]) or 0)&gt;0 then
			return "medium_orchid"
		else
			return "CadetBlue"
		end
	end		
end

talisman.displayitem = function (name, data, set)
	local count = talisman.getcount(name)
	local color = talisman.getdisplaycolor(name, count, data.required)
	if count&gt;=data.required then
		cechoLink(string.format("&lt;%s&gt;%s", color, talisman.rightpad(string.format("%s(%d)", string.cut(data.short,talisman.setformat[set].cellwidth), count), talisman.setformat[set].cellwidth+5)), [[printCmdLine("ttrade ]]..(target or "&lt;person&gt;").." "..name..[[")]], "Click to trade", true)
		talisman.talismantotal = talisman.talismantotal + data.required -- (dont include spares in our total required)
		talisman.talismanspare = talisman.talismanspare + count - data.required
	else
		cechoLink(string.format("&lt;%s&gt;%s", color, talisman.rightpad(string.format("%s(%d)", string.cut(data.short,talisman.setformat[set].cellwidth), count), talisman.setformat[set].cellwidth+5)), [[printCmdLine("ttrade ]]..(target or "&lt;person&gt;").." "..name..[[")]], "Click to trade", true)
		talisman.talismantotal = talisman.talismantotal + count -- (dont include spares in our total required)
	end
	talisman.talismanrequired = talisman.talismanrequired + data.required
	return math.floor(count/data.required)
end


-- This just helps us deal with the fact that some pieces have a string thats to long (20 char limit on the talisman piece list)..
talisman.createlookup = function ()
	talisman.lookup ={}
	for i,v in pairs(talisman.sets) do
		for k,d in pairs(v) do
			for a,b in ipairs(d.order) do
				talisman.lookup[b:cut(20)] = b
			end
		end
	end
end

talisman.createlookup()

</script><eventHandlerList /></Script></ScriptGroup></ScriptGroup><ScriptGroup isActive="yes" isFolder="yes"><name>cdb 1.1</name><packageName>cdb 1.1</packageName><script /><eventHandlerList /><ScriptGroup isActive="yes" isFolder="yes"><name>cdb (scripts)</name><packageName>cdb</packageName><script /><eventHandlerList /><Script isActive="yes" isFolder="no"><name>cdb CONFIG</name><packageName /><script>-- IN-GAME COMMAND SEPARATOR
cdb.cs = "|"

cdb.politics = {
  targossas = {
    enemy = false,
  },
  mhaldor = {
    enemy = false,
  },
  eleusis = {
    enemy = false,
  },
  cyrene = {
    enemy = false,
  },
  hashan = {
    enemy = false,
  },
  ashtan = {
    enemy = false,
  },
  ["(none)"] = {
    enemy = false,
  },
  divine = {
    enemy = false,
    -- For those who like to live dangerously.
  },
}

cdb.styles = {
  targossas = {
    color = "gold",
    underline = false,
    italics = false,
    bold = false,
  },
  mhaldor = {
    color = "blood",
    underline = false,
    italics = false,
    bold = false,
  },
  eleusis = {
    color = "OliveDrab",
    underline = false,
    italics = false,
    bold = false,
  },
  cyrene = {
    color = "jet",
    underline = false,
    italics = false,
    bold = false,
  },
  hashan = {
    color = "sienna",
    underline = false,
    italics = false,
    bold = false,
  },
  ashtan = {
    color = "purple",
    underline = false,
    italics = false,
    bold = false,
  },
  ["(none)"] = { -- Rogues
    color = "salmon",
    underline = false,
    italics = false,
    bold = false,
  },
  enemies = { -- City enemies
    color = "",
    underline = false,
    italics = true,
    bold = false,
  },
  divine = {
    color = "pink",
    underline = false,
    italics = false,
    bold = true,
  },
  ["(hidden)"] = {
    color = "yellow",
    underline = true,
    italics = false,
    bold = false,
  },
}

color_table.jet = { 48, 48, 48 }
color_table.charcoal = { 63, 63, 63 }
color_table.night = { 69, 69, 69 }
color_table.obs = { 100, 100, 100 }
color_table.moon = { 150, 150, 150 }
color_table.smoke = { 237, 237, 237 }
color_table.blood = { 221, 37, 37 }
color_table.badblood = { 107, 16, 16 }
</script><eventHandlerList /></Script><Script isActive="yes" isFolder="no"><name>cdb functions</name><packageName /><script>cdb = cdb or {}
cdb.db = cdb.db or {}
cdb.honors = {}
cdb.lights = cdb.lights or {}
cdb.enemies = cdb.enemies or {}

-- 
--  CDB - A lightweight, easy to use character database. By Romaen.
-- 
--  If you encounter problems, send me an OOC message in game or ping me on discord, theo#7545
--

function cdb.echo(str)
  cecho("&lt;DimGrey&gt;(&lt;grey&gt;cdb&lt;DimGrey&gt;): &lt;white&gt;" .. str .. "\n")
end

function cdb.warn(str)
  cecho("&lt;chocolate&gt;(cdb &lt;orange&gt;warning&lt;chocolate&gt;): &lt;white&gt;" .. str .. "\n")
end

function cdb.error(str)
  cecho("&lt;firebrick&gt;(cdb &lt;red&gt;error&lt;firebrick&gt;): &lt;white&gt;" .. str .. "\n")
end

function cdb.lookup(name)
  name = name:lower():title()
  downloadFile(getMudletHomeDir() .. "/temp.json", "https:\/\/api.achaea.com\/characters\/" .. name:lower() .. ".json")
end

function cdb.onConnect()
  cdb.echo("Initialised.")
  cdb.highlights()
end

registerAnonymousEventHandler("sysConnectionEvent", "cdb.onConnect")

function cdb.getwho()
  downloadFile(getMudletHomeDir() .. "/who.json", "http:\/\/api.achaea.com\/characters.json")
end

function cdb.gotinfo(ev, ar)
  if ev ~= "sysDownloadDone" then return end
  if ar:match("temp%.json") then
    local f, s = io.open(getMudletHomeDir() .. "/temp.json")
    if f then 
      s = f:read("*l"):trim()
      io.close(f)
    else
      cdb.error("Retrieving data failed.")
    end
    local t = yajl.to_value(s)
    if cdb.db[t.name] and cdb.db[t.name] ~= "(hidden)" and t.city == "(hidden)" then
      t.city = cdb.db[t.name].city
    end
    cdb.db[t.name] = t
    if cdb.last and t.name == cdb.last then
      cdb.echo("&lt;green&gt;Finished &lt;white&gt;getting information for all online players.")
      cdb.last = nil
      cdb.save()
      cdb.anons()
    elseif cdb.classing then
      cdb.echo(t.name .. "'s current class is &lt;cyan&gt;" .. t.class .. ".")
      cdb.classing = nil
      cdb.save()
    elseif cdb.looking then
      cdb.echo("Data retrieved.")
      cdb.save()
      cdb.looking = nil
    elseif not cdb.last then
      cdb.save()
    end
    cdb.addhighlight(t.name)
  elseif ar:match("who%.json") then
    local f, s = io.open(getMudletHomeDir() .. "/who.json")
    if f then 
      s = f:read("*l"):trim()
      io.close(f)
    end
    local t = yajl.to_value(s)
    for _, v in pairs(t.characters) do
      if cdb.gettingmembers then
        if cdb.db[v.name] and cdb.db[v.name].class == cdb.gettingmembers then
          cdb.members[#cdb.members+1] = v.name
        end
      else
        cdb.lookup(v.name)
        cdb.last = v.name
      end
    end
    if cdb.gettingmembers then
      local t = ""
      if #cdb.members == 0 then t = "&lt;DarkSlateGrey&gt;(none)" else t = table.concat(cdb.members, ", ") end
      cdb.echo("Online members of &lt;yellow&gt;"..cdb.gettingmembers.."&lt;white&gt; class:\n  &lt;cyan&gt;" .. t .. ".")
      cdb.gettingmembers = nil
      cdb.members = {}
    end
  end
end
registerAnonymousEventHandler("sysDownloadDone", "cdb.gotinfo")

function cdb.getmembers(class)
  cdb.gettingmembers = class
  cdb.members = {}
  cdb.getwho()
end


function cdb.display(name, prompt)
  name = name:lower():title()
  if cdb.db[name] then
    local t = cdb.db[name]
    local x = #t.fullname
    local f = ""
    if x &lt; 50 then x, f = 50, string.rep(" ", 50 - x) end
    cecho("&lt;smoke&gt;&#9581;" .. string.rep("&#9472;", x + 16) .. "&#9582;\n")
    cecho("&lt;smoke&gt;&#9474;  &#9556;&#9552;&#9552;&#9552;&#9552;&#9552;&#9559;    " .. string.rep(" ", x) .. "   &#9474;\n")
    cecho("&lt;smoke&gt;&#9474;  &#9553; &lt;obs&gt;CDB &lt;smoke&gt;&#9553;  &lt;yellow&gt;\"" .. t.fullname .. ".\"  " .. f .. "&lt;smoke&gt;&#9474;\n")
    cecho("&lt;smoke&gt;&#9474;  &#9562;&#9552;&#9552;&#9574;&#9552;&#9552;&#9565;    " .. string.rep(" ", x) .. "   &#9474;\n")
    cecho("&lt;smoke&gt;&#9566;&#9552;&#9552;&#9552;&#9552;&#9552;&#9577;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;&#9552;" .. string.rep("&#9552;", x) .. "&#9552;&#9552;&#9552;&#9569;\n")
    if cdb.db[name].level == "" then
      cecho("&lt;smoke&gt;&#9474;" .. string.rep(" ", x + 16) .. "&#9474;\n")
      cecho("&lt;smoke&gt;&#9474;            &lt;cyan&gt;Divine." .. string.rep(" ", x-3) .. "&lt;smoke&gt;&#9474;\n")
      cecho("&lt;smoke&gt;&#9474;" .. string.rep(" ", x + 16) .. "&#9474;\n")
      cecho("&lt;smoke&gt;&#9584;" .. string.rep("&#9472;", x + 16) .. "&#9583;\n")
    else
      cecho("&lt;smoke&gt;&#9474;          &lt;obs&gt;city: &lt;white&gt;" .. t.city:title() .. string.rep(" ", x - #t.city) .. "&lt;smoke&gt;&#9474;\n")
      cecho("&lt;smoke&gt;&#9474;         &lt;obs&gt;house: &lt;white&gt;" .. t.house:title() .. string.rep(" ", x - #t.house) .. "&lt;smoke&gt;&#9474;\n")
      cecho("&lt;smoke&gt;&#9474;         &lt;obs&gt;class: &lt;white&gt;" .. t.class:title() .. string.rep(" ", x - #t.class) .. "&lt;smoke&gt;&#9474;\n")
      cecho("&lt;smoke&gt;&#9474;         &lt;obs&gt;level: &lt;white&gt;" .. t.level .. string.rep(" ", x - #t.level) .. "&lt;smoke&gt;&#9474;\n")
      cecho("&lt;smoke&gt;&#9474;           &lt;obs&gt;pks: &lt;white&gt;" .. t.player_kills .. string.rep(" ", x - #t.player_kills) .. "&lt;smoke&gt;&#9474;\n")
      cecho("&lt;smoke&gt;&#9474;          &lt;obs&gt;mobs: &lt;white&gt;" .. t.mob_kills .. string.rep(" ", x - #t.mob_kills) .. "&lt;smoke&gt;&#9474;\n")
      cecho("&lt;smoke&gt;&#9584;" .. string.rep("&#9472;", x + 16) .. "&#9583;\n")
    end
    cdb.save()
  else
    cdb.warn("Please get that character's information first. &lt;obs&gt;(cdb " .. name .. ")")
  end
end

function cdb.anons()
  cdb.echo("Players who you'll need to manually honours:")
  local g = true
  for k, v in pairs(cdb.db) do
    if v.city == "(hidden)" then
      cecho("  + &lt;yellow&gt;" .. v.name .. "\n")
      g = false
    end
  end
  if g then cecho("  &lt;obs&gt;(none)\n") end
end

function cdb.classcheck(name)
  name = name:lower():title()
  cdb.classing = name 
  cdb.lookup(name)
end

function cdb.honorsupdate()
  if not (cdb.honors.title and cdb.honors.city) then return end
  for k, v in pairs(cdb.db) do
    if v.fullname == cdb.honors.title then
      cdb.db[v.name].city = cdb.honors.city
      cdb.addhighlight(v.name)
    end
  end
  cdb.honors = {}
end

function cdb.hl(name)
  local city = cdb.db[name].city
  if not city then return end
  if city == "" then city = "divine" end
  local line = getCurrentLine()
  local i = 1
  while i &gt; 0 do
    local p = selectString(name, i)
    if p &gt; -1 then
      local x = line:sub(p + #name + 1, p + #name + 1) or "!"
      if x == "" or x:match("%A") then
        if cdb.enemies[name] and cdb.styles.enemies.color ~= "" then
          fg(cdb.styles.enemies.color)
        elseif cdb.styles[city] and cdb.styles[city].color ~= "" then 
          fg(cdb.styles[city].color)
        end
        if cdb.styles[city].underline or (cdb.enemies[name] and cdb.styles.enemies.underline) then setUnderline(true) end
        if cdb.styles[city].italics or (cdb.enemies[name] and cdb.styles.enemies.italics) then setItalics(true) end
        if cdb.styles[city].bold or (cdb.enemies[name] and cdb.styles.enemies.bold) then setBold(true) end
        resetFormat()
      end
      deselect()
      i = i + 1
    else
      deselect()
      i = 0
    end
  end
end

function cdb.highlights()
  for k, v in pairs(cdb.db) do
    if not cdb.lights[v.name] then
      cdb.lights[v.name] = tempTrigger(v.name, [[cdb.hl("]] .. v.name .. [[")]])
    end
  end
end

function cdb.addhighlight(name)
  name = name:lower():title()
  if not cdb.lights[name] then
    cdb.lights[name] = tempTrigger(name, [[cdb.hl("]] .. name .. [[")]])
  end
end

function cdb.save()
  local sep = (getMudletHomeDir():sub(3, 3) == "/" and "/") or "\\"
  table.save(getMudletHomeDir() .. sep .. "cdb.lua", cdb.db)
  table.save(getMudletHomeDir() .. sep .. "enemies.lua", cdb.enemies)
end

function cdb.load()
  local sep = (getMudletHomeDir():sub(3, 3) == "/" and "/") or "\\"
  if io.exists(getMudletHomeDir() .. sep .. "cdb.lua") then
    table.load(getMudletHomeDir() .. sep .. "cdb.lua", cdb.db)
  else
    table.save(getMudletHomeDir() .. sep .. "cdb.lua", cdb.db)
  end
  
  if io.exists(getMudletHomeDir() .. sep .. "enemies.lua") then
    table.load(getMudletHomeDir() .. sep .. "enemies.lua", cdb.enemies)
  else
    table.save(getMudletHomeDir() .. sep .. "enemies.lua", cdb.enemies)
  end
end

cdb.load()
</script><eventHandlerList /></Script></ScriptGroup></ScriptGroup><ScriptGroup isActive="yes" isFolder="yes"><name>Chat</name><packageName>Chat</packageName><script /><eventHandlerList /><ScriptGroup isActive="yes" isFolder="yes"><name>tabbed chat1</name><packageName>tabbed chat1</packageName><script /><eventHandlerList /><ScriptGroup isActive="yes" isFolder="yes"><name>Tabbed Chat</name><packageName /><script>--Do not remove the following lines. Or change them.
demonnic = demonnic or {}
demonnic.chat = demonnic.chat or {}
demonnic.chat.tabsToBlink = demonnic.chat.tabsToBlink or {}
demonnic.chat.config = demonnic.chat.config or {}
demonnic.chat.tabs = demonnic.chat.tabs or {}
demonnic.chat.windows = demonnic.chat.windows or {}
demonnic.chat.config.activeColors = demonnic.chat.config.activeColors or {}
demonnic.chat.config.inactiveColors = demonnic.chat.config.inactiveColors or {}</script><eventHandlerList /><Script isActive="yes" isFolder="no"><name>functionality</name><packageName /><script>function nocase (s)
	s = string.gsub(s, "%a", function (c)
	return string.format("[%s%s]", string.lower(c),
                                  string.upper(c))
          end)
	return s
end


pickUpList = {"corpse", "sovereigns", "bound spyglass", "driftwood", "tinted glass bottle", " shard"}
function pickUp()
	for _, v in pairs(pickUpList) do	
		for _, j in pairs(itemlist) do
			if string.find(j.name, v) then
					svo.doaddfree("get " ..j.id)
			end
		end
	end
end

function ndbgetrgb(person) --returns rgb colour tag for decho
	person=person:title()
	local color=ndb.getcolorp(person)
	if not color then return("") else
		local rgb=string.format("%d,%d,%d",getRGB(color))
		return("&lt;"..rgb.."&gt;")
	end
end

function recolourChat(line)
	local str=line
	selectString(str,1)
	local rgb=string.format("%d,%d,%d",getFgColor())
	local rgb="&lt;"..rgb.."&gt;"
	deselect()
	fixedstring=string.gsub(str, "(%w+)", function(w) if ndb.isperson(w) then return ndbgetrgb(w)..w..rgb else return w end end)
	retrun(fixedstring)
end
</script><eventHandlerList /></Script><Script isActive="yes" isFolder="no"><name>demonnicOnStart</name><packageName /><script>function demonnicOnStart()
  if demonnic.chat.use then
    demonnic.chat:create()
  end
end
</script><eventHandlerList>
							</eventHandlerList></Script><Script isActive="yes" isFolder="no"><name>Code</name><packageName /><script>--[[
If the label callbacks ever decide to start taking a function which is part of a table, 0then this will change.
Or if it's modified to take actual functions. Anonymouse function clickcallback would be awfully nice.
]]

function demonnicChatSwitch(chat)
  local r = demonnic.chat.config.inactiveColors.r
  local g = demonnic.chat.config.inactiveColors.g
  local b = demonnic.chat.config.inactiveColors.b
  local newr = demonnic.chat.config.activeColors.r
  local newg = demonnic.chat.config.activeColors.g
  local newb = demonnic.chat.config.activeColors.b
  local oldchat = demonnic.chat.currentTab
  if demonnic.chat.currentTab ~= chat then
    demonnic.chat.windows[oldchat]:hide()
    demonnic.chat.tabs[oldchat]:setColor(r,g,b)
    demonnic.chat.tabs[oldchat]:echo(oldchat, demonnic.chat.config.inactiveTabText, "c")
    if demonnic.chat.config.blink and demonnic.chat.tabsToBlink[chat] then
      demonnic.chat.tabsToBlink[chat] = nil
    end
    if demonnic.chat.config.blink and chat == demonnic.chat.config.Alltab then
      demonnic.chat.tabsToBlink = {}
    end
  end
  demonnic.chat.tabs[chat]:setColor(newr,newg,newb)
  demonnic.chat.tabs[chat]:echo(chat, demonnic.chat.config.activeTabText, "c")
  demonnic.chat.windows[chat]:show()
  demonnic.chat.currentTab = chat  
end

function demonnic.chat:resetUI()
  demonnic.chat.container = Geyser.Container:new(demonnic.chat[demonnic.chat.config.location]())
  demonnic.chat.tabBox = Geyser.HBox:new({
    x=0,
    y=0,
    width = "100%",
    height = "25px",
    name = "DemonChatTabs",
  },demonnic.chat.container)

end

function demonnic.chat:create()
  --reset the UI
  demonnic.chat:resetUI()
  --Set some variables locally to increase readability
  local r = demonnic.chat.config.inactiveColors.r
  local g = demonnic.chat.config.inactiveColors.g
  local b = demonnic.chat.config.inactiveColors.b
  local winr = demonnic.chat.config.windowColors.r
  local wing = demonnic.chat.config.windowColors.g
  local winb = demonnic.chat.config.windowColors.b

  --iterate the table of channels and create some windows and tabs
  for i,tab in ipairs(demonnic.chat.config.channels) do
    demonnic.chat.tabs[tab] = Geyser.Label:new({
      name=string.format("tab%s", tab),
    }, demonnic.chat.tabBox)
    demonnic.chat.tabs[tab]:echo(tab, demonnic.chat.config.inactiveTabText, "c")
    demonnic.chat.tabs[tab]:setColor(r,g,b)
    demonnic.chat.tabs[tab]:setClickCallback("demonnicChatSwitch", tab)
    demonnic.chat.windows[tab] = Geyser.MiniConsole:new({
--      fontSize = demonnic.chat.config.fontSize,
      x = 0,
      y = 25,
      height = "100%",
      width = "100%",
      name = string.format("win%s", tab),
    }, demonnic.chat.container)
    demonnic.chat.windows[tab]:setFontSize(demonnic.chat.config.fontSize)
    demonnic.chat.windows[tab]:setColor(winr,wing,winb)
    demonnic.chat.windows[tab]:setWrap(demonnic.chat.config.width)
    demonnic.chat.windows[tab]:hide()
  end
  local showme = demonnic.chat.config.Alltab or demonnic.chat.config.channels[1]
  demonnicChatSwitch(showme)
  --start the blink timers, if enabled
  if demonnic.chat.config.blink and not demonnic.chat.blinkTimerOn then
    demonnic.chat:blink()
  end
end

function demonnic.chat:append(chat)
  local r = demonnic.chat.config.windowColors.r
  local g = demonnic.chat.config.windowColors.g
  local b = demonnic.chat.config.windowColors.b
  selectCurrentLine()
  local ofr,ofg,ofb = getFgColor()
  local obr,obg,obb = getBgColor()
  if demonnic.chat.config.preserveBackground then
    setBgColor(r,g,b)
  end
  copy()
  if demonnic.chat.config.timestamp then
    local timestamp = getTime(true, demonnic.chat.config.timestamp)
    local tsfg = {}
    local tsbg = {}
    local colorLeader = ""
    if demonnic.chat.config.timestampCustomColor then
      if type(demonnic.chat.config.timestampFG) == "string" then
        tsfg = color_table[demonnic.chat.config.timestampFG]
      else
        tsfg = demonnic.chat.config.timestampFG
      end
      if type(demonnic.chat.config.timestampBG) == "string" then
        tsbg = color_table[demonnic.chat.config.timestampBG]
      else
        tsbg = demonnic.chat.config.timestampBG
      end
      colorLeader = string.format("&lt;%s,%s,%s:%s,%s,%s&gt;",tsfg[1],tsfg[2],tsfg[3],tsbg[1],tsbg[2],tsbg[3])
    else
      colorLeader = string.format("&lt;%s,%s,%s:%s,%s,%s&gt;",ofr,ofg,ofb,obr,obg,obb)
    end
    local fullstamp = string.format("%s%s",colorLeader,timestamp)
      demonnic.chat.windows[chat]:decho(fullstamp)
      demonnic.chat.windows[chat]:echo(" ")
      if demonnic.chat.config.Alltab then 
        demonnic.chat.windows[demonnic.chat.config.Alltab]:decho(fullstamp)
        demonnic.chat.windows[demonnic.chat.config.Alltab]:echo(" ")
      end
  end
  demonnic.chat.windows[chat]:append()
  if demonnic.chat.config.gag then 
    deleteLine() 
    tempLineTrigger(1,1, [[if isPrompt() then deleteLine() end]])
  end
  if demonnic.chat.config.Alltab then appendBuffer(string.format("win%s", demonnic.chat.config.Alltab)) end
  if demonnic.chat.config.blink and chat ~= demonnic.chat.currentTab then 
    if (demonnic.chat.config.Alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end



function demonnic.chat:blink()
  if demonnic.chat.blinkID then killTimer(demonnic.chat.blinkID) end
  if not demonnic.chat.config.blink then 
    demonnic.chat.blinkTimerOn = false
    return 
  end
  for tab,_ in pairs(demonnic.chat.tabsToBlink) do
    demonnic.chat.tabs[tab]:flash()
  end
  demonnic.chat.blinkID = tempTimer(demonnic.chat.config.blinkTime, function () demonnic.chat:blink() end)
end

function demonnic.chat:topright()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=string.format("-%sc",demonnic.chat.config.width + 2),
    y=0,
    width="-15px",
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:topleft()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=0,
    y=0,
    width=string.format("%sc",demonnic.chat.config.width),
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:bottomright()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=string.format("-%sc",demonnic.chat.config.width + 2),
    y=string.format("-%sc",demonnic.chat.config.lines + 2),
    width="-15px",
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:bottomleft()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=0,
    y=string.format("-%sc",demonnic.chat.config.lines + 2),
    width=string.format("%sc",demonnic.chat.config.width),
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end
</script><eventHandlerList /></Script><Script isActive="yes" isFolder="no"><name>Configuration Options</name><packageName /><script>--[[
This is where all of the configuration options can be set. 
Anything I've put in this script object can be changed, but please do pay attention to what you're doing.
If you change one of the values to something it shouldn't be, you could break it. 
]]

--This is where you tell it to use tabbed chat.
demonnic.chat.use = true

--[[
This is where you say what corner of the screen you want the tabbed chat on
Valid settings are "topright", "topleft", "bottomright", "bottomleft"
]]--
demonnic.chat.config.location = "bottomleft"

--[[
This is a table of channels you would like.
AKA the place you tell the script what tabs you want.
Each entry must be a string. The defaults should be a pretty effective guide.
]]

demonnic.chat.config.channels = {
  "All",
  "Order",
  "House",
  "City",
  "Clans",
  "Tells",
  "Says",
  "Party",
  "Combat",
}


--Set this to the name of the channel you want to have everything sent to. 
--Per the default, this would be the "All" channel. If you have a different name for it:
--
--demonnic.chat.config.Alltab = "Bucket"  
--
--And if you don't want it turned on at all:
--
-- demonnic.chat.config.Alltab = false

demonnic.chat.config.Alltab = "All"



---------------------------------------------------------------------------------
--                                                                             --
--The infamous blinking stuff!!!                                               --
--                                                                             --
---------------------------------------------------------------------------------

--[[
Do you want tabs to blink when you get new messages, until you click on the tab?
True if yes, false if no.
]]
demonnic.chat.config.blink = true

--How long (in seconds) between blinks? For example, 1 would mean a 1 second pause in between blinks.
demonnic.chat.config.blinkTime = 3

--Blink if the bucket tab ("All" by default, but configured above) is in focus?
demonnic.chat.config.blinkFromAll = false




--Font size for the chat messages

demonnic.chat.config.fontSize = 12

--[[
Should we preserve the formatting of the text. 
Or should we set the background of it to match the window color?
Set this to false if you want the background for all chat to match the background of the window.
Useful if you change the background from black, and don't like the way the pasted chat makes blocks in it
]]

demonnic.chat.config.preserveBackground = false

--[[
Gag the chat lines in the main window?
defaults to false, set to true if you want to gag.
]]

demonnic.chat.config.gag = false

--[[
Number of lines of chat visible at once. 
Will determine how tall the window for the chats is.
]]

demonnic.chat.config.lines = 18

--[[
Number of characters to wrap the chatlines at.
This will also determine how wide the chat windows are.
]]

demonnic.chat.config.width = 72

--[[
Set the color for the active tab. R,G,B format.
The default here is a brightish green
]]

demonnic.chat.config.activeColors = {
  r = 0,
  g = 120,
  b = 180,
}

--[[
Set the color for the inactive tab. R,G,B format.
The default here is a drab grey
]]

demonnic.chat.config.inactiveColors = {
  r = 60,
  g = 60,
  b = 60,
}

--[[
Set the color for the chat window itself. R,G,B format.
Defaulted to the black of my twisted hardened soul. Or something.
]]

demonnic.chat.config.windowColors = {
  r = 0,
  g = 0,
  b = 0,
}

--[[
Set the color for the text on the active tab. Uses color names.
Set the default to purple. So the tab you're looking at, by default will be purple on bright green. 
Did I mention I'm a bit colorblind?
]]

demonnic.chat.config.activeTabText = "purple"

--[[
Set the color for the text on the inactive tabs. Uses color names.
Defaulted this to white. So the tabs you're not looking at will be white text on boring grey background.
]]

demonnic.chat.config.inactiveTabText = "white"

--[[
have to make sure a currentTab is set... 
so we'll use the one for the bucket, or the first one in the channels table
Or, you know... what it's currently set to, if it's already set.
]]
demonnic.chat.currentTab = demonnic.chat.currentTab or demonnic.chat.config.Alltab or demonnic.chat.config.channels[1]

</script><eventHandlerList /></Script><Script isActive="yes" isFolder="no"><name>echo functions</name><packageName /><script>
function demonnic.chat:cecho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  cecho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    cecho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:decho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  decho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    decho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:hecho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  hecho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    hecho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:echo(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  echo(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    echo(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end
</script><eventHandlerList /></Script><ScriptGroup isActive="no" isFolder="yes"><name>Shared</name><packageName /><script>--Bootstrapping variables/etc. Don't touch this unless you really know what you're doing

--I mean it. I'll point. AND laugh. loudly. 
demonnic = demonnic or {}
demonnic.config = demonnic.config or {}
demonnic.balances = demonnic.balances or {}
demonnic.balances.balance = demonnic.balances.balance or 1
demonnic.balances.equilibrium = demonnic.balances.equilibrium or 1
demonnic.debug = demonnic.debug or {}
demonnic.debug.active = demonnic.debug.active or nil
demonnic.debug.categories = demonnic.debug.categories or { }


function demonnic:echo(msg)
 cecho(string.format("\n&lt;blue&gt;(&lt;green&gt;Demonnic&lt;blue&gt;):&lt;white&gt; %s", msg))
end</script><eventHandlerList /><Script isActive="yes" isFolder="no"><name>Align</name><packageName /><script>
function align(str,options) --str is a string, options is a table
--[[ If they sent anything but a table as the second argument, return useful
info. But if they didn't send a second argument then that's ok, the defaults
will be enough to get by and just center the txt
]]--
  if (type(options) ~= "table") and (options ~= nil) then return "You call this with align(\"some text to format\", &lt;table of options&gt;. Pls check comments for what options and usage information" end
  options = options or {} --if they sent options, don't overwrite them
  options.width = options.width or 80 --default line length of 80
  options.alignment = options.alignment or "center" --if we don't specify, it's centered
  options.cap = options.cap or "" --default endcap of nothing (an empty string, technically)
  options.spacer = options.spacer or " " --default spacer is.. well.. space
  options.inside = options.inside or false --by default, when centering, formation as spacers|cap|text|cap|spacers
  if not options.mirror == false then options.mirror = options.mirror or true end--by default, we do want to use mirroring for the caps
  local strLen = string.len(str)
  local leftCap = options.cap
  local rightCap = options.cap
  local leftPadLen = math.floor((options.width - strLen)/2,1) - 1
  local rightPadLen = leftPadLen + ((options.width - strLen)%2)
  local maxPad = 0
  local capLen = string.len(options.cap)
  if capLen &gt; leftPadLen then --if the cap is bigger than the left total padding
    options.cap = options.cap:sub(1, leftPadLen) -- trim it up right!
    capLen = string.len(options.cap)
  end --otherwise, don't mess with it

 
  if options.alignment == "center" then --we're going to center something
    leftPadLen = math.floor((options.width - strLen)/2,1) - 1 --get the padding needed on the left
    rightPadLen = leftPadLen + ((options.width - strLen)%2) --and on the right
    if options.mirror then --if we're reversing the left cap and the right cap (IE {{[[ turns into ]]}} )
      rightCap = string.gsub(rightCap, "&lt;", "&gt;")
      rightCap = string.gsub(rightCap, "%[", "%]")
      rightCap = string.gsub(rightCap, "{", "}")
      rightCap = string.gsub(rightCap, "%(", "%)")
      rightCap = string.reverse(rightCap)
    end --otherwise, they'll be the same, so don't do anything
    str = string.format(" %s ", str)
   
  elseif options.alignment == "right" then --we'll right-align the text
    leftPadLen = options.width - strLen - 1
    rightPadLen = 0
    rightCap = ""
    str = string.format(" %s", str)
   
  else --Ok, so if it's not center or right, we assume it's left. We don't do justified. Sorry.
    leftPadLen = 0
    rightPadLen = options.width - strLen -1
    leftCap = ""
    str = string.format("%s ", str)
  end--that's it, took care of both left, right, and center formattings, now to output the durn thing.
 
  if options.inside then
  --if we're placing the repated spacer inside
  --"=====endcap some text endcap====="
  --"=====endcap some text pacdne====="
  --"=================endcap some text"
  --"some text endcap================="
    return leftCap .. string.rep(options.spacer, (leftPadLen - capLen)) .. str ..string.rep(options.spacer, (rightPadLen - capLen)).. rightCap
  else
  --otherwise, it''s be the spaces on the 'inside'
  -- "endcap===== some text =====endcap"
  -- "endcap===== some text =====pacdne"
  -- "endcap================= some text"
  -- "some text =================endcap"
    return string.rep(options.spacer, (leftPadLen - capLen)) .. leftCap .. str .. rightCap .. string.rep(options.spacer, (rightPadLen - capLen))
  end
end


function calign(str,options) --str is a string, options is a table
--[[ If they sent anything but a table as the second argument, return useful 
info. But if they didn't send a second argument then that's ok, the defaults 
will be enough to get by and just center the txt
]]--
  if (not type(options) == "table") and (not options == nil) then return "You call this with align(\"some text to format\", &lt;table of options&gt;. Pls check comments for what options and usage information" end 
  options = options or {} --if they sent options, don't overwrite them
  options.width = options.width or 80 --default line length of 80
  options.alignment = options.alignment or "center" --if we don't specify, it's centered
  options.cap = options.cap or "" --default endcap of nothing (an empty string, technically)
  options.spacer = options.spacer or " " --default spacer is.. well.. space
  options.inside = options.inside or false --by default, when centering, formation as spacers|cap|text|cap|spacers
  options.capColor = options.capColor or "&lt;white&gt;"--by default, don't change the color of the caps
  options.spacerColor = options.spacerColor or "&lt;white&gt;"
  options.textColor = options.textColor or "&lt;white&gt;"--or the text
  if not options.mirror == false then options.mirror = options.mirror or true end--by default, we do want to use mirroring for the caps
  local strLen = string.len(str)
  local leftCap = options.cap
  local rightCap = options.cap
  local leftPadLen = math.floor((options.width - strLen)/2,1) - 1
  local rightPadLen = leftPadLen + ((options.width - strLen)%2)
  local maxPad = 0
  local capLen = string.len(options.cap)
  if capLen &gt; leftPadLen then --if the cap is bigger than the left total padding
    options.cap = options.cap:sub(1, leftPadLen) -- trim it up right!
    capLen = string.len(options.cap)
  end --otherwise, don't mess with it

  
  if options.alignment == "center" then --we're going to center something
    leftPadLen = math.floor((options.width - strLen)/2,1) - 1 --get the padding needed on the left
    rightPadLen = leftPadLen + ((options.width - strLen)%2) --and on the right
    if options.mirror then --if we're reversing the left cap and the right cap (IE {{[[ turns into ]]}} )
      rightCap = string.gsub(rightCap, "&lt;", "&gt;")
      rightCap = string.gsub(rightCap, "%[", "%]")
      rightCap = string.gsub(rightCap, "{", "}")
      rightCap = string.gsub(rightCap, "%(", "%)")
      rightCap = string.reverse(rightCap)
    end --otherwise, they'll be the same, so don't do anything
    str = string.format(" %s ", str)
    
  elseif options.alignment == "right" then --we'll right-align the text
    leftPadLen = options.width - strLen - 1
    rightPadLen = 0
    rightCap = ""
    str = string.format(" %s", str)
    
  else --Ok, so if it's not center or right, we assume it's left. We don't do justified. Sorry.
    leftPadLen = 0
    rightPadLen = options.width - strLen -1
    leftCap = ""
    str = string.format("%s ", str)
  end--that's it, took care of both left, right, and center formattings, now to output the durn thing. 
  
  if options.inside then 
  --if we're placing the repated spacer inside
  --"=====endcap some text endcap=====" 
  --"=====endcap some text pacdne====="
  --"=================endcap some text" 
  --"some text endcap================="
    return options.capColor .. leftCap .. options.spacerColor.. string.rep(options.spacer, (leftPadLen - capLen)) .. options.textColor .. str .. options.spacerColor ..string.rep(options.spacer, (rightPadLen - capLen)) .. options.capColor .. rightCap
  else 
  --otherwise, it''s be the spaces on the 'inside'
  -- "endcap===== some text =====endcap"
  -- "endcap===== some text =====pacdne" 
  -- "endcap================= some text" 
  -- "some text =================endcap"
    return options.spacerColor .. string.rep(options.spacer, (leftPadLen - capLen)) .. options.capColor .. leftCap .. options.textColor .. str .. options.capColor .. rightCap .. options.spacerColor .. string.rep(options.spacer, (rightPadLen - capLen))
  end
end

function dalign(str,options) --str is a string, options is a table
--[[ If they sent anything but a table as the second argument, return useful 
info. But if they didn't send a second argument then that's ok, the defaults 
will be enough to get by and just center the txt
]]--
  if (not type(options) == "table") and (not options == nil) then return "You call this with align(\"some text to format\", &lt;table of options&gt;. Pls check comments for what options and usage information" end 
  options = options or {} --if they sent options, don't overwrite them
  options.width = options.width or 80 --default line length of 80
  options.alignment = options.alignment or "center" --if we don't specify, it's centered
  options.cap = options.cap or "" --default endcap of nothing (an empty string, technically)
  options.spacer = options.spacer or " " --default spacer is.. well.. space
  options.inside = options.inside or false --by default, when centering, formation as spacers|cap|text|cap|spacers
  options.capColor = options.capColor or "&lt;255,255,255&gt;"--by default, don't change the color of the caps
  options.spacerColor = options.spacerColor or "&lt;255,255,255&gt;" 
  options.textColor = options.textColor or "&lt;255,255,255&gt;"--or the text
  if not options.mirror == false then options.mirror = options.mirror or true end--by default, we do want to use mirroring for the caps
  local strLen = string.len(str)
  local leftCap = options.cap
  local rightCap = options.cap
  local leftPadLen = math.floor((options.width - strLen)/2,1) - 1
  local rightPadLen = leftPadLen + ((options.width - strLen)%2)
  local maxPad = 0
  local capLen = string.len(options.cap)
  if capLen &gt; leftPadLen then --if the cap is bigger than the left total padding
    options.cap = options.cap:sub(1, leftPadLen) -- trim it up right!
    capLen = string.len(options.cap)
  end --otherwise, don't mess with it

  
  if options.alignment == "center" then --we're going to center something
    leftPadLen = math.floor((options.width - strLen)/2,1) - 1 --get the padding needed on the left
    rightPadLen = leftPadLen + ((options.width - strLen)%2) --and on the right
    if options.mirror then --if we're reversing the left cap and the right cap (IE {{[[ turns into ]]}} )
      rightCap = string.gsub(rightCap, "&lt;", "&gt;")
      rightCap = string.gsub(rightCap, "%[", "%]")
      rightCap = string.gsub(rightCap, "{", "}")
      rightCap = string.gsub(rightCap, "%(", "%)")
      rightCap = string.reverse(rightCap)
    end --otherwise, they'll be the same, so don't do anything
    str = string.format(" %s ", str)
    
  elseif options.alignment == "right" then --we'll right-align the text
    leftPadLen = options.width - strLen - 1
    rightPadLen = 0
    rightCap = ""
    str = string.format(" %s", str)
    
  else --Ok, so if it's not center or right, we assume it's left. We don't do justified. Sorry.
    leftPadLen = 0
    rightPadLen = options.width - strLen -1
    leftCap = ""
    str = string.format("%s ", str)
  end--that's it, took care of both left, right, and center formattings, now to output the durn thing. 
  
  if options.inside then 
  --if we're placing the repated spacer inside
  --"=====endcap some text endcap=====" 
  --"=====endcap some text pacdne====="
  --"=================endcap some text" 
  --"some text endcap================="
    return options.capColor .. leftCap .. options.spacerColor.. string.rep(options.spacer, (leftPadLen - capLen)) .. options.textColor .. str .. options.spacerColor ..string.rep(options.spacer, (rightPadLen - capLen)) .. options.capColor .. rightCap
  else 
  --otherwise, it''s be the spaces on the 'inside'
  -- "endcap===== some text =====endcap"
  -- "endcap===== some text =====pacdne" 
  -- "endcap================= some text" 
  -- "some text =================endcap"
    return options.spacerColor .. string.rep(options.spacer, (leftPadLen - capLen)) .. options.capColor .. leftCap .. options.textColor .. str .. options.capColor .. rightCap .. options.spacerColor .. string.rep(options.spacer, (rightPadLen - capLen))
  end
end

function halign(str,options) --str is a string, options is a table
--[[ If they sent anything but a table as the second argument, return useful 
info. But if they didn't send a second argument then that's ok, the defaults 
will be enough to get by and just center the txt
]]--
  if (not type(options) == "table") and (not options == nil) then return "You call this with align(\"some text to format\", &lt;table of options&gt;. Pls check comments for what options and usage information" end 
  options = options or {} --if they sent options, don't overwrite them
  options.width = options.width or 80 --default line length of 80
  options.alignment = options.alignment or "center" --if we don't specify, it's centered
  options.cap = options.cap or "" --default endcap of nothing (an empty string, technically)
  options.spacer = options.spacer or " " --default spacer is.. well.. space
  options.inside = options.inside or false --by default, when centering, formation as spacers|cap|text|cap|spacers
  options.capColor = options.capColor or "|cFFFFFF"--by default, don't change the color of the caps
  options.spacerColor = options.spacerColor or "|cFFFFFF" 
  options.textColor = options.textColor or "|cFFFFFF"--or the text
  if not options.mirror == false then options.mirror = options.mirror or true end--by default, we do want to use mirroring for the caps
  local strLen = string.len(str)
  local leftCap = options.cap
  local rightCap = options.cap
  local leftPadLen = math.floor((options.width - strLen)/2,1) - 1
  local rightPadLen = leftPadLen + ((options.width - strLen)%2)
  local maxPad = 0
  local capLen = string.len(options.cap)
  if capLen &gt; leftPadLen then --if the cap is bigger than the left total padding
    options.cap = options.cap:sub(1, leftPadLen) -- trim it up right!
    capLen = string.len(options.cap)
  end --otherwise, don't mess with it

  
  if options.alignment == "center" then --we're going to center something
    leftPadLen = math.floor((options.width - strLen)/2,1) - 1 --get the padding needed on the left
    rightPadLen = leftPadLen + ((options.width - strLen)%2) --and on the right
    if options.mirror then --if we're reversing the left cap and the right cap (IE {{[[ turns into ]]}} )
      rightCap = string.gsub(rightCap, "&lt;", "&gt;")
      rightCap = string.gsub(rightCap, "%[", "%]")
      rightCap = string.gsub(rightCap, "{", "}")
      rightCap = string.gsub(rightCap, "%(", "%)")
      rightCap = string.reverse(rightCap)
    end --otherwise, they'll be the same, so don't do anything
    str = string.format(" %s ", str)
    
  elseif options.alignment == "right" then --we'll right-align the text
    leftPadLen = options.width - strLen - 1
    rightPadLen = 0
    rightCap = ""
    str = string.format(" %s", str)
    
  else --Ok, so if it's not center or right, we assume it's left. We don't do justified. Sorry.
    leftPadLen = 0
    rightPadLen = options.width - strLen -1
    leftCap = ""
    str = string.format("%s ", str)
  end--that's it, took care of both left, right, and center formattings, now to output the durn thing. 
  
  if options.inside then 
  --if we're placing the repated spacer inside
  --"=====endcap some text endcap=====" 
  --"=====endcap some text pacdne====="
  --"=================endcap some text" 
  --"some text endcap================="
    return options.capColor .. leftCap .. options.spacerColor.. string.rep(options.spacer, (leftPadLen - capLen)) .. options.textColor .. str .. options.spacerColor ..string.rep(options.spacer, (rightPadLen - capLen)) .. options.capColor .. rightCap
  else 
  --otherwise, it''s be the spaces on the 'inside'
  -- "endcap===== some text =====endcap"
  -- "endcap===== some text =====pacdne" 
  -- "endcap================= some text" 
  -- "some text =================endcap"
    return options.spacerColor .. string.rep(options.spacer, (leftPadLen - capLen)) .. options.capColor .. leftCap .. options.textColor .. str .. options.capColor .. rightCap .. options.spacerColor .. string.rep(options.spacer, (rightPadLen - capLen))
  end
end
 
</script><eventHandlerList /></Script><Script isActive="yes" isFolder="no"><name>Geyser Additions</name><packageName /><script>function Geyser.MiniConsole:clear()
   clearWindow(self.name)
end

function Geyser.MiniConsole:append()
  appendBuffer(self.name)
end
</script><eventHandlerList /></Script><Script isActive="no" isFolder="no"><name>demonnicVitals</name><packageName /><script>--Set some vital statistics. Will work with both ATCP and GMCP. 

function demonnicVitals( msg, arg )
  demonnic.nextLevel = tonumber(gmcp.Char.Vitals.nl)
  demonnic.curHealth = tonumber(gmcp.Char.Vitals.hp)    
  demonnic.maxHealth = tonumber(gmcp.Char.Vitals.maxhp)
  demonnic.curMana = tonumber(gmcp.Char.Vitals.mp)
  demonnic.maxMana = tonumber(gmcp.Char.Vitals.maxmp)
  demonnic.curEgo = tonumber(gmcp.Char.Vitals.ego)
  demonnic.maxEgo = tonumber(gmcp.Char.Vitals.maxego)
  demonnic.curPower = tonumber(gmcp.Char.Vitals.pow)
  demonnic.maxPower = tonumber(gmcp.Char.Vitals.maxpow)
  demonnic.curWillpower = tonumber(gmcp.Char.Vitals.wp)
  demonnic.maxWillpower = tonumber(gmcp.Char.Vitals.maxwp)
  demonnic.curEndurance = tonumber(gmcp.Char.Vitals.ep)
  demonnic.maxEndurance = tonumber(gmcp.Char.Vitals.maxep)
end
</script><eventHandlerList>
								</eventHandlerList></Script><Script isActive="yes" isFolder="no"><name>Debugging</name><packageName /><script>--Adds debugging functionality 

function demonnic:Debug(category,debugData)
   if category then
      if table.contains(demonnic.debug.categories, category) then
         if type(debugData) == "table" then
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt;")
            display(debugData)
         elseif type(debugData) == "string" or type(debugData) == "number" then
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. debugData .. "\n" )
         else
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. tostring(debugData) .. "\n" )
         end
      end
   else
      if type(debugData) == "table" then
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt;")
         display(debugData)
      elseif type(debugData) == "string" or type(debugData) == "number" then
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. debugData)
      else
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. tostring(debugData))
      end
   end
end

function demonnic:printDebug(category, debugData)
   if not demonnic.debug.active then return end
   demonnic:Debug(category, debugData)
end

function demonnic:toggleDebug()
   if demonnic.debug.active then demonnic.debug.active = nil
   else demonnic.debug.active = true
   end
   demonnic:echo("Debugging is currently " .. (( demonnic.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;"))
end

function demonnic:watchCategory( category )
   if table.contains(demonnic.debug.categories, category) then
      for i,v in ipairs(demonnic.debug.categories) do
         if v == category then
            table.remove(demonnic.debug.categories, i)
         end
      end
      demonnic:echo("No longer watching the '&lt;red&gt;"..category.."&lt;white&gt;' category.") 
   else
      table.insert(demonnic.debug.categories, category)
      demonnic:echo("Now watching the '&lt;red&gt;"..category.."&lt;white&gt;' category.")
   end
   demonnic:echo("Debugging is currently " .. (( demonnic.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;"))
end

function demonnic:listCategories()
   if #demonnic.debug.categories &gt; 0 then
      demonnic:echo("You are currently watching the following categories:\n" .. table.concat(demonnic.debug.categories,", ") )
   else
      demonnic:echo("You are not watching any debugs.")
   end
end

</script><eventHandlerList /></Script><ScriptGroup isActive="no" isFolder="yes"><name>GMCP Events</name><packageName /><script /><eventHandlerList /><Script isActive="yes" isFolder="no"><name>EnableIRE.Rift</name><packageName /><script>gmod.registerUser("Demonnic")
gmod.enableModule("Demonnic", "IRE.Rift")
</script><eventHandlerList /></Script><ScriptGroup isActive="yes" isFolder="yes"><name>Skill Events</name><packageName /><script>--[[
set of events which will autopopulate a skills table called demonnic.skills
You can use this to determine what skills are available to your char
and adjust other variables accordingly
display(demonnic.skills) to see the format
]]</script><eventHandlerList /><ScriptGroup isActive="yes" isFolder="yes"><name>Get skills in group</name><packageName /><script>--[[
This populates the subtable for each skill group. It is recieved for an individual skillgroup, and will fire once for each one
demonnic.skills.skillgroup will be the name (IE demonnic.skills.environment will hold the list of all the skills you've learned in environment
Because when we get the list of groups it sends a request for each group of skills we know, it will populate the whole table.
]]</script><eventHandlerList /><Script isActive="yes" isFolder="no"><name>demonnic_skillsList</name><packageName /><script>function demonnic_skillsList()
  local group = gmcp.Char.Skills.List.group
  local list = gmcp.Char.Skills.List.list
  if group then
    if not demonnic.skills then demonnic.skills = {} end
    demonnic.skills[group] = list
    raiseEvent("demonnicSkillFilled", group)
  end
end
</script><eventHandlerList>
											</eventHandlerList></Script></ScriptGroup><ScriptGroup isActive="yes" isFolder="yes"><name>Get list of groups</name><packageName /><script>--[[
This will create demonnic.skills.skillgroup as a table, and send a GMCP request for the list of skills in each skillgroup
IOW, this tells us what skills we can lookup (like AB with no argument)
It also sends a newline, so that we get all the returns from the gmcp requests
]]</script><eventHandlerList /><Script isActive="yes" isFolder="no"><name>demonnic_skillGroups</name><packageName /><script>function demonnic_skillGroups()
  demonnic.skills = {}
  for _,extra in ipairs(gmcp.Char.Skills.Groups) do
    skillstring = string.format("Char.Skills.Get %s", yajl.to_string({group=extra.name}))
    sendGMCP(skillstring)
  end
  send("\n")
end
</script><eventHandlerList>
											</eventHandlerList></Script></ScriptGroup></ScriptGroup><ScriptGroup isActive="yes" isFolder="yes"><name>Room Items</name><packageName /><script>--[[
The events kept within this folder will populate demonnic.roomItems on entering a room or doing 'look'
It also adds items to the list as they enter the room (or get dropped)
And removes them when they get picked up
you can do display(demonnic.roomItems) to see the format to work with
]]</script><eventHandlerList /><ScriptGroup isActive="yes" isFolder="yes"><name>Add items when they enter</name><packageName /><script>--[[
This event adds items when gmcp tells you items have been added to the room
IE a creature enters, someone drops something, etc.
]]</script><eventHandlerList /><Script isActive="yes" isFolder="no"><name>demonnic_riadd</name><packageName /><script>function demonnic_riadd()
  local item = gmcp.Char.Items.Add
  if item.location == "room" then 
    item = item.item 
    if not demonnic.roomItems[item.name] then demonnic.roomItems[item.name] = {} end
    table.insert(demonnic.roomItems[item.name], item.id)
  end
end
</script><eventHandlerList>
											</eventHandlerList></Script></ScriptGroup><ScriptGroup isActive="yes" isFolder="yes"><name>Populate on look</name><packageName /><script>--[[
This event resets demonnic.roomItems, since it gives the complete list of items
It fires when you move, or LOOK.
]]</script><eventHandlerList /><Script isActive="yes" isFolder="no"><name>demonnic_rilist</name><packageName /><script>function demonnic_rilist()
  local list = gmcp.Char.Items.List
  if list.location == "room" then
    demonnic.roomItems = {}
    for _,v in ipairs(list.items) do
      if not demonnic.roomItems[v.name] then demonnic.roomItems[v.name] = {} end
      table.insert(demonnic.roomItems[v.name], v.id)
    end
  end
  if list.location == "inv" then
    return
  end
end
</script><eventHandlerList>
											</eventHandlerList></Script></ScriptGroup><ScriptGroup isActive="yes" isFolder="yes"><name>Remove items when they leave</name><packageName /><script>--[[
This event fires when gmcp says an item leaves the room
IE someone picks it up, it's a mob and it moves out of the room, etc.
]]</script><eventHandlerList /><Script isActive="yes" isFolder="no"><name>demonnic_rileave</name><packageName /><script>function demonnic_rileave()
  local item = gmcp.Char.Items.Remove
  if item.location == "room" then
    for name,items in pairs(demonnic.roomItems) do
      for i,id in ipairs(items) do
        if id == tostring(item.item) then
          table.remove(demonnic.roomItems[name],i) 
          if #demonnic.roomItems[name] == 0 then
            demonnic.roomItems[name] = nil
          end
        end
      end
    end
  end
end
</script><eventHandlerList>
											</eventHandlerList></Script></ScriptGroup></ScriptGroup></ScriptGroup></ScriptGroup></ScriptGroup></ScriptGroup></ScriptGroup><ScriptGroup isActive="yes" isFolder="yes"><name>Prospector</name><packageName>Prospector</packageName><script /><eventHandlerList /><ScriptGroup isActive="yes" isFolder="yes"><name>prospectingscript</name><packageName>prospectingscript</packageName><script /><eventHandlerList /><ScriptGroup isActive="yes" isFolder="yes"><name>Prospecting</name><packageName /><script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------

</script><eventHandlerList /><Script isActive="yes" isFolder="no"><name>ProspectingArrived</name><packageName /><script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------

LodeList = {}


function ProspectingArrived()

	if ProspectList[1] and prospecting == 1 then
		table.remove(ProspectList,1)
		if ProspectList[1] then 
			prospectingtimer = tempTimer(0.8, [[mmp.gotoRoom(ProspectList[1])]]) 
		else 
			echo("Area fully explored!")
			prospecting=0
		end
	send("prospect") 
	send("read sign")
	end


end
</script><eventHandlerList>
							</eventHandlerList></Script></ScriptGroup></ScriptGroup></ScriptGroup></ScriptPackage><KeyPackage /><HelpPackage><helpURL /></HelpPackage></MudletPackage>